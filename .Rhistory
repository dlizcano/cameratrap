prob = 0.95) # intervalos de credibilidad
library(bayesplot) # gráficos estimaciones bayesianas
# Veamos el gráfico de la distribución posterior
mcmc_areas(fit.commu, # objeto jags
pars= "Ntotal", # parámetro de interés
point_est = "mean",
prob = 0.95) # intervalos de credibilidad
# library(ggpmthemes)
# library(glue)
# library(ggforce)
# library(curl)
library(patchwork)
library(readxl)
library(sf)
library(mapview)
# library(ggTimeSeries) # calendar
library(terra)
library(elevatr)
library(camtrapR) # Datos de cámaras y modelos
library(rjags) # Lenguaje JAGS
library(nimble) # LEnguaje BUGS
#library(nimbleEcology) # Nimble enfocado en jerárquicos
library(bayesplot) # gráficos estimaciones bayesianas
library(SpadeR) # Riqueza Chao2
library(tictoc) # Opcional de tiempo
library(beepr) # Opcional de alertas
library(snowfall)
library(bayesplot) # gráficos estimaciones bayesianas
# library(knitr)
# options(kableExtra.auto_format = FALSE)
library(kableExtra)
library(tidyverse)
source("C:/CodigoR/CameraTrapCesar/R/organiza_datos.R")
mcmc_trace(fit.commu, pars = "Ntotal")
gd <- as.data.frame(gelman.diag(fit.commu,  multivariate = FALSE)[[1]])
gd["Ntotal",]
# Formatear los datos a un vector de frecuencia
inci_Chao <- ylist %>%  # historias de captura
map(~rowSums(.,na.rm = T)) %>% # sumo las detecciones en cada sitio
reduce(cbind) %>% # unimos las listas
t() %>% # trasponer la tabla
as_tibble() %>% #formato tibble
mutate_if(is.numeric,~(.>=1)*1) %>%  #como es incidencia, formateo a 1 y 0
rowSums() %>%  # ahora si la suma de las incidencias en cada sitio
as_tibble() %>%
add_row(value= 67, .before = 1) %>%  # el formato requiere que el primer valor sea el número de sitios
as.matrix() # Requiere formato de matriz
# Calcular la riqueza con estimadores no paramétricos
chao_sp <- ChaoSpecies(inci_Chao, datatype = "incidence_freq")
NIChao <- chao_sp$Species_table[4,c(1,3,4)] # Extraer valores de IChao
Nocu<- mcmc_intervals(fit.commu, pars = "Ntotal", prob = 0.95,prob_outer = 0.99, point_est = "mean")[[1]] %>%  # Extraer valores del bayes plot
select(m,l,h) %>% # Seleccionar columnas
rename("Estimate"= m, # Renombrarlas
"95%Lower"= l,
"95%Upper"= h)
# Unir en un solo dataframe
Nplotdata <- rbind(IChao=NIChao, DR.mod=Nocu) %>%
as.data.frame() %>%
rownames_to_column(.)
# Gráfico para comparar la riqueza estimada
plotN <- ggplot(Nplotdata, aes(x=rowname, y= Estimate, col=rowname))+
geom_point(aes(shape=rowname),size=3)+
geom_errorbar(aes(ymin= `95%Lower`, ymax= `95%Upper`), width=.3, size=1)+
labs(x="Estimador de riqueza",y="Número de especies estimado", title = "Diferencia de los estimadores de riqueza")+
theme_classic()+
theme(text=element_text(size = 13), plot.title = element_text(hjust= 0.5), legend.position = "none")
plotN
library(grateful) # Facilitate Citation of R Packages
pkgs <- cite_packages(output = "paragraph", out.dir = ".") #knitr::kable(pkgs)
?renv::dependencies
renv::dependencies()
library(grateful) # Facilitate Citation of R Packages
library(patchwork)
library(readxl)
library(sf)
library(mapview)
library(terra)
library(elevatr)
library(camtrapR)
library(rjags)
library(nimble)
library(bayesplot)
library(SpadeR)
library(tictoc)
library(beepr)
library(snowfall)
library(bayesplot)
library(kableExtra)
library(tidyverse)
categories: [R, occupancy, JAGS]
library(grateful) # Facilitate Citation of R Packages
library(patchwork) # The Composer of Plots
library(readxl) # Read Excel Files
library(sf) # Simple Features for R
library(mapview) # Interactive Viewing of Spatial Data in R
library(terra) # Spatial Data Analysis
library(elevatr) # Access Elevation Data from Various APIs
library(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses
library(rjags) # Bayesian Graphical Models using MCMC
library(nimble) # MCMC, Particle Filtering, and Programmable Hierarchical Modeling
library(bayesplot) # Plotting for Bayesian Models # Plotting for Bayesian Models
library(SpadeR) # Species-Richness Prediction and Diversity Estimation with R
library(tictoc) # Functions for Timing R Scripts, as Well as Implementations of "Stack" and "StackList" Structures
library(beepr) # Easily Play Notification Sounds on any Platform
library(snowfall) # Easier Cluster Computing (Based on 'snow')
library(bayesplot) # Plotting for Bayesian Models # Plotting for Bayesian Models
library(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax
library(tidyverse) # Easily Install and Load the 'Tidyverse'
plot_coef(comu_model,
fit.commu,
submodel = "state",
combine = T)
pkgs <- cite_packages(output = "paragraph", out.dir = ".") #knitr::kable(pkgs)
pkgs
mapview(cos_rast) + mapview(datos_PCF_sf)
mapview(elev) + mapview(datos_PCF_sf)
summary(comu_model)
#| label: renv
#| include: false
# https://www.joelnitta.com/posts/2024-01-11_using_renv_with_blog/
# library(renv)
# renv::use(lockfile = "renv.lock")
library(quarto) # R Interface to 'Quarto' Markdown Publishing System
library(styler) # Non-Invasive Pretty Printing of R Code
library(grateful) # Facilitate Citation of R Packages
library(patchwork) # The Composer of Plots
library(readxl) # Read Excel Files
library(sf) # Simple Features for R
library(mapview) # Interactive Viewing of Spatial Data in R
library(terra) # Spatial Data Analysis
library(elevatr) # Access Elevation Data from Various APIs
library(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses
library(rjags) # Bayesian Graphical Models using MCMC
library(nimble) # MCMC, Particle Filtering, and Programmable Hierarchical Modeling
library(bayesplot) # Plotting for Bayesian Models # Plotting for Bayesian Models
library(SpadeR) # Species-Richness Prediction and Diversity Estimation with R
library(tictoc) # Functions for Timing R Scripts, as Well as Implementations of "Stack" and "StackList" Structures
library(beepr) # Easily Play Notification Sounds on any Platform
library(snowfall) # Easier Cluster Computing (Based on 'snow')
library(bayesplot) # Plotting for Bayesian Models # Plotting for Bayesian Models
library(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax
library(tidyverse) # Easily Install and Load the 'Tidyverse'
datos <- read_excel("C:/CodigoR/CameraTrapCesar/data/CT_Cesar.xlsx")
# make a new column Station
# datos_PCF <- datos |> dplyr::filter(Proyecto=="CT_LaPaz_Manaure") |> unite ("Station", ProyectoEtapa:Salida:CT, sep = "-")
# fix dates
datos$Start <- as.Date(datos$Start, "%d/%m/%Y")
datos$End <- as.Date(datos$End, "%d/%m/%Y")
datos$eventDate <- as.Date(datos$eventDate, "%d/%m/%Y")
datos$eventDateTime <- ymd_hms(paste(datos$eventDate, " ",
datos$eventTime, ":00", sep=""))
# filter Becerril
datos_PCF <- datos |> dplyr::filter(ProyectoEtapa=="CT_Becerril") |> mutate (Station=IdGeo)
# filter 2021 and make uniques
CToperation  <- datos_PCF |> filter(Year==2021) |> group_by(Station) |>
mutate(minStart=min(Start), maxEnd=max(End)) |> distinct(Longitude, Latitude, minStart, maxEnd, Year) |> ungroup()
# Generamos la matríz de operación de las cámaras
camop <- cameraOperation(CTtable= CToperation, # Tabla de operación
stationCol= "Station", # Columna que define la estación
setupCol= "minStart", #Columna fecha de colocación
retrievalCol= "maxEnd", #Columna fecha de retiro
#hasProblems= T, # Hubo fallos de cámaras
dateFormat= "%Y-%m-%d") #, # Formato de las fechas
#cameraCol="CT")
# sessionCol= "Year")
# Generar las historias de detección ---------------------------------------
## remove plroblem species
ind <- which(datos_PCF$Species=="Marmosa sp.")
datos_PCF <- datos_PCF[-ind,]
DetHist_list <- lapply(unique(datos_PCF$Species), FUN = function(x) {
detectionHistory(
recordTable         = datos_PCF, # Tabla de registros
camOp                = camop, # Matriz de operación de cámaras
stationCol           = "Station",
speciesCol           = "Species",
recordDateTimeCol    = "eventDateTime",
recordDateTimeFormat  = "%Y-%m-%d",
species              = x,     # la función reemplaza x por cada una de las especies
occasionLength       = 10, # Colapso de las historias a 10 ías
day1                 = "station", #inicie en la fecha de cada survey
datesAsOccasionNames = FALSE,
includeEffort        = TRUE,
scaleEffort          = TRUE,
#unmarkedMultFrameInput=TRUE
timeZone             = "America/Bogota"
)
}
)
# names
names(DetHist_list) <- unique(datos_PCF$Species)
# Finalmente creamos una lista nueva donde estén solo las historias de detección
ylist <- lapply(DetHist_list, FUN = function(x) x$detection_history)
# make sf object
projlatlon <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
datos_PCF_sf <-  st_as_sf(x = CToperation,
coords = c("Longitude",
"Latitude"),
crs = projlatlon)
# covariates
elev <- rast(get_elev_raster(datos_PCF_sf, z=14)) # get raster map
slope <- terrain(elev, v="slope", neighbors=8, unit="degrees")
# also slope, aspect, TPI, TRI, TRIriley, TRIrmsd, roughness, flowdir
rough <- terrain(elev, v="roughness", neighbors=8, unit="degrees")
# landcover <- rast("C:/CodigoR/WCS-CameraTrap/raster/latlon/LandCover_Type_Yearly_500m_v61/LC1/MCD12Q1_LC1_2021_001.tif")
cos_rast <- c(elev,slope, rough) # make a stack
# rename stack
names(cos_rast) <- c("elev", "slope", "rough")
mapview(elev) + mapview(datos_PCF_sf)
# extract
covs <- terra::extract(cos_rast, datos_PCF_sf)
# landcov <- terra::extract(landcover, datos_PCF_sf)
# check consistancy equal mumner of spatial covariates and rows in data
# identical(nrow(ylist[[1]]), nrow(covars))
# Base de datos para los análisis -----------------------------------------
data_list <- list(ylist    = ylist, # Historias de detección
siteCovs = covs[,2:4], #covars, # Covariables de sitio
obsCovs  = list(effort = DetHist_list[[1]]$effort))  # agregamos el esfuerzo de muestreo como covariable de observación
# 3. 1 Modelo multi-especie  -----------------------------------------
# Se creará un txt temporal donde estarán las especificaciones del modelo en enfoque Bayesiano
modelfile <- (fileext = "modoccu.txt")
# Usaremos la función ` communityModel`
# Generemos el modelo
comu_model <- communityModel(data_list, # la lista de datos
occuCovs = list(ranef=c("rough", "elev")), # ranef La covariables de sitio
detCovsObservation = list(fixed = "effort"), #Covariables de observación
intercepts = list(det = "ranef", occu = "ranef"),
augmentation = c(full = 30),# Número aumentado de especies
modelFile = "modelfile")
summary(comu_model)
#| echo: false
#| eval: true
load("C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/DR_result.R")
# Valor de Ntotal, es decir del número de especies estimado
(riqueza_est <- modresult["Ntotal",])
# Resultados --------------------------------------------------------------
# Extraemos lo tabla de valores estimados
modresult <- as.data.frame(summary(fit.commu)[["statistics"]])
# View(modresult)
DT::datatable(round(summary(fit.commu)$statistics, 3))
# Valor de Ntotal, es decir del número de especies estimado
(riqueza_est <- modresult["Ntotal",])
# Veamos el gráfico de la distribución posterior
mcmc_areas(fit.commu, # objeto jags
pars= "Ntotal", # parámetro de interés
point_est = "mean",
prob = 0.95) # intervalos de credibilidad
# La estimación no se ve muy bien, hay que verificar los trace plots
mcmc_trace(fit.commu, pars = "Ntotal")
# Debería verse como un cesped, muy probablemente necesitamos muchas mas iteraciones para este modelo
gd <- as.data.frame(gelman.diag(fit.commu,  multivariate = FALSE)[[1]])
gd["Ntotal",]
#La prueba de Gelman-Rubin debe ser ~1 para considerar que hay buena convergencia. Aunque tenemos un valor bueno para Ntotal, hay varios valores de omega con NA, eso puede estar causando los problemas.
# Comparando con métodos clásicos -----------------------------------------
# Formatear los datos a un vector de frecuencia
inci_Chao <- ylist %>%  # historias de captura
map(~rowSums(.,na.rm = T)) %>% # sumo las detecciones en cada sitio
reduce(cbind) %>% # unimos las listas
t() %>% # trasponer la tabla
as_tibble() %>% #formato tibble
mutate_if(is.numeric,~(.>=1)*1) %>%  #como es incidencia, formateo a 1 y 0
rowSums() %>%  # ahora si la suma de las incidencias en cada sitio
as_tibble() %>%
add_row(value= 67, .before = 1) %>%  # el formato requiere que el primer valor sea el número de sitios
as.matrix() # Requiere formato de matriz
# Calcular la riqueza con estimadores no paramétricos
chao_sp <- ChaoSpecies(inci_Chao, datatype = "incidence_freq")
NIChao <- chao_sp$Species_table[4,c(1,3,4)] # Extraer valores de IChao
Nocu<- mcmc_intervals(fit.commu, pars = "Ntotal", prob = 0.95,prob_outer = 0.99, point_est = "mean")[[1]] %>%  # Extraer valores del bayes plot
select(m,l,h) %>% # Seleccionar columnas
rename("Estimate"= m, # Renombrarlas
"95%Lower"= l,
"95%Upper"= h)
# Unir en un solo dataframe
Nplotdata <- rbind(IChao=NIChao, DR.mod=Nocu) %>%
as.data.frame() %>%
rownames_to_column(.)
# Gráfico para comparar la riqueza estimada
plotN <- ggplot(Nplotdata, aes(x=rowname, y= Estimate, col=rowname))+
geom_point(aes(shape=rowname),size=3)+
geom_errorbar(aes(ymin= `95%Lower`, ymax= `95%Upper`), width=.3, size=1)+
labs(x="Estimador de riqueza",y="Número de especies estimado", title = "Diferencia de los estimadores de riqueza")+
theme_classic()+
theme(text=element_text(size = 13), plot.title = element_text(hjust= 0.5), legend.position = "none")
plotN
# species occupancy estimates
predictions_psi <- predict(object    = comu_model,
mcmc.list = fit.commu,
x         = cos_rast,
type      = "psi",
draws     = 10)
# Plot occupancy
plot(predictions_psi$mean, zlim = c(0,1),
col = hcl.colors(100),
maxnl = 9,   # plotting only the first 9 species for space reasons
asp = 1)
predictions_psi
class(predictions_psi)
# save the results to not run again
save(predictions_psi, file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_psi.R") # guardamos los resultados para no correr de nuevo
# Plot occupancy
plot(predictions_psi$mean, zlim = c(0,1),
col = hcl.colors(100),
maxnl = 9,   # plotting only the first 9 species for space reasons
asp = 1)
View(predictions_psi)
# species richness estimates
predictions_rich <- predict(object   = comu_model,
mcmc.list = fit.commu,
x         = cos_rast,
type      = "richness")
# species richness estimates
predictions_rich <- predict(object   = comu_model,
mcmc.list = fit.commu,
x         = cos_rast,
type      = "richness",
draws     = 100)
# species richness estimates
predictions_rich <- predict(object   = comu_model,
mcmc.list = fit.commu,
x         = cos_rast,
type      = "richness",
draws     = 10)
# plot richness
plot(predictions_rich, col = hcl.colors(100), asp = 1)
class(predictions_rich)
# save the results to not run again
writeRaster(predictions_rich, file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_rich.R") # guardamos los resultados para no correr de nuevo
# save the results to not run again
writeRaster(predictions_rich, file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_rich.tif") # guardamos los resultados para no correr de nuevo
# save the results to not run again
predictions_rich <- rast(file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_rich.tif") # guardamos los resultados para no correr de nuevo
# save the results to not run again
predictions_rich <- terra::rast("C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_rich.tif") # guardamos los resultados para no correr de nuevo
predictions_psi
# save the results to not run again
writeRaster(predictions_psi, file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_psi.tif") # guardamos los resultados para no correr de nuevo
class(predictions_psi$mean,)
class(predictions_psi$mean)
# save the results to not run again
writeRaster(predictions_psi$mean, file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_psi.tif") # guardamos los resultados para no correr de nuevo
predictions_psi[[1]]
# save the results to not run again
predictions_psi_mean <- rast("C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_psi.tif") # guardamos los resultados para no correr de nuevo
# Plot occupancy
plot(predictions_psi_mean, zlim = c(0,1),
col = hcl.colors(100),
maxnl = 9,   # plotting only the first 9 species for space reasons
asp = 1)
library(rgee)
install.packages("rgee")
ee_Initialize()
library(rgee)
ee_Initialize()
ee_install_upgrade()
library(reticulate)
ligrary(reticulate)
library(R6)
library(processx)
ee_install(py_env = "rgee")
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = TRUE)
install.packages("googleCloudStorageR")
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = TRUE)
4/1ATx3LY5YJqiSWexAyC8UB1NWAPDSyHpb8BgKb3K8eQVGSxi9yfEngOC4JsI
ee_clean_user_credentials()
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
ee_clean_user_credentials()
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
srtm <- ee$Image("USGS/SRTMGL1_003")
ee.Initialize()
gc()
library(reticulate)
library(R6)
library(processx)
library(rgee)
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
ee_Authenticate()
4/1ATx3LY47NQUlqd-m9rtFLJcxo67GVtd6WtUSESl8OZnmTvjgFMKxCWevQxU
srtm <- ee$Image("USGS/SRTMGL1_003")
reticulate::py_last_error()
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
install.packages(c("gee", "geepack", "ggeffects"))
install.packages(c("renv", "reticulate", "rsconnect"))
library(reticulate)
library(R6)
library(processx)
library(rgee)
ee_install(py_env = "rgee")
library(reticulate)
library(R6)
library(processx)
library(rgee)
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
ee_install_upgrade()
reticulate::use_python()
ee_install_set_pyenv()
library(reticulate)
library(R6)
library(processx)
library(rgee)
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
ee_clean_user_credentials()
ee_Authenticate()
4/1ATx3LY5DypVIrp3XVjpt6JYWiMvHIMTlyc4QUCcqjS_QRe5lKyAVUrkF28o
srtm <- ee$Image("USGS/SRTMGL1_003")
ee.Initialize()
library(rgee)
ee.Initialize()
reticulate::py_last_error()
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
library(gee)
detach("package:gee", unload = TRUE)
detach("package:rgee", unload = TRUE)
remove.packages("rgee")
library(reticulate)
library(R6)
library(processx)
install.packages("rgee")
e_install(py_env = "rgee")
ee_install(py_env = "rgee")
library(rgee)
ee_install(py_env = "rgee")
library(reticulate)
library(R6)
library(processx)
library(rgee)
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
ee_install_upgrade()
reticulate::use_python()
library(reticulate)
library(R6)
library(processx)
library(rgee)
# ee_Initialize(user = 'csaybar@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.
# Initialize Earth Engine and GD
# ee_Initialize(user = 'csaybar@gmail.com', drive = TRUE)
# Initialize Earth Engine and GCS
# ee_Initialize(user = 'csaybar@gmail.com', gcs = TRUE)
# Initialize Earth Engine, GD and GCS
ee_Initialize(user = 'dj.lizcano@gmail.com', drive = TRUE, gcs = FALSE)
ee_clean_user_credentials()
ee_Authenticate()
4/1ATx3LY5dWU-EVprgfA8MMVlll4KtXtIu45TGtI7TX6sQojr7XOKqpEHEYAI
ee_check()
srtm <- ee$Image("USGS/SRTMGL1_003")
viz <- list(
max = 4000,
min = 0,
palette = c("#000000","#5AAD5A","#A9AD84","#FFFFFF")
)
Map$addLayer(
eeObject = srtm,
visParams =  viz,
name = 'SRTM',
legend = TRUE
)
ee_check_python_packages()
reticulate::py_install('earthengine-api==0.1.370', envname='rgee')
ee_check()
