[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Camera Trap Blog",
    "section": "",
    "text": "Species diversity\n\n\n\nR\n\n\ndiversity\n\n\naccumulation\n\n\neffort\n\n\n\nusing packages vegan and iNext\n\n\n\nDiego J. Lizcano\n\n\nJun 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultispecies occupancy model\n\n\n\nR\n\n\noccupancy\n\n\nJAGS\n\n\ncamtrapR\n\n\n\nMultispecies occupancy models combines information from multiple species to estimate both individual and community-level responses to environmental variables\n\n\n\nDiego J. Lizcano\n\n\nJun 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing Cesar Cameratrap Data\n\n\n\nR\n\n\ncalendar\n\n\nmap\n\n\n\na lot of camera trap data from Galictis Biodiversidad\n\n\n\nDiego J. Lizcano\n\n\nJun 15, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html",
    "href": "posts/2024-06-25-species-diversity/index.html",
    "title": "Species diversity",
    "section": "",
    "text": "There are two commonly used ways to account for survey effort when estimating species richness using camera traps:\n\nusing the rarefaction of observed richness.\nusing multispecies occupancy models to account for the species present but not observed (occupancy model).\n\nIn this post we can see an example of No 1. using the classical approach of community ecology using the vegan package. The vegan package (https://cran.r-project.org/package=vegan) provides tools for descriptive community ecology. It has basic functions of diversity analysis, community ordination and dissimilarity analysis. The vegan package provides most standard tools of descriptive community analysis. Later in the post we carry out another diversity analysis using functions of the package iNEXT.\nThe modern approach to measure species diversity include the “Sample Hill diversities” also known as Hill numbers. Rarefaction and extrapolation with Hill numbers have gain popularity in the last decade and can be computed using the function renyi in the R package vegan (Oksanen 2016) and the function rarity in the R package MeanRarity (Roswell and Dushoff 2020), and Hill diversities of equal-sized or equal-coverage samples can be approximately compared using the functions iNEXT and estimateD in the R package iNEXT (Hsieh et al. 2016). Estimates for asymptotic values of Hill diversity are available in SpadeR (Chao and Jost 2015, Chao et al. 2015)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#species-richness-and-sampling-effort",
    "href": "posts/2024-06-25-species-diversity/index.html#species-richness-and-sampling-effort",
    "title": "Species diversity",
    "section": "",
    "text": "There are two commonly used ways to account for survey effort when estimating species richness using camera traps:\n\nusing the rarefaction of observed richness.\nusing multispecies occupancy models to account for the species present but not observed (occupancy model).\n\nIn this post we can see an example of No 1. using the classical approach of community ecology using the vegan package. The vegan package (https://cran.r-project.org/package=vegan) provides tools for descriptive community ecology. It has basic functions of diversity analysis, community ordination and dissimilarity analysis. The vegan package provides most standard tools of descriptive community analysis. Later in the post we carry out another diversity analysis using functions of the package iNEXT.\nThe modern approach to measure species diversity include the “Sample Hill diversities” also known as Hill numbers. Rarefaction and extrapolation with Hill numbers have gain popularity in the last decade and can be computed using the function renyi in the R package vegan (Oksanen 2016) and the function rarity in the R package MeanRarity (Roswell and Dushoff 2020), and Hill diversities of equal-sized or equal-coverage samples can be approximately compared using the functions iNEXT and estimateD in the R package iNEXT (Hsieh et al. 2016). Estimates for asymptotic values of Hill diversity are available in SpadeR (Chao and Jost 2015, Chao et al. 2015)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#load-packages",
    "href": "posts/2024-06-25-species-diversity/index.html#load-packages",
    "title": "Species diversity",
    "section": "Load packages",
    "text": "Load packages\n\nCode\n\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(elevatr) # Access Elevation Data from Various APIs\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(tmap)\nlibrary(eks) # make countours\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses\nlibrary(vegan) # Community Ecology Package \nlibrary(ggvegan)\nlibrary(ggordiplots)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(DT)\nlibrary(MeanRarity)\nlibrary(SpadeR)\nlibrary(iNEXT) # Interpolation and Extrapolation for Species Diversity\nlibrary(knitr) # A General-Purpose Package for Dynamic Report Generation in R\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(ggforce) # Accelerating 'ggplot2'"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#load-data",
    "href": "posts/2024-06-25-species-diversity/index.html#load-data",
    "title": "Species diversity",
    "section": "Load data",
    "text": "Load data\n\nCode\ndatos &lt;- read_excel(\"C:/CodigoR/CameraTrapCesar/data/CT_Cesar.xlsx\")\n\n# habitat types extracted from Copernicus\nhabs &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#pooling-together-several-sites",
    "href": "posts/2024-06-25-species-diversity/index.html#pooling-together-several-sites",
    "title": "Species diversity",
    "section": "Pooling together several sites",
    "text": "Pooling together several sites\nFor this example I selected one year for the sites: Becerril 2021, LaPaz_Manaure 2019, MLJ, CL1, CL2 and PCF. Sometimes we need to make unique codes per camera and cameraOperation table. This was not the case.\nFor this example we are using the habitat type were the camera was installed as a way to see the sampling effort (number of cameras) per habitat type. Th habitat type was extracted overlaying the camera points on top of the Land Cover 100m global dataset from COPERNICUS using Google Earth engine connected to R. How to do this will be in another post.\n\nCode# make a new column Station\n# datos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"CT_LaPaz_Manaure\") |&gt; unite (\"Station\", ProyectoEtapa:Salida:CT, sep = \"-\")\n\n# fix dates\ndatos$Start &lt;- as.Date(datos$Start, \"%d/%m/%Y\")\ndatos$End &lt;- as.Date(datos$End, \"%d/%m/%Y\")\ndatos$eventDate &lt;- as.Date(datos$eventDate, \"%d/%m/%Y\")\ndatos$eventDateTime &lt;- ymd_hms(paste(datos$eventDate, \" \",\n                              datos$eventTime, \":00\", sep=\"\"))\n\n# filter Becerril\ndatos_Becerril &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_Becerril\") |&gt; mutate (Station=IdGeo) |&gt; filter(Year==2021)\n\n# filter LaPaz_Manaure\ndatos_LaPaz_Manaure&lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_LaPaz_Manaure\") |&gt; mutate (Station=IdGeo) |&gt; filter(Year==2019)\n\n# filter MLJ\ndatos_MLJ &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"MLJ_TH_TS_2021\") |&gt; mutate (Station=IdGeo)\n\n# filter CL\ndatos_CL1 &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CL-TH2022\") |&gt; mutate (Station=IdGeo)\n# filter CL\ndatos_CL2 &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CL-TS2022\") |&gt; mutate (Station=IdGeo)\n\n# filter PCF\ndatos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"PCF\") |&gt; mutate (Station=IdGeo)\n\ndata_south &lt;- rbind(datos_LaPaz_Manaure, datos_Becerril, datos_MLJ,datos_CL1, datos_CL2,datos_PCF)\n\n# filter 2021 and make uniques\nCToperation  &lt;- data_south |&gt; \n              # filter(Year==2021) |&gt; \n              group_by(Station) |&gt; \n              mutate(minStart=min(Start), maxEnd=max(End)) |&gt;  distinct(Longitude, Latitude, minStart, maxEnd, Year) |&gt; \n  ungroup()"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#generating-the-cameraoperation-table-and-making-detection-histories-for-all-the-species.",
    "href": "posts/2024-06-25-species-diversity/index.html#generating-the-cameraoperation-table-and-making-detection-histories-for-all-the-species.",
    "title": "Species diversity",
    "section": "Generating the cameraOperation table and making detection histories for all the species.",
    "text": "Generating the cameraOperation table and making detection histories for all the species.\nThe package CamtrapR has the function ‘cameraOperation’ which makes a table of cameras (stations) and dates (setup, puck-up), this table is key to generate the detection histories using the function ‘detectionHistory’ in the next step.\n\nCode# Generamos la matríz de operación de las cámaras\n\ncamop &lt;- cameraOperation(CTtable= CToperation, # Tabla de operación\n                         stationCol= \"Station\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\") #, # Formato de las fechas\n                         #cameraCol=\"CT\")\n                         # sessionCol= \"Year\")\n\n# Generar las historias de detección ---------------------------------------\n## remove plroblem species\n# ind &lt;- which(datos_PCF$Species==\"Marmosa sp.\")\n# datos_PCF &lt;- datos_PCF[-ind,]\n\nDetHist_list &lt;- lapply(unique(data_south$Species), FUN = function(x) {\n  detectionHistory(\n    recordTable         = data_south, # Tabla de registros\n    camOp                = camop, # Matriz de operación de cámaras\n    stationCol           = \"Station\",\n    speciesCol           = \"Species\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 7, # Colapso de las historias a 10 días\n    day1                 = \"station\", # (\"survey\"),or #inicia en la fecha de cada station\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    output               = (\"binary\"), # (\"binary\") or (\"count\")\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# put names to the species \nnames(DetHist_list) &lt;- unique(data_south$Species)\n\n# Finally we make a new list to put all the detection histories.\nylist &lt;- lapply(DetHist_list, FUN = function(x) x$detection_history)"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#use-the-detection-histories-to-make-the-a-matrix-for-vegan-and-the-incidence-for-inext.",
    "href": "posts/2024-06-25-species-diversity/index.html#use-the-detection-histories-to-make-the-a-matrix-for-vegan-and-the-incidence-for-inext.",
    "title": "Species diversity",
    "section": "Use the detection histories to make the a matrix for vegan and the incidence for iNEXT.",
    "text": "Use the detection histories to make the a matrix for vegan and the incidence for iNEXT.\nSpecies accumulation curves made using the package vegan, plot the increase in species richness as we add survey units. If the curve plateaus (flattens), then that suggests you have sampled the majority of the species in your survey site (camera or habitat type).\n\nCode# loop to make vegan matrix\nmat_vegan &lt;- matrix(NA, dim(ylist[[1]])[1], length(unique(data_south$Species)))\nfor(i in 1:length(unique(data_south$Species))){\n  mat_vegan[,i] &lt;- apply(ylist[[i]], 1, sum, na.rm=TRUE)\n  mat_vegan[,i] &lt;- tidyr::replace_na(mat_vegan[,i], 0) # replace na with 0\n}\n\ncolnames(mat_vegan)  &lt;- unique(data_south$Species)\nrownames(mat_vegan) &lt;- rownames(ylist[[1]])\n\nmat_vegan2 &lt;- as.data.frame(mat_vegan)\nmat_vegan2$hab &lt;- habs$hab_code\n# mat_vegan3 &lt;-  mat_vegan2 |&gt; \n  \n# Select specific rows by row numbers\nclosed_forest_rows &lt;- which(mat_vegan2$hab==\"closed_forest_evergreen_broad\")\nherbaceous_rows &lt;- which(mat_vegan2$hab==\"herbaceous_wetland\")\nherbs_rows &lt;- which(mat_vegan2$hab==\"herbs\")\nopen_forest_rows &lt;- which(mat_vegan2$hab==\"open_forest_evergreen_broad\")\nopen_forest2_rows &lt;- which(mat_vegan2$hab==\"open_forest_other\")\n\n\nclosed_forest &lt;- apply(mat_vegan2[closed_forest_rows,1:22], MARGIN = 2, sum)\nherbaceous_wetland &lt;- apply(mat_vegan2[herbaceous_rows,1:22], MARGIN = 2, sum)\nherbs  &lt;- apply(mat_vegan2[herbs_rows,1:22], MARGIN = 2, sum)\nopen_forest_evergreen &lt;- apply(mat_vegan2[open_forest_rows,1:22], MARGIN = 2, sum)\nopen_forest_other &lt;- apply(mat_vegan2[open_forest2_rows,1:22], MARGIN = 2, sum)\n\n# tb_sp &lt;- mat_vegan2 |&gt; group_by(hab)\n# hab_list &lt;- group_split(tb_sp)\n\n# make list of dataframe per habitat\nsp_by_hab &lt;- mat_vegan2 |&gt; dplyr::group_by(hab) %&gt;% split (.$hab)\n# arrange abundance (detection frecuency) mat for INEXT \ncesar_sp &lt;- t(rbind(\nt(colSums(sp_by_hab[[1]][,1:33])),\nt(colSums(sp_by_hab[[2]][,1:33])),\nt(colSums(sp_by_hab[[3]][,1:33])),\nt(colSums(sp_by_hab[[4]][,1:33])),\nt(colSums(sp_by_hab[[5]][,1:33]))\n))\n \ncolnames(cesar_sp) &lt;- names(sp_by_hab)\n\n\n\n# function to Format data to incidence and use iNext\nf_incidences &lt;- function(habitat_rows=closed_forest_rows){ylist %&gt;%  # historias de detection\n  map(~rowSums(.,na.rm = T)) %&gt;% # sumo las detecciones en cada sitio\n  reduce(cbind) %&gt;% # unimos las listas\n  as_data_frame() %&gt;% #formato dataframe\n  filter(row_number() %in% habitat_rows) |&gt; \n  t() %&gt;% # trasponer la tabla\n  as_tibble() %&gt;% #formato tibble\n  mutate_if(is.numeric,~(.&gt;=1)*1) %&gt;%  #como es incidencia, formateo a 1 y 0\n  rowSums() %&gt;%  # ahora si la suma de las incidencias en cada sitio\n  sort(decreasing=T) |&gt; \n  as_tibble() %&gt;% \n  add_row(value= length(habitat_rows), .before = 1) %&gt;%  # requiere que el primer valor sea el número de sitios\n  filter(!if_any()==0) |&gt;  # filter ceros\n  as.matrix() # Requiere formato de matriz\n}\n\n# Make incidence frequency table (is a list whit 5 habitats)\n# Make an empty list to store our data\nincidence_cesar &lt;- list() \nincidence_cesar[[1]] &lt;- f_incidences(closed_forest_rows)\nincidence_cesar[[2]] &lt;- f_incidences(herbaceous_rows)\nincidence_cesar[[3]] &lt;- f_incidences(herbs_rows)\nincidence_cesar[[4]] &lt;- f_incidences(open_forest_rows)\nincidence_cesar[[5]] &lt;- f_incidences(open_forest_other)\n\n# put names\nnames(incidence_cesar) &lt;- names(sp_by_hab)\n\n# we deleted this habitat type for making error\nincidence_cesar &lt;- within(incidence_cesar, rm(\"herbaceous_wetland\"))"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-vegan",
    "href": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-vegan",
    "title": "Species diversity",
    "section": "Rarefaction using vegan\n",
    "text": "Rarefaction using vegan\n\n\nNotice that sites are cameras and the acumulation is species per camera not time\n\nRarefaction is a technique to assess expected species richness. Rarefaction allows the calculation of species richness for a given number of individual samples, based on the construction of rarefaction curves.\nThe issue that occurs when sampling various species in a community is that the larger the number of individuals sampled, the more species that will be found. Rarefaction curves are created by randomly re-sampling the pool of N samples multiple times and then plotting the average number of species found in each sample (1,2, … N). “Thus rarefaction generates the expected number of species in a small collection of n individuals (or n samples) drawn at random from the large pool of N samples.”. Rarefaction curves generally grow rapidly at first, as the most common species are found, but the curves plateau as only the rarest species remain to be sampled.\n\nCode\nrarecurve(mat_vegan, col = \"blue\") \n\n\n\n\n\n\nCoderarecurve(t(cesar_sp), col = \"blue\") \n\n\n\n\n\n\nCode\nsp1 &lt;- specaccum(mat_vegan)\nsp2 &lt;- specaccum(mat_vegan, \"random\")\n# sp2\n# summary(sp2)\nplot(sp1, ci.type=\"poly\", col=\"blue\", lwd=2, ci.lty=0, ci.col=\"lightblue\")\n\n\n\n\n\n\nCode# boxplot(sp2, col=\"yellow\", add=TRUE, pch=\"+\")\n\n\nmods &lt;- fitspecaccum(sp1, \"gleason\")\nplot(mods, col=\"hotpink\")\nboxplot(sp2, col = \"yellow\", border = \"blue\", lty=1, cex=0.3, add= TRUE)\n\n\n\n\n\n\nCode\n\n## Accumulation model\npool &lt;- poolaccum(mat_vegan)\n# summary(pool, display = \"chao\")\nplot(pool)\n\n\n\n\n\n\n\nRanked abundance distribution\nAn alternative approach to species abundance distribution is to plot logarithmic abundances in decreasing order, or against ranks of species.\n\nCodek &lt;- sample(nrow(mat_vegan), 1)\nrad &lt;- radfit(mat_vegan[22,]) # species 22\n# plot(rad)\nradlattice(rad)\n\n\n\n\n\n\n\nHill Diversities using vegan\n\nCode# data(BCI)\ni &lt;- sample(nrow(mat_vegan), 20)\nmod &lt;- renyi(mat_vegan) #selecting sites with more than one record\nplot(mod)\n\n\n\n\n\n\nCodemod &lt;- renyiaccum(mat_vegan[55:89,])\nplot(mod, as.table=TRUE, col = c(1, 2, 2))\n\n\n\n\n\n\nCodepersp(mod)\n\n\n\n\n\n\n\nTotal number of species\n\nCodeDT::datatable(round(specpool(mat_vegan),3))\n\n\n\n\n\nNumber of unseen species per camera\nLook at S.chao1\n\nCodeDT::datatable(\nt(round(as.data.frame(estimateR(mat_vegan[,])),3))\n)\n\n\n\n\nCode\n# save as dataframe\nS_per_site &lt;- as.data.frame(t(round(as.data.frame(estimateR(mat_vegan[,])),3)))\n# add sites\nS_per_site$Station &lt;- rownames(S_per_site)\n\n\nIt is weird to have .5 species in some sites."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#map-it-converting-cameratrap-operation-to-sf",
    "href": "posts/2024-06-25-species-diversity/index.html#map-it-converting-cameratrap-operation-to-sf",
    "title": "Species diversity",
    "section": "Map it converting Cameratrap-operation to sf",
    "text": "Map it converting Cameratrap-operation to sf\nIn this step we convert the Cameratrap-operation table to sf, we add elevation from AWS, habitat type and species per site (S.chao1) to finally visualize the map showing the number of species as the size of the dot.\n\nCode\n# datos_distinct &lt;- datos |&gt; distinct(Longitude, Latitude, CT, Proyecto)\n\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\nCToperation_sf &lt;-  st_as_sf(x = CToperation,\n                         coords = c(\"Longitude\", \n                                    \"Latitude\"),\n                         crs = projlatlon)\n\n# write.csv(habs, \"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")\nhabs &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")\n\nCToperation_elev_sf &lt;- get_elev_point(CToperation_sf, src = \"aws\") # get elevation from AWS\n\nCToperation_elev_sf &lt;- CToperation_elev_sf |&gt; left_join(habs, by='Station') |&gt; left_join(S_per_site, by='Station') |&gt; select(\"Station\", \"elevation\", \"minStart.x\",\"maxEnd.x\", \"Year.x\", \"hab_code\" , \"S.obs\", \"S.chao1\")\n\n# add habitat \n# CToperation_elev_sf$habs &lt;- habs$hab_code\n# see the map\nmapview(CToperation_elev_sf, zcol=\"hab_code\", cex = \"S.chao1\", alpha = 0)"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#perhaps-it-is-easyer-to-plot-the-species-number-as-a-countour-map",
    "href": "posts/2024-06-25-species-diversity/index.html#perhaps-it-is-easyer-to-plot-the-species-number-as-a-countour-map",
    "title": "Species diversity",
    "section": "Perhaps it is easyer to plot the species number as a countour map",
    "text": "Perhaps it is easyer to plot the species number as a countour map\n\nCode# select chao\nspecies &lt;- dplyr::select(CToperation_elev_sf, \"S.chao1\")\n# hakeoides_coord &lt;- data.frame(sf::st_coordinates(hakeoides))\nSta_den &lt;- eks::st_kde(species) # calculate density\n\n# VERY conveniently, eks can generate an sf file of contour lines\ncontours &lt;- eks::st_get_contour(Sta_den, cont=c( 10,20,30,40,50,60,70,80, 90)) %&gt;% \n  mutate(value=as.numeric(levels(contlabel)))\n\n\n# pal_fun &lt;- leaflet::colorQuantile(\"YlOrRd\", NULL, n = 5)\n\np_popup &lt;- paste(\"Species\", as.numeric(levels(contours$estimate)), \"number\")\n\n\ntmap::tmap_mode(\"view\") # set mode to interactive plots\n\ntmap::tm_shape(species) + \n    tmap::tm_sf(col=\"black\", size=0.2) +\n  #   contours from eks\n  tmap::tm_shape(contours) +\n    tmap::tm_polygons(\"estimate\",\n                      palette=\"Reds\",\n                      alpha=0.5 )\n\n\n\n\n\nCode\n\n## geom_sf plot\n# ## suitable smoothing matrix gives optimally smoothed contours\n# gs1 &lt;- ggplot(Sta_den) + geom_sf(data=CToperation_elev_sf, fill=NA) + ggthemes::theme_map() +\n#     colorspace::scale_fill_discrete_sequential(palette=\"Heat2\") \n# gs1 + geom_sf(data=st_get_contour(Sta_den), aes(fill=label_percent(contlabel))) +\n#     coord_sf(xlim=xlim, ylim=ylim) \n\n\n\nIn general terms the species estimate per site seems to be larger near the mine and decrease with the distance to the mine. Also notice kernel density estimates are larger than s.chao1."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#nonmetric-multidimensional-scaling-nmds",
    "href": "posts/2024-06-25-species-diversity/index.html#nonmetric-multidimensional-scaling-nmds",
    "title": "Species diversity",
    "section": "Nonmetric Multidimensional Scaling (NMDS)",
    "text": "Nonmetric Multidimensional Scaling (NMDS)\nOften in ecological research, we are interested not only in comparing univariate descriptors of communities, like diversity, but also in how the constituent species — or the species composition — changes from one community to the next. One common tool to do this is non-metric multidimensional scaling, or NMDS. The goal of NMDS is to collapse information from multiple dimensions (e.g, from multiple communities, sites were the cameratrap was installed, etc.) into just a few, so that they can be visualized and interpreted. Unlike other ordination techniques that rely on (primarily Euclidean) distances, such as Principal Coordinates Analysis, NMDS uses rank orders, and thus is an extremely flexible technique that can accommodate a variety of different kinds of data.\nIf the treatment is continuous, such as an environmental gradient, then it might be useful to plot contour lines rather than convex hulls. We can get some, elevation data for our original community matrix and overlay them onto the NMDS plot using ordisurf.\n\nCode\nexample_NMDS=metaMDS(as.data.frame(mat_vegan), \n                     distance=\"euclidean\",\n                     zerodist = \"ignore\",\n                     trymax=300,\n                     k=5) # T\n#&gt; Wisconsin double standardization\n#&gt; Run 0 stress 0.1177774 \n#&gt; Run 1 stress 0.1197386 \n#&gt; Run 2 stress 0.1201371 \n#&gt; Run 3 stress 0.1189529 \n#&gt; Run 4 stress 0.1184561 \n#&gt; Run 5 stress 0.11954 \n#&gt; Run 6 stress 0.1174227 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.05498355  max resid 0.2841138 \n#&gt; Run 7 stress 0.1198022 \n#&gt; Run 8 stress 0.1212949 \n#&gt; Run 9 stress 0.1218057 \n#&gt; Run 10 stress 0.1189518 \n#&gt; Run 11 stress 0.1210231 \n#&gt; Run 12 stress 0.1211602 \n#&gt; Run 13 stress 0.1178667 \n#&gt; ... Procrustes: rmse 0.07493288  max resid 0.2462511 \n#&gt; Run 14 stress 0.1215182 \n#&gt; Run 15 stress 0.1198519 \n#&gt; Run 16 stress 0.1199189 \n#&gt; Run 17 stress 0.1197978 \n#&gt; Run 18 stress 0.1193746 \n#&gt; Run 19 stress 0.1178966 \n#&gt; ... Procrustes: rmse 0.06782577  max resid 0.3114941 \n#&gt; Run 20 stress 0.1189531 \n#&gt; Run 21 stress 0.1213168 \n#&gt; Run 22 stress 0.1205568 \n#&gt; Run 23 stress 0.11807 \n#&gt; Run 24 stress 0.1187115 \n#&gt; Run 25 stress 0.1189491 \n#&gt; Run 26 stress 0.1183004 \n#&gt; Run 27 stress 0.1193405 \n#&gt; Run 28 stress 0.1207342 \n#&gt; Run 29 stress 0.1195173 \n#&gt; Run 30 stress 0.1193393 \n#&gt; Run 31 stress 0.1187687 \n#&gt; Run 32 stress 0.1185309 \n#&gt; Run 33 stress 0.1182397 \n#&gt; Run 34 stress 0.1201679 \n#&gt; Run 35 stress 0.1182278 \n#&gt; Run 36 stress 0.1191148 \n#&gt; Run 37 stress 0.119813 \n#&gt; Run 38 stress 0.1175301 \n#&gt; ... Procrustes: rmse 0.03535367  max resid 0.1425946 \n#&gt; Run 39 stress 0.118148 \n#&gt; Run 40 stress 0.1184422 \n#&gt; Run 41 stress 0.118213 \n#&gt; Run 42 stress 0.1187672 \n#&gt; Run 43 stress 0.1201325 \n#&gt; Run 44 stress 0.1190044 \n#&gt; Run 45 stress 0.1188325 \n#&gt; Run 46 stress 0.1186658 \n#&gt; Run 47 stress 0.1180496 \n#&gt; Run 48 stress 0.1181317 \n#&gt; Run 49 stress 0.1194671 \n#&gt; Run 50 stress 0.1194552 \n#&gt; Run 51 stress 0.1190607 \n#&gt; Run 52 stress 0.1199794 \n#&gt; Run 53 stress 0.11818 \n#&gt; Run 54 stress 0.1186649 \n#&gt; Run 55 stress 0.1181935 \n#&gt; Run 56 stress 0.1201679 \n#&gt; Run 57 stress 0.1189026 \n#&gt; Run 58 stress 0.1188419 \n#&gt; Run 59 stress 0.1189141 \n#&gt; Run 60 stress 0.1196329 \n#&gt; Run 61 stress 0.1210604 \n#&gt; Run 62 stress 0.1199144 \n#&gt; Run 63 stress 0.120382 \n#&gt; Run 64 stress 0.1200875 \n#&gt; Run 65 stress 0.1197398 \n#&gt; Run 66 stress 0.1201975 \n#&gt; Run 67 stress 0.1179469 \n#&gt; Run 68 stress 0.1189613 \n#&gt; Run 69 stress 0.1192686 \n#&gt; Run 70 stress 0.119061 \n#&gt; Run 71 stress 0.1193631 \n#&gt; Run 72 stress 0.1180633 \n#&gt; Run 73 stress 0.1189963 \n#&gt; Run 74 stress 0.1198776 \n#&gt; Run 75 stress 0.119094 \n#&gt; Run 76 stress 0.1187917 \n#&gt; Run 77 stress 0.1189149 \n#&gt; Run 78 stress 0.1204274 \n#&gt; Run 79 stress 0.1209384 \n#&gt; Run 80 stress 0.1187375 \n#&gt; Run 81 stress 0.1192591 \n#&gt; Run 82 stress 0.1200422 \n#&gt; Run 83 stress 0.1196717 \n#&gt; Run 84 stress 0.1198899 \n#&gt; Run 85 stress 0.1176107 \n#&gt; ... Procrustes: rmse 0.06610715  max resid 0.3027794 \n#&gt; Run 86 stress 0.1197463 \n#&gt; Run 87 stress 0.1195256 \n#&gt; Run 88 stress 0.1187289 \n#&gt; Run 89 stress 0.1174226 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.06812661  max resid 0.268526 \n#&gt; Run 90 stress 0.1188001 \n#&gt; Run 91 stress 0.1195957 \n#&gt; Run 92 stress 0.1192473 \n#&gt; Run 93 stress 0.120447 \n#&gt; Run 94 stress 0.1181926 \n#&gt; Run 95 stress 0.1203262 \n#&gt; Run 96 stress 0.1185989 \n#&gt; Run 97 stress 0.1192968 \n#&gt; Run 98 stress 0.1185925 \n#&gt; Run 99 stress 0.1197654 \n#&gt; Run 100 stress 0.1177246 \n#&gt; ... Procrustes: rmse 0.0661505  max resid 0.2420517 \n#&gt; Run 101 stress 0.1189068 \n#&gt; Run 102 stress 0.1186619 \n#&gt; Run 103 stress 0.1194552 \n#&gt; Run 104 stress 0.1201702 \n#&gt; Run 105 stress 0.1198978 \n#&gt; Run 106 stress 0.1198115 \n#&gt; Run 107 stress 0.1189309 \n#&gt; Run 108 stress 0.1190306 \n#&gt; Run 109 stress 0.1193386 \n#&gt; Run 110 stress 0.1191024 \n#&gt; Run 111 stress 0.1172958 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.06291245  max resid 0.2164538 \n#&gt; Run 112 stress 0.1184745 \n#&gt; Run 113 stress 0.1201794 \n#&gt; Run 114 stress 0.1197538 \n#&gt; Run 115 stress 0.1194704 \n#&gt; Run 116 stress 0.1197008 \n#&gt; Run 117 stress 0.1192775 \n#&gt; Run 118 stress 0.1208421 \n#&gt; Run 119 stress 0.1209101 \n#&gt; Run 120 stress 0.1174901 \n#&gt; ... Procrustes: rmse 0.07177737  max resid 0.2761375 \n#&gt; Run 121 stress 0.1175517 \n#&gt; ... Procrustes: rmse 0.0405766  max resid 0.1765604 \n#&gt; Run 122 stress 0.119748 \n#&gt; Run 123 stress 0.1182503 \n#&gt; Run 124 stress 0.1212752 \n#&gt; Run 125 stress 0.118013 \n#&gt; Run 126 stress 0.1182305 \n#&gt; Run 127 stress 0.1184381 \n#&gt; Run 128 stress 0.1180299 \n#&gt; Run 129 stress 0.1210704 \n#&gt; Run 130 stress 0.1188558 \n#&gt; Run 131 stress 0.1188641 \n#&gt; Run 132 stress 0.1194433 \n#&gt; Run 133 stress 0.1188604 \n#&gt; Run 134 stress 0.1193936 \n#&gt; Run 135 stress 0.1212149 \n#&gt; Run 136 stress 0.1183265 \n#&gt; Run 137 stress 0.1192663 \n#&gt; Run 138 stress 0.1200568 \n#&gt; Run 139 stress 0.1174801 \n#&gt; ... Procrustes: rmse 0.06881235  max resid 0.2919178 \n#&gt; Run 140 stress 0.1197691 \n#&gt; Run 141 stress 0.1180853 \n#&gt; Run 142 stress 0.1197126 \n#&gt; Run 143 stress 0.1180119 \n#&gt; Run 144 stress 0.1191582 \n#&gt; Run 145 stress 0.120222 \n#&gt; Run 146 stress 0.1180595 \n#&gt; Run 147 stress 0.1182669 \n#&gt; Run 148 stress 0.1172302 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.06085407  max resid 0.2560122 \n#&gt; Run 149 stress 0.1193633 \n#&gt; Run 150 stress 0.1183486 \n#&gt; Run 151 stress 0.1184712 \n#&gt; Run 152 stress 0.1183518 \n#&gt; Run 153 stress 0.1180439 \n#&gt; Run 154 stress 0.1192119 \n#&gt; Run 155 stress 0.1189377 \n#&gt; Run 156 stress 0.1201223 \n#&gt; Run 157 stress 0.1186288 \n#&gt; Run 158 stress 0.1183497 \n#&gt; Run 159 stress 0.1190864 \n#&gt; Run 160 stress 0.1195677 \n#&gt; Run 161 stress 0.1191408 \n#&gt; Run 162 stress 0.1207213 \n#&gt; Run 163 stress 0.1197014 \n#&gt; Run 164 stress 0.1179631 \n#&gt; Run 165 stress 0.1181274 \n#&gt; Run 166 stress 0.1184503 \n#&gt; Run 167 stress 0.1187593 \n#&gt; Run 168 stress 0.119238 \n#&gt; Run 169 stress 0.1174071 \n#&gt; ... Procrustes: rmse 0.05775196  max resid 0.2050396 \n#&gt; Run 170 stress 0.1190046 \n#&gt; Run 171 stress 0.1192805 \n#&gt; Run 172 stress 0.1191557 \n#&gt; Run 173 stress 0.1201042 \n#&gt; Run 174 stress 0.1190348 \n#&gt; Run 175 stress 0.1188612 \n#&gt; Run 176 stress 0.117776 \n#&gt; Run 177 stress 0.1194923 \n#&gt; Run 178 stress 0.1198303 \n#&gt; Run 179 stress 0.1194573 \n#&gt; Run 180 stress 0.1186165 \n#&gt; Run 181 stress 0.1186413 \n#&gt; Run 182 stress 0.1205724 \n#&gt; Run 183 stress 0.1189432 \n#&gt; Run 184 stress 0.1179701 \n#&gt; Run 185 stress 0.1213939 \n#&gt; Run 186 stress 0.1176211 \n#&gt; ... Procrustes: rmse 0.07384845  max resid 0.2796809 \n#&gt; Run 187 stress 0.1198027 \n#&gt; Run 188 stress 0.1190096 \n#&gt; Run 189 stress 0.1174539 \n#&gt; ... Procrustes: rmse 0.0400209  max resid 0.1528492 \n#&gt; Run 190 stress 0.118068 \n#&gt; Run 191 stress 0.120479 \n#&gt; Run 192 stress 0.1189741 \n#&gt; Run 193 stress 0.1199823 \n#&gt; Run 194 stress 0.1186884 \n#&gt; Run 195 stress 0.1186015 \n#&gt; Run 196 stress 0.1191831 \n#&gt; Run 197 stress 0.1201327 \n#&gt; Run 198 stress 0.1191175 \n#&gt; Run 199 stress 0.1200504 \n#&gt; Run 200 stress 0.1187331 \n#&gt; Run 201 stress 0.1188857 \n#&gt; Run 202 stress 0.1196107 \n#&gt; Run 203 stress 0.1188167 \n#&gt; Run 204 stress 0.1199377 \n#&gt; Run 205 stress 0.1234105 \n#&gt; Run 206 stress 0.120904 \n#&gt; Run 207 stress 0.1208324 \n#&gt; Run 208 stress 0.1203389 \n#&gt; Run 209 stress 0.1192618 \n#&gt; Run 210 stress 0.1181966 \n#&gt; Run 211 stress 0.1180564 \n#&gt; Run 212 stress 0.1194087 \n#&gt; Run 213 stress 0.119275 \n#&gt; Run 214 stress 0.118758 \n#&gt; Run 215 stress 0.1184296 \n#&gt; Run 216 stress 0.1201067 \n#&gt; Run 217 stress 0.1198247 \n#&gt; Run 218 stress 0.1191611 \n#&gt; Run 219 stress 0.1187829 \n#&gt; Run 220 stress 0.1178717 \n#&gt; Run 221 stress 0.1199327 \n#&gt; Run 222 stress 0.1183957 \n#&gt; Run 223 stress 0.1226319 \n#&gt; Run 224 stress 0.1181131 \n#&gt; Run 225 stress 0.1190361 \n#&gt; Run 226 stress 0.1191921 \n#&gt; Run 227 stress 0.119915 \n#&gt; Run 228 stress 0.1204151 \n#&gt; Run 229 stress 0.1207973 \n#&gt; Run 230 stress 0.1190128 \n#&gt; Run 231 stress 0.1184683 \n#&gt; Run 232 stress 0.1189524 \n#&gt; Run 233 stress 0.1190766 \n#&gt; Run 234 stress 0.119662 \n#&gt; Run 235 stress 0.1185709 \n#&gt; Run 236 stress 0.1183505 \n#&gt; Run 237 stress 0.118557 \n#&gt; Run 238 stress 0.1186576 \n#&gt; Run 239 stress 0.1179217 \n#&gt; Run 240 stress 0.1190147 \n#&gt; Run 241 stress 0.1205374 \n#&gt; Run 242 stress 0.119398 \n#&gt; Run 243 stress 0.1213987 \n#&gt; Run 244 stress 0.1188779 \n#&gt; Run 245 stress 0.1183999 \n#&gt; Run 246 stress 0.119086 \n#&gt; Run 247 stress 0.1181763 \n#&gt; Run 248 stress 0.1209234 \n#&gt; Run 249 stress 0.1190232 \n#&gt; Run 250 stress 0.1224105 \n#&gt; Run 251 stress 0.1188123 \n#&gt; Run 252 stress 0.119722 \n#&gt; Run 253 stress 0.118356 \n#&gt; Run 254 stress 0.1183993 \n#&gt; Run 255 stress 0.1181393 \n#&gt; Run 256 stress 0.1182666 \n#&gt; Run 257 stress 0.119556 \n#&gt; Run 258 stress 0.1188865 \n#&gt; Run 259 stress 0.1188812 \n#&gt; Run 260 stress 0.1183203 \n#&gt; Run 261 stress 0.1196457 \n#&gt; Run 262 stress 0.1193767 \n#&gt; Run 263 stress 0.1209558 \n#&gt; Run 264 stress 0.1208067 \n#&gt; Run 265 stress 0.1186754 \n#&gt; Run 266 stress 0.1194045 \n#&gt; Run 267 stress 0.1194378 \n#&gt; Run 268 stress 0.1189216 \n#&gt; Run 269 stress 0.1176852 \n#&gt; ... Procrustes: rmse 0.05734404  max resid 0.1931464 \n#&gt; Run 270 stress 0.1179333 \n#&gt; Run 271 stress 0.1190485 \n#&gt; Run 272 stress 0.1185425 \n#&gt; Run 273 stress 0.1192201 \n#&gt; Run 274 stress 0.1176437 \n#&gt; ... Procrustes: rmse 0.06716123  max resid 0.2906083 \n#&gt; Run 275 stress 0.1185372 \n#&gt; Run 276 stress 0.1179851 \n#&gt; Run 277 stress 0.1200229 \n#&gt; Run 278 stress 0.1185486 \n#&gt; Run 279 stress 0.1194098 \n#&gt; Run 280 stress 0.119232 \n#&gt; Run 281 stress 0.1190579 \n#&gt; Run 282 stress 0.1222362 \n#&gt; Run 283 stress 0.1189714 \n#&gt; Run 284 stress 0.1190454 \n#&gt; Run 285 stress 0.1190591 \n#&gt; Run 286 stress 0.1189067 \n#&gt; Run 287 stress 0.1189396 \n#&gt; Run 288 stress 0.1193066 \n#&gt; Run 289 stress 0.1193199 \n#&gt; Run 290 stress 0.1194355 \n#&gt; Run 291 stress 0.120681 \n#&gt; Run 292 stress 0.119385 \n#&gt; Run 293 stress 0.1179342 \n#&gt; Run 294 stress 0.118556 \n#&gt; Run 295 stress 0.119713 \n#&gt; Run 296 stress 0.1191244 \n#&gt; Run 297 stress 0.1199402 \n#&gt; Run 298 stress 0.1177317 \n#&gt; Run 299 stress 0.1194924 \n#&gt; Run 300 stress 0.1191366 \n#&gt; *** Best solution was not repeated -- monoMDS stopping criteria:\n#&gt;    300: no. of iterations &gt;= maxit\n\n# plot the graph\nvegan::ordisurf((example_NMDS),CToperation_elev_sf$elevation,main=\"\",col=\"forestgreen\", trymax=100) # bubble = 2\n#&gt; \n#&gt; Family: gaussian \n#&gt; Link function: identity \n#&gt; \n#&gt; Formula:\n#&gt; y ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n#&gt; \n#&gt; Estimated degrees of freedom:\n#&gt; 5.64  total = 6.64 \n#&gt; \n#&gt; REML score: 722.5469\nvegan::orditorp(example_NMDS,display=\"species\",col=\"blue\",air=0.1,\n   cex=0.5)\n\n\n\n\n\n\n\nWe can make a similar plot using gg_ordisurf from the package ggordiplots but also incorporating habitat type.\n\nCode# ggordiplots::gg_ordisurf()\n# To fit a surface with ggordiplots:\n\n \ngg_ordisurf(ord = example_NMDS,\nenv.var = CToperation_elev_sf$elevation,\nvar.label = \"Elevation\",\npt.size = 2,\ngroups = CToperation_elev_sf$hab_code,\nbinwidth = 50)\n\n\n\n\n\n\n\nThe contours connect species in the ordination space that are predicted to have the same elevation."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-inext",
    "href": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-inext",
    "title": "Species diversity",
    "section": "Rarefaction using iNEXT\n",
    "text": "Rarefaction using iNEXT\n\n\nCode\n\n\nout &lt;- iNEXT(incidence_cesar, # The data frame\n             q=0,# The type of diversity estimator \n             datatype=\"incidence_freq\",   # The type of analysis\n             knots=40,                    # The number of data points \n             se=TRUE,                     # confidence intervals\n             conf=0.95,                   # The level of confidence intervals\n             nboot=100)                    # The number of bootstraps \n\nggiNEXT(out, type=1)\n\n\n\n\n\n\nCodeggiNEXT(out, type=2)\n\n\n\n\n\n\nCodeggiNEXT(out, type=3)\n\n\n\n\n\n\nCode\np1 &lt;- ggiNEXT(out, type=1)+ theme_classic() +   #  type 1 = the diversity estimator\n        labs(x = \"Survey sites\", y = \"Richness\")\n  \np2 &lt;- ggiNEXT(out, type=2)+ theme_classic() +    #  type 2 = the survey coverage\n        labs(x = \"Survey sites\")\n    \ngrid.arrange(p1, p2, nrow = 2)\n\n\n\n\n\n\nCode##############\nout2 &lt;- iNEXT(incidence_cesar, q=c(0,1,2) ,datatype=\"incidence_freq\" )\n\nggiNEXT(out2, type=1, facet.var=\"Order.q\", color.var=\"Assemblage\") + theme_classic() \n\n\n\n\n\n\n\nthe iNEXT package is well suited for comparisons of diversity indices through the use of hill numbers - of which the ‘q’ value represents the traditional Shannon (q=1) and Simpson (q=2) diversity indices (species richness: q = 0). Note Increasing values of q reduces the influence of rare species on your estimate of community diversity."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#package-citation",
    "href": "posts/2024-06-25-species-diversity/index.html#package-citation",
    "title": "Species diversity",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.3.2 (R Core Team 2023) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.32 (Xie, Cheng, and Tan 2024), eks v. 1.0.5 (Duong 2024), elevatr v. 0.99.0 (Hollister et al. 2023), ggforce v. 0.4.2 (Pedersen 2024a), ggordiplots v. 0.4.3 (Quensen, Simpson, and Oksanen 2024), ggvegan v. 0.1.999 (Simpson and Oksanen 2023), gridExtra v. 2.3 (Auguie 2017), iNEXT v. 3.0.1 (Chao et al. 2014; Hsieh, Ma, and Chao 2024), kableExtra v. 1.4.0 (Zhu 2024), knitr v. 1.46 (Xie 2014, 2015, 2024), mapview v. 2.11.2 (Appelhans et al. 2023), MeanRarity v. 0.0.1.5 (Roswell and Dushoff 2023), patchwork v. 1.2.0 (Pedersen 2024b), rmarkdown v. 2.27 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), sf v. 1.0.15 (Pebesma 2018; Pebesma and Bivand 2023), SpadeR v. 0.1.1 (Chao et al. 2016), tidyverse v. 2.0.0 (Wickham et al. 2019), tmap v. 3.99.9000 (Tennekes 2018), vegan v. 2.6.4 (Oksanen et al. 2022)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#sesion-info",
    "href": "posts/2024-06-25-species-diversity/index.html#sesion-info",
    "title": "Species diversity",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.3.2 (2023-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19042)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-07-04\n#&gt;  pandoc   3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version     date (UTC) lib source\n#&gt;    abind               1.4-5       2016-07-21 [1] CRAN (R 4.3.1)\n#&gt;    base64enc           0.1-3       2015-07-28 [1] CRAN (R 4.3.1)\n#&gt;    brew                1.0-10      2023-12-16 [1] CRAN (R 4.3.2)\n#&gt;    bslib               0.6.1       2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;    cachem              1.0.8       2023-05-01 [1] CRAN (R 4.3.2)\n#&gt;    camtrapR          * 2.3.0       2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;    cellranger          1.1.0       2016-07-27 [1] CRAN (R 4.3.2)\n#&gt;    class               7.3-22      2023-05-03 [2] CRAN (R 4.3.2)\n#&gt;    classInt            0.4-10      2023-09-05 [1] CRAN (R 4.3.2)\n#&gt;    cli                 3.6.2       2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    cluster             2.1.4       2022-08-22 [2] CRAN (R 4.3.2)\n#&gt;    codetools           0.2-19      2023-02-01 [2] CRAN (R 4.3.2)\n#&gt;    colorspace          2.1-0       2023-01-23 [1] CRAN (R 4.3.2)\n#&gt;    cols4all            0.7         2024-02-20 [1] Github (mtennekes/cols4all@91856c0)\n#&gt;    crayon              1.5.2       2022-09-29 [1] CRAN (R 4.3.2)\n#&gt;    crosstalk           1.2.1       2023-11-23 [1] CRAN (R 4.3.2)\n#&gt;    curl                5.2.0       2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    data.table          1.15.0      2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    DBI                 1.2.2       2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;    devtools            2.4.5       2022-10-11 [1] CRAN (R 4.3.2)\n#&gt;    dichromat           2.0-0.1     2022-05-02 [1] CRAN (R 4.3.1)\n#&gt;    digest              0.6.34      2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;    dplyr             * 1.1.4       2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    DT                * 0.32        2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;    e1071               1.7-14      2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    eks               * 1.0.5       2024-05-01 [1] CRAN (R 4.3.3)\n#&gt;    elevatr           * 0.99.0      2023-09-12 [1] CRAN (R 4.3.2)\n#&gt;    ellipsis            0.3.2       2021-04-29 [1] CRAN (R 4.3.2)\n#&gt;    evaluate            0.23        2023-11-01 [1] CRAN (R 4.3.2)\n#&gt;    fansi               1.0.6       2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    farver              2.1.1       2022-07-06 [1] CRAN (R 4.3.2)\n#&gt;    fastmap             1.1.1       2023-02-24 [1] CRAN (R 4.3.2)\n#&gt;    forcats           * 1.0.0       2023-01-29 [1] CRAN (R 4.3.2)\n#&gt;    fs                  1.6.3       2023-07-20 [1] CRAN (R 4.3.2)\n#&gt;    generics            0.1.3       2022-07-05 [1] CRAN (R 4.3.2)\n#&gt;    ggforce           * 0.4.2       2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;    ggordiplots       * 0.4.3       2024-01-14 [1] CRAN (R 4.3.3)\n#&gt;    ggplot2           * 3.5.1       2024-04-23 [1] CRAN (R 4.3.3)\n#&gt;    ggrepel             0.9.5       2024-01-10 [1] CRAN (R 4.3.3)\n#&gt;    ggvegan           * 0.1.999     2024-06-28 [1] Github (gavinsimpson/ggvegan@058c08c)\n#&gt;    glue              * 1.7.0       2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    grateful          * 0.2.4       2023-10-22 [1] CRAN (R 4.3.3)\n#&gt;    gridExtra         * 2.3         2017-09-09 [1] CRAN (R 4.3.2)\n#&gt;    gtable              0.3.4       2023-08-21 [1] CRAN (R 4.3.2)\n#&gt;    hms                 1.1.3       2023-03-21 [1] CRAN (R 4.3.2)\n#&gt;    htmltools           0.5.7       2023-11-03 [1] CRAN (R 4.3.2)\n#&gt;    htmlwidgets         1.6.4       2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    httpuv              1.6.14      2024-01-26 [1] CRAN (R 4.3.2)\n#&gt;    httr                1.4.7       2023-08-15 [1] CRAN (R 4.3.2)\n#&gt;    iNEXT             * 3.0.1       2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;    isoband             0.2.7       2022-12-20 [1] CRAN (R 4.3.2)\n#&gt;    jquerylib           0.1.4       2021-04-26 [1] CRAN (R 4.3.2)\n#&gt;    jsonlite            1.8.8       2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    kableExtra        * 1.4.0       2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;    KernSmooth          2.23-22     2023-07-10 [2] CRAN (R 4.3.2)\n#&gt;    knitr             * 1.46        2024-04-06 [1] CRAN (R 4.3.3)\n#&gt;    ks                  1.14.2      2024-01-15 [1] CRAN (R 4.3.3)\n#&gt;    labeling            0.4.3       2023-08-29 [1] CRAN (R 4.3.1)\n#&gt;    later               1.3.2       2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    lattice           * 0.22-5      2023-10-24 [1] CRAN (R 4.3.2)\n#&gt;    leafem              0.2.3       2023-09-17 [1] CRAN (R 4.3.2)\n#&gt;    leaflegend          1.2.0       2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    leaflet             2.2.1       2023-11-13 [1] CRAN (R 4.3.2)\n#&gt;    leaflet.providers   2.0.0       2023-10-17 [1] CRAN (R 4.3.2)\n#&gt;    leafpop             0.1.0       2021-05-22 [1] CRAN (R 4.3.2)\n#&gt;    leafsync            0.1.0       2019-03-05 [1] CRAN (R 4.3.2)\n#&gt;    lifecycle           1.0.4       2023-11-07 [1] CRAN (R 4.3.2)\n#&gt;    lubridate         * 1.9.3       2023-09-27 [1] CRAN (R 4.3.2)\n#&gt;    lwgeom              0.2-13      2023-05-22 [1] CRAN (R 4.3.2)\n#&gt;    magrittr            2.0.3       2022-03-30 [1] CRAN (R 4.3.2)\n#&gt;    maplegend           0.1.0       2023-10-18 [1] CRAN (R 4.3.3)\n#&gt;    mapsf               0.10.1      2024-05-06 [1] CRAN (R 4.3.3)\n#&gt;    mapview           * 2.11.2      2023-10-13 [1] CRAN (R 4.3.2)\n#&gt;    MASS                7.3-60      2023-05-04 [2] CRAN (R 4.3.2)\n#&gt;    Matrix              1.6-1.1     2023-09-18 [2] CRAN (R 4.3.2)\n#&gt;    mclust              6.1         2024-02-23 [1] CRAN (R 4.3.3)\n#&gt;    MeanRarity        * 0.0.1.0005  2024-07-03 [1] Github (mikeroswell/MeanRarity@a8b518d)\n#&gt;    memoise             2.0.1       2021-11-26 [1] CRAN (R 4.3.2)\n#&gt;    mgcv                1.9-1       2023-12-21 [1] CRAN (R 4.3.3)\n#&gt;    mime                0.12        2021-09-28 [1] CRAN (R 4.3.1)\n#&gt;    miniUI              0.1.1.1     2018-05-18 [1] CRAN (R 4.3.2)\n#&gt;    munsell             0.5.0       2018-06-12 [1] CRAN (R 4.3.2)\n#&gt;    mvtnorm             1.2-4       2023-11-27 [1] CRAN (R 4.3.3)\n#&gt;    nlme                3.1-163     2023-08-09 [2] CRAN (R 4.3.2)\n#&gt;    patchwork         * 1.2.0       2024-01-08 [1] CRAN (R 4.3.3)\n#&gt;    permute           * 0.9-7       2022-01-27 [1] CRAN (R 4.3.3)\n#&gt;    pillar              1.9.0       2023-03-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgbuild            1.4.4       2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    pkgconfig           2.0.3       2019-09-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgload             1.3.4       2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    plyr                1.8.9       2023-10-02 [1] CRAN (R 4.3.2)\n#&gt;    png                 0.1-8       2022-11-29 [1] CRAN (R 4.3.1)\n#&gt;    polyclip            1.10-6      2023-09-27 [1] CRAN (R 4.3.1)\n#&gt;    pracma              2.4.4       2023-11-10 [1] CRAN (R 4.3.3)\n#&gt;    prettyunits         1.2.0       2023-09-24 [1] CRAN (R 4.3.2)\n#&gt;    profvis             0.3.8       2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    progress            1.2.3       2023-12-06 [1] CRAN (R 4.3.3)\n#&gt;    progressr           0.14.0      2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    promises            1.2.1       2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    proxy               0.4-27      2022-06-09 [1] CRAN (R 4.3.2)\n#&gt;    purrr             * 1.0.2       2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    R6                  2.5.1       2021-08-19 [1] CRAN (R 4.3.2)\n#&gt;    raster              3.6-26      2023-10-14 [1] CRAN (R 4.3.2)\n#&gt;    rbibutils           2.2.16      2023-10-25 [1] CRAN (R 4.3.3)\n#&gt;    RColorBrewer        1.1-3       2022-04-03 [1] CRAN (R 4.3.1)\n#&gt;    Rcpp                1.0.12      2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    RcppNumerical       0.6-0       2023-09-06 [1] CRAN (R 4.3.3)\n#&gt;  D RcppParallel        5.1.7       2023-02-27 [1] CRAN (R 4.3.2)\n#&gt;    Rdpack              2.6         2023-11-08 [1] CRAN (R 4.3.3)\n#&gt;    readr             * 2.1.5       2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    readxl            * 1.4.3       2023-07-06 [1] CRAN (R 4.3.2)\n#&gt;    remotes             2.5.0       2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    renv                1.0.7       2024-04-11 [1] CRAN (R 4.3.3)\n#&gt;    reshape2            1.4.4       2020-04-09 [1] CRAN (R 4.3.3)\n#&gt;    rlang               1.1.3       2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    rmarkdown           2.27        2024-05-17 [1] CRAN (R 4.3.3)\n#&gt;    rstudioapi          0.16.0      2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;    s2                  1.1.6       2023-12-19 [1] CRAN (R 4.3.2)\n#&gt;    sass                0.4.8       2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    satellite           1.0.5       2024-02-10 [1] CRAN (R 4.3.2)\n#&gt;    scales              1.3.0       2023-11-28 [1] CRAN (R 4.3.3)\n#&gt;    secr                4.6.6       2024-02-29 [1] CRAN (R 4.3.3)\n#&gt;    sessioninfo         1.2.2       2021-12-06 [1] CRAN (R 4.3.2)\n#&gt;    sf                * 1.0-15      2023-12-18 [1] CRAN (R 4.3.2)\n#&gt;    shiny               1.8.0       2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    slippymath          0.3.1       2019-06-28 [1] CRAN (R 4.3.2)\n#&gt;    sp                  2.1-3       2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    SpadeR            * 0.1.1       2016-09-06 [1] CRAN (R 4.3.1)\n#&gt;    stars               0.6-4       2023-09-11 [1] CRAN (R 4.3.2)\n#&gt;    stringi             1.8.3       2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    stringr           * 1.5.1       2023-11-14 [1] CRAN (R 4.3.2)\n#&gt;    svglite             2.1.3       2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    systemfonts         1.0.5       2023-10-09 [1] CRAN (R 4.3.2)\n#&gt;    terra               1.7-71      2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    tibble            * 3.2.1       2023-03-20 [1] CRAN (R 4.3.2)\n#&gt;    tidyr             * 1.3.1       2024-01-24 [1] CRAN (R 4.3.2)\n#&gt;    tidyselect          1.2.1       2024-03-11 [1] CRAN (R 4.3.3)\n#&gt;    tidyverse         * 2.0.0       2023-02-22 [1] CRAN (R 4.3.2)\n#&gt;    timechange          0.3.0       2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;    tmap              * 3.99.9000   2024-02-22 [1] Github (r-tmap/tmap@afbf4e8)\n#&gt;    tmaptools           3.1-1       2024-02-20 [1] Github (r-tmap/tmaptools@0c8b0b1)\n#&gt;    tweenr              2.0.3       2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;    tzdb                0.4.0       2023-05-12 [1] CRAN (R 4.3.2)\n#&gt;    units               0.8-5       2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;    urlchecker          1.0.1       2021-11-30 [1] CRAN (R 4.3.2)\n#&gt;    usethis             2.2.3       2024-02-19 [1] CRAN (R 4.3.2)\n#&gt;    utf8                1.2.4       2023-10-22 [1] CRAN (R 4.3.2)\n#&gt;    uuid                1.2-0       2024-01-14 [1] CRAN (R 4.3.2)\n#&gt;    vctrs               0.6.5       2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;    vegan             * 2.6-4       2022-10-11 [1] CRAN (R 4.3.3)\n#&gt;    viridisLite         0.4.2       2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    widgetframe         0.3.1       2017-12-20 [1] CRAN (R 4.3.2)\n#&gt;    withr               3.0.0       2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    wk                  0.9.1       2023-11-29 [1] CRAN (R 4.3.2)\n#&gt;    xfun                0.44        2024-05-15 [1] CRAN (R 4.3.3)\n#&gt;    XML                 3.99-0.16.1 2024-01-22 [1] CRAN (R 4.3.2)\n#&gt;    xml2                1.3.6       2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    xtable              1.8-4       2019-04-21 [1] CRAN (R 4.3.2)\n#&gt;    yaml                2.3.8       2023-12-11 [1] CRAN (R 4.3.2)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.3\n#&gt;  [2] C:/Program Files/R/R-4.3.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  }
]