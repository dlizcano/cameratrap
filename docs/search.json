[
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html",
    "href": "posts/2024-07-17-stackmodel/index.html",
    "title": "“Stacked” Models",
    "section": "",
    "text": "One of the advantages of ubms is that it is possible to include random effects in your models, using the same syntax as lme4 (Bates et al. 2015). For example, if you have a group site covariate, you can fit a model with random intercepts by group by including + (1|group) in your parameter formula. Random slopes, or a combination of random slopes and intercepts, are also possible.\nTo illustrate the use of random effects of ubms, in this post fits we fit a model using a “stacked” model approach. Aditionally in ubms you can instead include, for example, random site intercepts to account for possible pseudoreplication.\n\nAn alternative approach is to fit multiple years of data into a single-season model is using the “stacked” approach. Essentially, you treat unique site-year combinations as sites.\nThere are several potential reasons for this:\n\n\nYou don’t have enough data (Dail-Madsen type models are particularly data hungry).\n\n\nYou aren’t interested in the transition probabilities.\n\n\nYou have very few years (or seasons) and the occupancy did not changed."
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html#using-random-effects-with-ubms",
    "href": "posts/2024-07-17-stackmodel/index.html#using-random-effects-with-ubms",
    "title": "“Stacked” Models",
    "section": "",
    "text": "One of the advantages of ubms is that it is possible to include random effects in your models, using the same syntax as lme4 (Bates et al. 2015). For example, if you have a group site covariate, you can fit a model with random intercepts by group by including + (1|group) in your parameter formula. Random slopes, or a combination of random slopes and intercepts, are also possible.\nTo illustrate the use of random effects of ubms, in this post fits we fit a model using a “stacked” model approach. Aditionally in ubms you can instead include, for example, random site intercepts to account for possible pseudoreplication.\n\nAn alternative approach is to fit multiple years of data into a single-season model is using the “stacked” approach. Essentially, you treat unique site-year combinations as sites.\nThere are several potential reasons for this:\n\n\nYou don’t have enough data (Dail-Madsen type models are particularly data hungry).\n\n\nYou aren’t interested in the transition probabilities.\n\n\nYou have very few years (or seasons) and the occupancy did not changed."
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html#load-packages",
    "href": "posts/2024-07-17-stackmodel/index.html#load-packages",
    "title": "“Stacked” Models",
    "section": "Load packages",
    "text": "Load packages\nFirst we load some packages\n\nCode\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(terra) # Spatial Data Analysis\nlibrary(elevatr) # Access Elevation Data from Various APIs\nlibrary(readr)\n\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses \nlibrary(ubms) \nlibrary(lme4) \n\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html#load-data",
    "href": "posts/2024-07-17-stackmodel/index.html#load-data",
    "title": "“Stacked” Models",
    "section": "Load data",
    "text": "Load data\nThe data set is downloaded from Wildlife insights\n\n\nimage\n\n\nCode\npath &lt;- \"C:/CodigoR/CameraTrapCesar/data/katios/\"\ncameras &lt;- read_csv(paste(path, \"cameras.csv\", sep=\"\"))\ndeployment &lt;- read_csv(paste(path, \"deployments.csv\", sep=\"\"))\nimages &lt;- read_csv(paste(path, \"images.csv\", sep=\"\"))\nproject &lt;- read_csv(paste(path, \"projects.csv\", sep=\"\"))\n\n# join_by(project_id, camera_id, camera_name)`\ncam_deploy &lt;- cameras |&gt; left_join(deployment) |&gt; \n  dplyr::mutate(year=lubridate::year(start_date)) #|&gt; filter(year== 2023)\ncam_deploy_image &lt;- images  |&gt; \n  left_join(cam_deploy) |&gt; \n  mutate(scientificName= paste(genus, species, sep = \" \")) |&gt; \n   mutate(deployment_id_cam=paste(deployment_id, camera_id, sep = \"-\")) #|&gt; \n  # filter(year==2022)"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html#select-years-and-convert-to-stacked-format",
    "href": "posts/2024-07-17-stackmodel/index.html#select-years-and-convert-to-stacked-format",
    "title": "“Stacked” Models",
    "section": "Select years and convert to stacked format",
    "text": "Select years and convert to stacked format\nTo do this we use the camtrapR package.\n\nCode\n# filter firs year and make uniques\n\nCToperation  &lt;- cam_deploy_image |&gt; #multi-season data\n  # filter(samp_year==2022) |&gt; \n  group_by(deployment_id) |&gt; \n  mutate(minStart=min(start_date), maxEnd=max(end_date)) |&gt; \n  distinct(longitude, latitude, minStart, maxEnd, samp_year) |&gt; \n  ungroup()\n\n\n# camera operation matrix\n# multi-season data\ncamop &lt;- cameraOperation(CTtable= CToperation, # Tabla de operación\n                         stationCol= \"deployment_id\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         sessionCol = \"samp_year\", # multi-season column\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\") #, # Formato de las fechas\n                         #cameraCol=\"CT\")\n                         # sessionCol= \"Year\")\n\n# Generar las historias de detección ---------------------------------------\n## remove plroblem species\n# ind &lt;- which(datos_PCF$Species==\"Marmosa sp.\")\n# datos_PCF &lt;- datos_PCF[-ind,]\n\n# filter y1\ndatay &lt;- cam_deploy_image # |&gt; \n  # filter(samp_year==2022) \n\nDetHist_list &lt;- lapply(unique(datay$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = datay, # Tabla de registros\n    camOp                = camop, # Matriz de operación de cámaras\n    stationCol           = \"deployment_id\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"timestamp\",\n    recordDateTimeFormat  = \"%Y-%m-%d\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 15, # Colapso de las historias a días\n    day1                 = \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    unmarkedMultFrameInput=TRUE,\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(DetHist_list) &lt;- unique(datay$scientificName)\n\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\nylist &lt;- lapply(DetHist_list, FUN = function(x) x$detection_history)\neffortlist &lt;- lapply(DetHist_list, FUN = function(x) x$effort)\n\n### Danta, Jaguar\nwhich(unique(datay$scientificName)==\"Tapirus bairdii\")\n#&gt; [1] 62\nwhich(unique(datay$scientificName)==\"Panthera onca\")\n#&gt; [1] 4"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html#convert-to-sf-and-map",
    "href": "posts/2024-07-17-stackmodel/index.html#convert-to-sf-and-map",
    "title": "“Stacked” Models",
    "section": "Convert to sf and map",
    "text": "Convert to sf and map\n\nCode\ndatos_distinct &lt;- cam_deploy_image |&gt; distinct(longitude, latitude, deployment_id, samp_year)\n\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\ndatos_sf &lt;-  st_as_sf(x = datos_distinct,\n                         coords = c(\"longitude\", \n                                    \"latitude\"),\n                         crs = projlatlon)\n\nmapview(datos_sf, zcol=\"samp_year\")\n\n\n\n\n\n\nCode#load rasters\nper_tree_cov &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/Veg_Cont_Fields_Yearly_250m_v61/Perc_TreeCov/MOD44B_Perc_TreeCov_2021_065.tif\")\nroad_den &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/RoadDensity/grip4_total_dens_m_km2.asc\")\n# elev &lt;- rast(\"D:/CORREGIDAS/elevation_z7.tif\")\nlandcov &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/LandCover_Type_Yearly_500m_v61/LC1/MCD12Q1_LC1_2021_001.tif\") \ncattle &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/Global cattle distribution/5_Ct_2010_Da.tif\")\n#river &lt;- st_read(\"F:/WCS-CameraTrap/shp/DensidadRios/MCD12Q1_LC1_2001_001_RECLASS_MASK_GRID_3600m_DensDrenSouthAmer.shp\")\n\n# get elevation map\n# elevation_detailed &lt;- rast(get_elev_raster(sites, z = 10, clip=\"bbox\", neg_to_na=TRUE))\n# elevation_detailed &lt;- get_elev_point (datos_sf, src=\"aws\", overwrite=TRUE)\n\n\n# extract covs using points and add to sites\n# covs &lt;- cbind(sites, terra::extract(SiteCovsRast, sites))\nper_tre &lt;- terra::extract(per_tree_cov, datos_sf)\nroads &lt;- terra::extract(road_den, datos_sf)\n# eleva &lt;- terra::extract(elevation_detailed, sites)\nland_cov &lt;- terra::extract(landcov, datos_sf)\ncattle_den &lt;-  terra::extract(cattle, datos_sf)\n\nsites &lt;- as.data.frame(datos_sf)\n\n# remove decimals convert to factor\nsites$land_cover &lt;-  factor(land_cov$MCD12Q1_LC1_2021_001)\n# sites$elevation &lt;-  eleva$file3be898018c3\nsites$per_tree_cov &lt;- per_tre$MOD44B_Perc_TreeCov_2021_065 \n#  fix 200 isue\nind &lt;- which(sites$per_tree_cov== 200)\nsites$per_tree_cov[ind] &lt;- 0\n\n# sites$elevation &lt;- elevation_detailed$elevation\nsites$roads &lt;- roads$grip4_total_dens_m_km2\nsites$cattle &lt;- cattle_den[,2]"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html#a-simple-occupancy-model-for-jaguar",
    "href": "posts/2024-07-17-stackmodel/index.html#a-simple-occupancy-model-for-jaguar",
    "title": "“Stacked” Models",
    "section": "A simple occupancy model for jaguar",
    "text": "A simple occupancy model for jaguar\nLets use the ubms package to make an occupancy model pooling 2021 and 2022 data together and use the forest cover as covariate.\nCreate unmarked frame\n\nCode\n# fix NA spread\nyj &lt;- rbind(ylist[[4]][1:30,1:8],\n            ylist[[4]][31:50,12:19])\n\nej &lt;- rbind(effortlist[[4]][1:30,1:8],\n            effortlist[[4]][31:50,12:19])\n    \n  \numf &lt;- unmarkedFrameOccu(y=yj, \n                         siteCovs=data.frame(\n                           per_tree_cov=sites$per_tree_cov,\n                           road_den=sites$roads),\n                         obsCovs=list(effort=ej)\n                      )\n\n\nfit models\n\nCode# fit_0 &lt;- occu(~1~1, data=umf) # unmarked\n\nfit_j0 &lt;- stan_occu(~1~1, data=umf, chains=3, iter=1000, cores=3)\nfit_j1 &lt;- stan_occu(~scale(effort)~1, data=umf, chains=3, iter=1000, cores=3)\nfit_j2 &lt;- stan_occu(~scale(effort)~scale(per_tree_cov), data=umf, chains=3, iter=1000, cores=3)\nfit_j3 &lt;- stan_occu(~scale(effort)~scale(road_den), data=umf, chains=3, iter=1000, cores=3)\n\n# compare\nmodels &lt;- list(Null = fit_j0,\n                effort = fit_j1,\n                effort_treecov = fit_j2,\n                effort_road = fit_j3)\n\nmods &lt;- fitList(fits = models)\n\nround(modSel(mods), 3)\n#&gt;                   elpd nparam elpd_diff se_diff weight\n#&gt; effort         -45.761  1.671     0.000   0.000  0.665\n#&gt; Null           -46.065  1.616    -0.303   0.334  0.000\n#&gt; effort_treecov -46.124  2.966    -0.363   1.546  0.335\n#&gt; effort_road    -46.849  2.755    -1.088   1.001  0.000\n\n\nEvaluate model fit\nStatistic should be near 0.5 if the model fits well\n\nCode# eval\nfit_top_gof &lt;- gof(fit_j2, draws=100, quiet=TRUE)\nfit_top_gof\n#&gt; MacKenzie-Bailey Chi-square \n#&gt; Point estimate = 107.93\n#&gt; Posterior predictive p = 0.63\n\nplot(fit_top_gof)\n\n\n\n\n\n\n\nmodel inference\nEffort in detection and forest tree cover in occupancy\n\nCodeubms::plot_effects(fit_j2, \"det\")\n\n\n\n\n\n\nCodeubms::plot_effects(fit_j2, \"state\")"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html#package-citation",
    "href": "posts/2024-07-17-stackmodel/index.html#package-citation",
    "title": "“Stacked” Models",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.3.2 (R Core Team 2023) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), elevatr v. 0.99.0 (Hollister et al. 2023), kableExtra v. 1.4.0 (Zhu 2024), lme4 v. 1.1.35.3 (Bates et al. 2015), mapview v. 2.11.2 (Appelhans et al. 2023), patchwork v. 1.2.0 (Pedersen 2024), quarto v. 1.4 (Allaire and Dervieux 2024), rmarkdown v. 2.27 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), sf v. 1.0.15 (Pebesma 2018; Pebesma and Bivand 2023), styler v. 1.10.3 (Müller and Walthert 2024), terra v. 1.7.71 (Hijmans 2024), tidyverse v. 2.0.0 (Wickham et al. 2019), ubms v. 1.2.6 (Kellner et al. 2021)."
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.html#sesion-info",
    "href": "posts/2024-07-17-stackmodel/index.html#sesion-info",
    "title": "“Stacked” Models",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.3.2 (2023-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19042)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-07-19\n#&gt;  pandoc   3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version  date (UTC) lib source\n#&gt;    abind               1.4-5    2016-07-21 [1] CRAN (R 4.3.1)\n#&gt;    backports           1.4.1    2021-12-13 [1] CRAN (R 4.3.1)\n#&gt;    base64enc           0.1-3    2015-07-28 [1] CRAN (R 4.3.1)\n#&gt;    bit                 4.0.5    2022-11-15 [1] CRAN (R 4.3.2)\n#&gt;    bit64               4.0.5    2020-08-30 [1] CRAN (R 4.3.2)\n#&gt;    boot                1.3-28.1 2022-11-22 [2] CRAN (R 4.3.2)\n#&gt;    brew                1.0-10   2023-12-16 [1] CRAN (R 4.3.2)\n#&gt;    cachem              1.0.8    2023-05-01 [1] CRAN (R 4.3.2)\n#&gt;    camtrapR          * 2.3.0    2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;    cellranger          1.1.0    2016-07-27 [1] CRAN (R 4.3.2)\n#&gt;    checkmate           2.3.1    2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    class               7.3-22   2023-05-03 [2] CRAN (R 4.3.2)\n#&gt;    classInt            0.4-10   2023-09-05 [1] CRAN (R 4.3.2)\n#&gt;    cli                 3.6.2    2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    codetools           0.2-19   2023-02-01 [2] CRAN (R 4.3.2)\n#&gt;    colorspace          2.1-0    2023-01-23 [1] CRAN (R 4.3.2)\n#&gt;    crayon              1.5.2    2022-09-29 [1] CRAN (R 4.3.2)\n#&gt;    crosstalk           1.2.1    2023-11-23 [1] CRAN (R 4.3.2)\n#&gt;    curl                5.2.0    2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    data.table          1.15.0   2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    DBI                 1.2.2    2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;    devtools            2.4.5    2022-10-11 [1] CRAN (R 4.3.2)\n#&gt;    digest              0.6.34   2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;    distributional      0.4.0    2024-02-07 [1] CRAN (R 4.3.2)\n#&gt;    dplyr             * 1.1.4    2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    e1071               1.7-14   2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    elevatr           * 0.99.0   2023-09-12 [1] CRAN (R 4.3.2)\n#&gt;    ellipsis            0.3.2    2021-04-29 [1] CRAN (R 4.3.2)\n#&gt;    evaluate            0.23     2023-11-01 [1] CRAN (R 4.3.2)\n#&gt;    fansi               1.0.6    2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    farver              2.1.1    2022-07-06 [1] CRAN (R 4.3.2)\n#&gt;    fastmap             1.1.1    2023-02-24 [1] CRAN (R 4.3.2)\n#&gt;    forcats           * 1.0.0    2023-01-29 [1] CRAN (R 4.3.2)\n#&gt;    fs                  1.6.3    2023-07-20 [1] CRAN (R 4.3.2)\n#&gt;    generics            0.1.3    2022-07-05 [1] CRAN (R 4.3.2)\n#&gt;    ggplot2           * 3.5.1    2024-04-23 [1] CRAN (R 4.3.3)\n#&gt;    glue                1.7.0    2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    grateful          * 0.2.4    2023-10-22 [1] CRAN (R 4.3.3)\n#&gt;    gridExtra           2.3      2017-09-09 [1] CRAN (R 4.3.2)\n#&gt;    gtable              0.3.4    2023-08-21 [1] CRAN (R 4.3.2)\n#&gt;    hms                 1.1.3    2023-03-21 [1] CRAN (R 4.3.2)\n#&gt;    htmltools           0.5.7    2023-11-03 [1] CRAN (R 4.3.2)\n#&gt;    htmlwidgets         1.6.4    2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    httpuv              1.6.14   2024-01-26 [1] CRAN (R 4.3.2)\n#&gt;    inline              0.3.19   2021-05-31 [1] CRAN (R 4.3.2)\n#&gt;    jquerylib           0.1.4    2021-04-26 [1] CRAN (R 4.3.2)\n#&gt;    jsonlite            1.8.8    2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    kableExtra        * 1.4.0    2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;    KernSmooth          2.23-22  2023-07-10 [2] CRAN (R 4.3.2)\n#&gt;    knitr               1.46     2024-04-06 [1] CRAN (R 4.3.3)\n#&gt;    labeling            0.4.3    2023-08-29 [1] CRAN (R 4.3.1)\n#&gt;    later               1.3.2    2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    lattice             0.22-5   2023-10-24 [1] CRAN (R 4.3.2)\n#&gt;    leafem              0.2.3    2023-09-17 [1] CRAN (R 4.3.2)\n#&gt;    leaflet             2.2.1    2023-11-13 [1] CRAN (R 4.3.2)\n#&gt;    leaflet.providers   2.0.0    2023-10-17 [1] CRAN (R 4.3.2)\n#&gt;    leafpop             0.1.0    2021-05-22 [1] CRAN (R 4.3.2)\n#&gt;    lifecycle           1.0.4    2023-11-07 [1] CRAN (R 4.3.2)\n#&gt;    lme4              * 1.1-35.3 2024-04-16 [1] CRAN (R 4.3.2)\n#&gt;    loo                 2.7.0    2024-02-24 [1] CRAN (R 4.3.2)\n#&gt;    lubridate         * 1.9.3    2023-09-27 [1] CRAN (R 4.3.2)\n#&gt;    magrittr            2.0.3    2022-03-30 [1] CRAN (R 4.3.2)\n#&gt;    mapview           * 2.11.2   2023-10-13 [1] CRAN (R 4.3.2)\n#&gt;    MASS                7.3-60   2023-05-04 [2] CRAN (R 4.3.2)\n#&gt;    Matrix            * 1.6-1.1  2023-09-18 [2] CRAN (R 4.3.2)\n#&gt;    matrixStats         1.2.0    2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    memoise             2.0.1    2021-11-26 [1] CRAN (R 4.3.2)\n#&gt;    mgcv                1.9-1    2023-12-21 [1] CRAN (R 4.3.3)\n#&gt;    mime                0.12     2021-09-28 [1] CRAN (R 4.3.1)\n#&gt;    miniUI              0.1.1.1  2018-05-18 [1] CRAN (R 4.3.2)\n#&gt;    minqa               1.2.6    2023-09-11 [1] CRAN (R 4.3.2)\n#&gt;    munsell             0.5.0    2018-06-12 [1] CRAN (R 4.3.2)\n#&gt;    nlme                3.1-163  2023-08-09 [2] CRAN (R 4.3.2)\n#&gt;    nloptr              2.0.3    2022-05-26 [1] CRAN (R 4.3.2)\n#&gt;    patchwork         * 1.2.0    2024-01-08 [1] CRAN (R 4.3.3)\n#&gt;    pbapply             1.7-2    2023-06-27 [1] CRAN (R 4.3.2)\n#&gt;    pillar              1.9.0    2023-03-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgbuild            1.4.4    2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    pkgconfig           2.0.3    2019-09-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgload             1.3.4    2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    png                 0.1-8    2022-11-29 [1] CRAN (R 4.3.1)\n#&gt;    posterior           1.5.0    2023-10-31 [1] CRAN (R 4.3.2)\n#&gt;    processx            3.8.3    2023-12-10 [1] CRAN (R 4.3.2)\n#&gt;    profvis             0.3.8    2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    progressr           0.14.0   2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    promises            1.2.1    2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    proxy               0.4-27   2022-06-09 [1] CRAN (R 4.3.2)\n#&gt;    ps                  1.7.6    2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;    purrr             * 1.0.2    2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    quarto            * 1.4      2024-03-06 [1] CRAN (R 4.3.3)\n#&gt;    QuickJSR            1.1.3    2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    R.cache             0.16.0   2022-07-21 [1] CRAN (R 4.3.3)\n#&gt;    R.methodsS3         1.8.2    2022-06-13 [1] CRAN (R 4.3.3)\n#&gt;    R.oo                1.26.0   2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;    R.utils             2.12.3   2023-11-18 [1] CRAN (R 4.3.3)\n#&gt;    R6                  2.5.1    2021-08-19 [1] CRAN (R 4.3.2)\n#&gt;    raster              3.6-26   2023-10-14 [1] CRAN (R 4.3.2)\n#&gt;    Rcpp                1.0.12   2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    RcppNumerical       0.6-0    2023-09-06 [1] CRAN (R 4.3.3)\n#&gt;  D RcppParallel        5.1.7    2023-02-27 [1] CRAN (R 4.3.2)\n#&gt;    readr             * 2.1.5    2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    readxl            * 1.4.3    2023-07-06 [1] CRAN (R 4.3.2)\n#&gt;    remotes             2.5.0    2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    renv                1.0.7    2024-04-11 [1] CRAN (R 4.3.3)\n#&gt;    rlang               1.1.3    2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    rmarkdown           2.27     2024-05-17 [1] CRAN (R 4.3.3)\n#&gt;    RSpectra            0.16-1   2022-04-24 [1] CRAN (R 4.3.2)\n#&gt;    rstan               2.32.6   2024-03-05 [1] CRAN (R 4.3.3)\n#&gt;    rstantools          2.4.0    2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    rstudioapi          0.16.0   2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;    satellite           1.0.5    2024-02-10 [1] CRAN (R 4.3.2)\n#&gt;    scales              1.3.0    2023-11-28 [1] CRAN (R 4.3.3)\n#&gt;    secr                4.6.6    2024-02-29 [1] CRAN (R 4.3.3)\n#&gt;    sessioninfo         1.2.2    2021-12-06 [1] CRAN (R 4.3.2)\n#&gt;    sf                * 1.0-15   2023-12-18 [1] CRAN (R 4.3.2)\n#&gt;    shiny               1.8.0    2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    sp                  2.1-3    2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    StanHeaders         2.32.5   2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    stringi             1.8.3    2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    stringr           * 1.5.1    2023-11-14 [1] CRAN (R 4.3.2)\n#&gt;    styler            * 1.10.3   2024-04-07 [1] CRAN (R 4.3.3)\n#&gt;    svglite             2.1.3    2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    systemfonts         1.0.5    2023-10-09 [1] CRAN (R 4.3.2)\n#&gt;    tensorA             0.36.2.1 2023-12-13 [1] CRAN (R 4.3.2)\n#&gt;    terra             * 1.7-71   2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    tibble            * 3.2.1    2023-03-20 [1] CRAN (R 4.3.2)\n#&gt;    tidyr             * 1.3.1    2024-01-24 [1] CRAN (R 4.3.2)\n#&gt;    tidyselect          1.2.1    2024-03-11 [1] CRAN (R 4.3.3)\n#&gt;    tidyverse         * 2.0.0    2023-02-22 [1] CRAN (R 4.3.2)\n#&gt;    timechange          0.3.0    2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;    tzdb                0.4.0    2023-05-12 [1] CRAN (R 4.3.2)\n#&gt;    ubms              * 1.2.6    2023-09-11 [1] CRAN (R 4.3.2)\n#&gt;    units               0.8-5    2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;    unmarked          * 1.4.1    2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    urlchecker          1.0.1    2021-11-30 [1] CRAN (R 4.3.2)\n#&gt;    usethis             2.2.3    2024-02-19 [1] CRAN (R 4.3.2)\n#&gt;    utf8                1.2.4    2023-10-22 [1] CRAN (R 4.3.2)\n#&gt;    uuid                1.2-0    2024-01-14 [1] CRAN (R 4.3.2)\n#&gt;    V8                  4.4.2    2024-02-15 [1] CRAN (R 4.3.3)\n#&gt;    vctrs               0.6.5    2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;    viridisLite         0.4.2    2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    vroom               1.6.5    2023-12-05 [1] CRAN (R 4.3.2)\n#&gt;    withr               3.0.0    2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    xfun                0.44     2024-05-15 [1] CRAN (R 4.3.3)\n#&gt;    xml2                1.3.6    2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    xtable              1.8-4    2019-04-21 [1] CRAN (R 4.3.2)\n#&gt;    yaml                2.3.8    2023-12-11 [1] CRAN (R 4.3.2)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.3\n#&gt;  [2] C:/Program Files/R/R-4.3.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html",
    "href": "posts/2024-06-25-species-diversity/index.html",
    "title": "Species diversity",
    "section": "",
    "text": "There are two commonly used ways to account for survey effort when estimating species richness using camera traps:\n\nusing the rarefaction of observed richness.\nusing multispecies occupancy models to account for the species present but not observed (occupancy model).\n\nIn this post we can see an example of No 1. using the classical approach of community ecology using the vegan package. The vegan package (https://cran.r-project.org/package=vegan) provides tools for descriptive community ecology. It has basic functions of diversity analysis, community ordination and dissimilarity analysis. The vegan package provides most standard tools of descriptive community analysis. Later in the post we carry out another diversity analysis using functions of the package iNEXT.\nThe modern approach to measure species diversity include the “Sample Hill diversities” also known as Hill numbers. Rarefaction and extrapolation with Hill numbers have gain popularity in the last decade and can be computed using the function renyi in the R package vegan (Oksanen 2016) and the function rarity in the R package MeanRarity (Roswell and Dushoff 2020), and Hill diversities of equal-sized or equal-coverage samples can be approximately compared using the functions iNEXT and estimateD in the R package iNEXT (Hsieh et al. 2016). Estimates for asymptotic values of Hill diversity are available in SpadeR (Chao and Jost 2015, Chao et al. 2015)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#species-richness-and-sampling-effort",
    "href": "posts/2024-06-25-species-diversity/index.html#species-richness-and-sampling-effort",
    "title": "Species diversity",
    "section": "",
    "text": "There are two commonly used ways to account for survey effort when estimating species richness using camera traps:\n\nusing the rarefaction of observed richness.\nusing multispecies occupancy models to account for the species present but not observed (occupancy model).\n\nIn this post we can see an example of No 1. using the classical approach of community ecology using the vegan package. The vegan package (https://cran.r-project.org/package=vegan) provides tools for descriptive community ecology. It has basic functions of diversity analysis, community ordination and dissimilarity analysis. The vegan package provides most standard tools of descriptive community analysis. Later in the post we carry out another diversity analysis using functions of the package iNEXT.\nThe modern approach to measure species diversity include the “Sample Hill diversities” also known as Hill numbers. Rarefaction and extrapolation with Hill numbers have gain popularity in the last decade and can be computed using the function renyi in the R package vegan (Oksanen 2016) and the function rarity in the R package MeanRarity (Roswell and Dushoff 2020), and Hill diversities of equal-sized or equal-coverage samples can be approximately compared using the functions iNEXT and estimateD in the R package iNEXT (Hsieh et al. 2016). Estimates for asymptotic values of Hill diversity are available in SpadeR (Chao and Jost 2015, Chao et al. 2015)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#load-packages",
    "href": "posts/2024-06-25-species-diversity/index.html#load-packages",
    "title": "Species diversity",
    "section": "Load packages",
    "text": "Load packages\n\nCode\n\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(elevatr) # Access Elevation Data from Various APIs\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(tmap)\nlibrary(eks) # make countours\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses\nlibrary(vegan) # Community Ecology Package \nlibrary(ggvegan)\n# library(BiodiversityR) # cause error!\nlibrary(ggordiplots)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(DT)\nlibrary(MeanRarity)\nlibrary(SpadeR)\nlibrary(iNEXT) # Interpolation and Extrapolation for Species Diversity\nlibrary(knitr) # A General-Purpose Package for Dynamic Report Generation in R\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(ggforce) # Accelerating 'ggplot2'\nlibrary(plotly)"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#load-data",
    "href": "posts/2024-06-25-species-diversity/index.html#load-data",
    "title": "Species diversity",
    "section": "Load data",
    "text": "Load data\n\nCode\ndatos &lt;- read_excel(\"C:/CodigoR/CameraTrapCesar/data/CT_Cesar.xlsx\")\n\n# habitat types extracted from Copernicus\nhabs &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#pooling-together-several-sites",
    "href": "posts/2024-06-25-species-diversity/index.html#pooling-together-several-sites",
    "title": "Species diversity",
    "section": "Pooling together several sites",
    "text": "Pooling together several sites\nFor this example I selected one year for the sites: Becerril 2021, LaPaz_Manaure 2019, MLJ, CL1, CL2 and PCF. Sometimes we need to make unique codes per camera and cameraOperation table. This was not the case.\nFor this example we are using the habitat type were the camera was installed as a way to see the sampling effort (number of cameras) per habitat type. Th habitat type was extracted overlaying the camera points on top of the Land Cover 100m global dataset from COPERNICUS using Google Earth engine connected to R. How to do this will be in another post.\n\nCode# make a new column Station\n# datos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"CT_LaPaz_Manaure\") |&gt; unite (\"Station\", ProyectoEtapa:Salida:CT, sep = \"-\")\n\n# fix dates\ndatos$Start &lt;- as.Date(datos$Start, \"%d/%m/%Y\")\ndatos$End &lt;- as.Date(datos$End, \"%d/%m/%Y\")\ndatos$eventDate &lt;- as.Date(datos$eventDate, \"%d/%m/%Y\")\ndatos$eventDateTime &lt;- ymd_hms(paste(datos$eventDate, \" \",\n                              datos$eventTime, \":00\", sep=\"\"))\n\n# filter Becerril\ndatos_Becerril &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_Becerril\") |&gt; mutate (Station=IdGeo) |&gt; filter(Year==2021)\n\n# filter LaPaz_Manaure\ndatos_LaPaz_Manaure&lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_LaPaz_Manaure\") |&gt; mutate (Station=IdGeo) |&gt; filter(Year==2019)\n\n# filter MLJ\ndatos_MLJ &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"MLJ_TH_TS_2021\") |&gt; mutate (Station=IdGeo)\n\n# filter CL\ndatos_CL1 &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CL-TH2022\") |&gt; mutate (Station=IdGeo)\n# filter CL\ndatos_CL2 &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CL-TS2022\") |&gt; mutate (Station=IdGeo)\n\n# filter PCF\ndatos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"PCF\") |&gt; mutate (Station=IdGeo)\n\ndata_south &lt;- rbind(datos_LaPaz_Manaure, datos_Becerril, datos_MLJ,datos_CL1, datos_CL2,datos_PCF)\n\n# filter 2021 and make uniques\nCToperation  &lt;- data_south |&gt; \n              # filter(Year==2021) |&gt; \n              group_by(Station) |&gt; \n              mutate(minStart=min(Start), maxEnd=max(End)) |&gt;  distinct(Longitude, Latitude, minStart, maxEnd, Year) |&gt; \n  ungroup()"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#generating-the-cameraoperation-table-and-making-detection-histories-for-all-the-species.",
    "href": "posts/2024-06-25-species-diversity/index.html#generating-the-cameraoperation-table-and-making-detection-histories-for-all-the-species.",
    "title": "Species diversity",
    "section": "Generating the cameraOperation table and making detection histories for all the species.",
    "text": "Generating the cameraOperation table and making detection histories for all the species.\nThe package CamtrapR has the function ‘cameraOperation’ which makes a table of cameras (stations) and dates (setup, puck-up), this table is key to generate the detection histories using the function ‘detectionHistory’ in the next step.\n\nCode# Generamos la matríz de operación de las cámaras\n\ncamop &lt;- cameraOperation(CTtable= CToperation, # Tabla de operación\n                         stationCol= \"Station\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\") #, # Formato de las fechas\n                         #cameraCol=\"CT\")\n                         # sessionCol= \"Year\")\n\n# Generar las historias de detección ---------------------------------------\n## remove plroblem species\n# ind &lt;- which(datos_PCF$Species==\"Marmosa sp.\")\n# datos_PCF &lt;- datos_PCF[-ind,]\n\nDetHist_list &lt;- lapply(unique(data_south$Species), FUN = function(x) {\n  detectionHistory(\n    recordTable         = data_south, # Tabla de registros\n    camOp                = camop, # Matriz de operación de cámaras\n    stationCol           = \"Station\",\n    speciesCol           = \"Species\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 7, # Colapso de las historias a 10 días\n    day1                 = \"station\", # (\"survey\"),or #inicia en la fecha de cada station\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    output               = (\"binary\"), # (\"binary\") or (\"count\")\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# put names to the species \nnames(DetHist_list) &lt;- unique(data_south$Species)\n\n# Finally we make a new list to put all the detection histories.\nylist &lt;- lapply(DetHist_list, FUN = function(x) x$detection_history)"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#use-the-detection-histories-to-make-the-a-matrix-for-vegan-and-the-incidence-for-inext.",
    "href": "posts/2024-06-25-species-diversity/index.html#use-the-detection-histories-to-make-the-a-matrix-for-vegan-and-the-incidence-for-inext.",
    "title": "Species diversity",
    "section": "Use the detection histories to make the a matrix for vegan and the incidence for iNEXT.",
    "text": "Use the detection histories to make the a matrix for vegan and the incidence for iNEXT.\nSpecies accumulation curves made using the package vegan, plot the increase in species richness as we add survey units. If the curve plateaus (flattens), then that suggests you have sampled the majority of the species in your survey site (camera or habitat type).\n\nCode# loop to make vegan matrix\nmat_vegan &lt;- matrix(NA, dim(ylist[[1]])[1], length(unique(data_south$Species)))\nfor(i in 1:length(unique(data_south$Species))){\n  mat_vegan[,i] &lt;- apply(ylist[[i]], 1, sum, na.rm=TRUE)\n  mat_vegan[,i] &lt;- tidyr::replace_na(mat_vegan[,i], 0) # replace na with 0\n}\n\ncolnames(mat_vegan)  &lt;- unique(data_south$Species)\nrownames(mat_vegan) &lt;- rownames(ylist[[1]])\n\nmat_vegan2 &lt;- as.data.frame(mat_vegan)\nmat_vegan2$hab &lt;- habs$hab_code\n# mat_vegan3 &lt;-  mat_vegan2 |&gt; \n  \n# Select specific rows by row numbers\nclosed_forest_rows &lt;- which(mat_vegan2$hab==\"closed_forest_evergreen_broad\")\nherbaceous_rows &lt;- which(mat_vegan2$hab==\"herbaceous_wetland\")\nherbs_rows &lt;- which(mat_vegan2$hab==\"herbs\")\nopen_forest_rows &lt;- which(mat_vegan2$hab==\"open_forest_evergreen_broad\")\nopen_forest2_rows &lt;- which(mat_vegan2$hab==\"open_forest_other\")\n\n\nclosed_forest &lt;- apply(mat_vegan2[closed_forest_rows,1:22], MARGIN = 2, sum)\nherbaceous_wetland &lt;- apply(mat_vegan2[herbaceous_rows,1:22], MARGIN = 2, sum)\nherbs  &lt;- apply(mat_vegan2[herbs_rows,1:22], MARGIN = 2, sum)\nopen_forest_evergreen &lt;- apply(mat_vegan2[open_forest_rows,1:22], MARGIN = 2, sum)\nopen_forest_other &lt;- apply(mat_vegan2[open_forest2_rows,1:22], MARGIN = 2, sum)\n\n# tb_sp &lt;- mat_vegan2 |&gt; group_by(hab)\n# hab_list &lt;- group_split(tb_sp)\n\n# make list of dataframe per habitat\nsp_by_hab &lt;- mat_vegan2 |&gt; dplyr::group_by(hab) %&gt;% split (.$hab)\n# arrange abundance (detection frecuency) mat for INEXT \ncesar_sp &lt;- t(rbind(\nt(colSums(sp_by_hab[[1]][,1:33])),\nt(colSums(sp_by_hab[[2]][,1:33])),\nt(colSums(sp_by_hab[[3]][,1:33])),\nt(colSums(sp_by_hab[[4]][,1:33])),\nt(colSums(sp_by_hab[[5]][,1:33]))\n))\n \ncolnames(cesar_sp) &lt;- names(sp_by_hab)\n\n\n\n# function to Format data to incidence and use iNext\nf_incidences &lt;- function(habitat_rows=closed_forest_rows){ylist %&gt;%  # historias de detection\n  map(~rowSums(.,na.rm = T)) %&gt;% # sumo las detecciones en cada sitio\n  reduce(cbind) %&gt;% # unimos las listas\n  as_data_frame() %&gt;% #formato dataframe\n  filter(row_number() %in% habitat_rows) |&gt; \n  t() %&gt;% # trasponer la tabla\n  as_tibble() %&gt;% #formato tibble\n  mutate_if(is.numeric,~(.&gt;=1)*1) %&gt;%  #como es incidencia, formateo a 1 y 0\n  rowSums() %&gt;%  # ahora si la suma de las incidencias en cada sitio\n  sort(decreasing=T) |&gt; \n  as_tibble() %&gt;% \n  add_row(value= length(habitat_rows), .before = 1) %&gt;%  # requiere que el primer valor sea el número de sitios\n  filter(!if_any()==0) |&gt;  # filter ceros\n  as.matrix() # Requiere formato de matriz\n}\n\n# Make incidence frequency table (is a list whit 5 habitats)\n# Make an empty list to store our data\nincidence_cesar &lt;- list() \nincidence_cesar[[1]] &lt;- f_incidences(closed_forest_rows)\nincidence_cesar[[2]] &lt;- f_incidences(herbaceous_rows)\nincidence_cesar[[3]] &lt;- f_incidences(herbs_rows)\nincidence_cesar[[4]] &lt;- f_incidences(open_forest_rows)\nincidence_cesar[[5]] &lt;- f_incidences(open_forest_other)\n\n# put names\nnames(incidence_cesar) &lt;- names(sp_by_hab)\n\n# we deleted this habitat type for making error\nincidence_cesar &lt;- within(incidence_cesar, rm(\"herbaceous_wetland\"))"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#to-start-lets-plot-the-species-vs-sites",
    "href": "posts/2024-06-25-species-diversity/index.html#to-start-lets-plot-the-species-vs-sites",
    "title": "Species diversity",
    "section": "To start lets plot the species vs sites",
    "text": "To start lets plot the species vs sites\n\nCode# Transpose if needed to have sample site names on rows\nabund_table&lt;-mat_vegan\n# Convert to relative frequencies\nabund_table &lt;- abund_table/rowSums(abund_table)\nlibrary(reshape2)\ndf&lt;-melt(abund_table)\ncolnames(df)&lt;-c(\"Sampled_site\",\"Species\",\"Value\")\nlibrary(plyr)\nlibrary(scales)\n \n# We are going to apply transformation to our data to make it\n# easier on eyes \n \n#df&lt;-ddply(df,.(Samples),transform,rescale=scale(Value))\ndf&lt;-ddply(df,.(Sampled_site),transform,rescale=sqrt(Value))\n \n# Plot heatmap\np &lt;- ggplot(df, aes(Species, Sampled_site)) + \n  geom_tile(aes(fill = rescale),colour = \"white\") + \n  scale_fill_gradient(low = \"white\",high = \"#1E5A8C\")+\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + theme(legend.position = \"none\",axis.ticks = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1,size=6),axis.text.y = element_text(size=4))\n\n# ggplotly(p) # see interactive\n# View the plot\np\n\n\n\n\n\n\n\n\nNotice how some cameras didn’t record any species. Here showed as the gay horizontal line. Perhaps we need to delete those cameras."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-vegan",
    "href": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-vegan",
    "title": "Species diversity",
    "section": "Rarefaction using vegan\n",
    "text": "Rarefaction using vegan\n\n\nNotice that sites are cameras and the acumulation is species per camera not time\n\nRarefaction is a technique to assess expected species richness. Rarefaction allows the calculation of species richness for a given number of individual samples, based on the construction of rarefaction curves.\nThe issue that occurs when sampling various species in a community is that the larger the number of individuals sampled, the more species that will be found. Rarefaction curves are created by randomly re-sampling the pool of N samples multiple times and then plotting the average number of species found in each sample (1,2, … N). “Thus rarefaction generates the expected number of species in a small collection of n individuals (or n samples) drawn at random from the large pool of N samples.”. Rarefaction curves generally grow rapidly at first, as the most common species are found, but the curves plateau as only the rarest species remain to be sampled.\n\nCode\nrarecurve(mat_vegan, col = \"blue\") \n\n\n\n\n\n\nCoderarecurve(t(cesar_sp), col = \"blue\") \n\n\n\n\n\n\nCode\nsp1 &lt;- specaccum(mat_vegan)\nsp2 &lt;- specaccum(mat_vegan, \"random\")\n# sp2\n# summary(sp2)\nplot(sp1, ci.type=\"poly\", col=\"blue\", lwd=2, ci.lty=0, ci.col=\"lightblue\")\n\n\n\n\n\n\nCode# boxplot(sp2, col=\"yellow\", add=TRUE, pch=\"+\")\n\n\nmods &lt;- fitspecaccum(sp1, \"gleason\")\nplot(mods, col=\"hotpink\")\nboxplot(sp2, col = \"yellow\", border = \"blue\", lty=1, cex=0.3, add= TRUE)\n\n\n\n\n\n\nCode\n\n## Accumulation model\npool &lt;- poolaccum(mat_vegan)\n# summary(pool, display = \"chao\")\nplot(pool)\n\n\n\n\n\n\n\nRanked abundance distribution\nAn alternative approach to species abundance distribution is to plot logarithmic abundances in decreasing order, or against ranks of species.\n\nCodek &lt;- sample(nrow(mat_vegan), 1)\nrad &lt;- radfit(mat_vegan[22,]) # species 22\n# plot(rad)\nradlattice(rad)\n\n\n\n\n\n\n\nHill Diversities using vegan\n\nCode# data(BCI)\ni &lt;- sample(nrow(mat_vegan), 20)\nmod &lt;- renyi(mat_vegan) #selecting sites with more than one record\nplot(mod)\n\n\n\n\n\n\nCodemod &lt;- renyiaccum(mat_vegan[55:89,])\nplot(mod, as.table=TRUE, col = c(1, 2, 2))\n\n\n\n\n\n\nCodepersp(mod)\n\n\n\n\n\n\n\nTotal number of species\n\nCodeDT::datatable(round(specpool(mat_vegan),3))\n\n\n\n\n\nNumber of unseen species per camera\nLook at S.chao1\n\nCodeDT::datatable(\nt(round(as.data.frame(estimateR(mat_vegan[,])),3))\n)\n\n\n\n\nCode\n# save as dataframe\nS_per_site &lt;- as.data.frame(t(round(as.data.frame(estimateR(mat_vegan[,])),3)))\n# add sites\nS_per_site$Station &lt;- rownames(S_per_site)\n\n\nIt is weird to have .5 species in some sites."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#map-it-converting-cameratrap-operation-to-sf",
    "href": "posts/2024-06-25-species-diversity/index.html#map-it-converting-cameratrap-operation-to-sf",
    "title": "Species diversity",
    "section": "Map it converting Cameratrap-operation to sf",
    "text": "Map it converting Cameratrap-operation to sf\nIn this step we convert the Cameratrap-operation table to sf, we add elevation from AWS, habitat type and species per site (S.chao1) to finally visualize the map showing the number of species as the size of the dot.\n\nCode\n# datos_distinct &lt;- datos |&gt; distinct(Longitude, Latitude, CT, Proyecto)\n\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\nCToperation_sf &lt;-  st_as_sf(x = CToperation,\n                         coords = c(\"Longitude\", \n                                    \"Latitude\"),\n                         crs = projlatlon)\n\n# write.csv(habs, \"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")\nhabs &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")\n\nCToperation_elev_sf &lt;- get_elev_point(CToperation_sf, src = \"aws\") # get elevation from AWS\n\nCToperation_elev_sf &lt;- CToperation_elev_sf |&gt; left_join(habs, by='Station') |&gt; left_join(S_per_site, by='Station') |&gt; select(\"Station\", \"elevation\", \"minStart.x\",\"maxEnd.x\", \"Year.x\", \"hab_code\" , \"S.obs\", \"S.chao1\")\n\n# add habitat \n# CToperation_elev_sf$habs &lt;- habs$hab_code\n# see the map\nmapview(CToperation_elev_sf, zcol=\"hab_code\", cex = \"S.chao1\", alpha = 0)"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#perhaps-it-is-easyer-to-plot-the-species-number-as-a-countour-map",
    "href": "posts/2024-06-25-species-diversity/index.html#perhaps-it-is-easyer-to-plot-the-species-number-as-a-countour-map",
    "title": "Species diversity",
    "section": "Perhaps it is easyer to plot the species number as a countour map",
    "text": "Perhaps it is easyer to plot the species number as a countour map\nOne advantage of using the eks density estimate, is that it is clearer what the output means. The 20% contour means “20% of the measurements lie inside this contour”. The documentation for eks takes issue with how stat_density_2d does its calculation, I don’t know who is right because the estimated value is species.\n\nCode# select chao\nspecies &lt;- dplyr::select(CToperation_elev_sf, \"S.chao1\")\n# hakeoides_coord &lt;- data.frame(sf::st_coordinates(hakeoides))\nSta_den &lt;- eks::st_kde(species) # calculate density\n\n# VERY conveniently, eks can generate an sf file of contour lines\ncontours &lt;- eks::st_get_contour(Sta_den, cont=c( 10,20,30,40,50,60,70,80, 90)) %&gt;% \n  mutate(value=as.numeric(levels(contlabel)))\n\n\n# pal_fun &lt;- leaflet::colorQuantile(\"YlOrRd\", NULL, n = 5)\n\np_popup &lt;- paste(\"Species\", as.numeric(levels(contours$estimate)), \"number\")\n\n\ntmap::tmap_mode(\"view\") # set mode to interactive plots\n\ntmap::tm_shape(species) + \n    tmap::tm_sf(col=\"black\", size=0.2) +\n  #   contours from eks\n  tmap::tm_shape(contours) +\n    tmap::tm_polygons(\"estimate\",\n                      palette=\"Reds\",\n                      alpha=0.5 )\n\n\n\n\n\nCode\n\n## geom_sf plot\n# ## suitable smoothing matrix gives optimally smoothed contours\n# gs1 &lt;- ggplot(Sta_den) + geom_sf(data=CToperation_elev_sf, fill=NA) + ggthemes::theme_map() +\n#     colorspace::scale_fill_discrete_sequential(palette=\"Heat2\") \n# gs1 + geom_sf(data=st_get_contour(Sta_den), aes(fill=label_percent(contlabel))) +\n#     coord_sf(xlim=xlim, ylim=ylim) \n\n\n\nIn general terms the species estimate per site seems to be larger near the mine and decrease with the distance to the mine. Also notice kernel density estimates are larger than s.chao1."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#nonmetric-multidimensional-scaling-nmds",
    "href": "posts/2024-06-25-species-diversity/index.html#nonmetric-multidimensional-scaling-nmds",
    "title": "Species diversity",
    "section": "Nonmetric Multidimensional Scaling (NMDS)",
    "text": "Nonmetric Multidimensional Scaling (NMDS)\nOften in ecological research, we are interested not only in comparing univariate descriptors of communities, like diversity, but also in how the constituent species — or the species composition — changes from one community to the next. One common tool to do this is non-metric multidimensional scaling, or NMDS. The goal of NMDS is to collapse information from multiple dimensions (e.g, from multiple communities, sites were the cameratrap was installed, etc.) into just a few, so that they can be visualized and interpreted. Unlike other ordination techniques that rely on (primarily Euclidean) distances, such as Principal Coordinates Analysis, NMDS uses rank orders, and thus is an extremely flexible technique that can accommodate a variety of different kinds of data.\nIf the treatment is continuous, such as an environmental gradient, then it might be useful to plot contour lines rather than convex hulls. We can get some, elevation data for our original community matrix and overlay them onto the NMDS plot using ordisurf.\n\nCode\nexample_NMDS=metaMDS(as.data.frame(mat_vegan), \n                     distance=\"euclidean\",\n                     zerodist = \"ignore\",\n                     trymax=300,\n                     k=5) # T\n#&gt; Wisconsin double standardization\n#&gt; Run 0 stress 0.1177774 \n#&gt; Run 1 stress 0.118639 \n#&gt; Run 2 stress 0.1203082 \n#&gt; Run 3 stress 0.1195278 \n#&gt; Run 4 stress 0.1186327 \n#&gt; Run 5 stress 0.12109 \n#&gt; Run 6 stress 0.1188335 \n#&gt; Run 7 stress 0.1190469 \n#&gt; Run 8 stress 0.117841 \n#&gt; ... Procrustes: rmse 0.06959656  max resid 0.2466637 \n#&gt; Run 9 stress 0.1205917 \n#&gt; Run 10 stress 0.1199401 \n#&gt; Run 11 stress 0.1201801 \n#&gt; Run 12 stress 0.1180694 \n#&gt; ... Procrustes: rmse 0.07421514  max resid 0.3017213 \n#&gt; Run 13 stress 0.1195638 \n#&gt; Run 14 stress 0.1181957 \n#&gt; ... Procrustes: rmse 0.07696806  max resid 0.2948274 \n#&gt; Run 15 stress 0.1199977 \n#&gt; Run 16 stress 0.1186464 \n#&gt; Run 17 stress 0.1200814 \n#&gt; Run 18 stress 0.1196856 \n#&gt; Run 19 stress 0.1190569 \n#&gt; Run 20 stress 0.1188559 \n#&gt; Run 21 stress 0.1190279 \n#&gt; Run 22 stress 0.1182953 \n#&gt; Run 23 stress 0.1185894 \n#&gt; Run 24 stress 0.1195353 \n#&gt; Run 25 stress 0.1198213 \n#&gt; Run 26 stress 0.1180371 \n#&gt; ... Procrustes: rmse 0.05182703  max resid 0.286658 \n#&gt; Run 27 stress 0.1195603 \n#&gt; Run 28 stress 0.1188059 \n#&gt; Run 29 stress 0.1200355 \n#&gt; Run 30 stress 0.1217617 \n#&gt; Run 31 stress 0.119323 \n#&gt; Run 32 stress 0.1189743 \n#&gt; Run 33 stress 0.120783 \n#&gt; Run 34 stress 0.1199135 \n#&gt; Run 35 stress 0.1199073 \n#&gt; Run 36 stress 0.1173716 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.05784359  max resid 0.3070667 \n#&gt; Run 37 stress 0.1205716 \n#&gt; Run 38 stress 0.1200275 \n#&gt; Run 39 stress 0.1184201 \n#&gt; Run 40 stress 0.1177408 \n#&gt; ... Procrustes: rmse 0.06961051  max resid 0.2919368 \n#&gt; Run 41 stress 0.1195673 \n#&gt; Run 42 stress 0.1195406 \n#&gt; Run 43 stress 0.118114 \n#&gt; Run 44 stress 0.1183999 \n#&gt; Run 45 stress 0.1177366 \n#&gt; ... Procrustes: rmse 0.0662156  max resid 0.300866 \n#&gt; Run 46 stress 0.1204738 \n#&gt; Run 47 stress 0.1199185 \n#&gt; Run 48 stress 0.1196165 \n#&gt; Run 49 stress 0.1195016 \n#&gt; Run 50 stress 0.1182618 \n#&gt; Run 51 stress 0.1201925 \n#&gt; Run 52 stress 0.1200901 \n#&gt; Run 53 stress 0.1189545 \n#&gt; Run 54 stress 0.1192602 \n#&gt; Run 55 stress 0.1193026 \n#&gt; Run 56 stress 0.1207903 \n#&gt; Run 57 stress 0.1191729 \n#&gt; Run 58 stress 0.1196238 \n#&gt; Run 59 stress 0.120328 \n#&gt; Run 60 stress 0.1190675 \n#&gt; Run 61 stress 0.12019 \n#&gt; Run 62 stress 0.1197608 \n#&gt; Run 63 stress 0.1191153 \n#&gt; Run 64 stress 0.1197475 \n#&gt; Run 65 stress 0.1176706 \n#&gt; ... Procrustes: rmse 0.07364867  max resid 0.3130217 \n#&gt; Run 66 stress 0.1192316 \n#&gt; Run 67 stress 0.1200073 \n#&gt; Run 68 stress 0.1187615 \n#&gt; Run 69 stress 0.1188614 \n#&gt; Run 70 stress 0.1185907 \n#&gt; Run 71 stress 0.1208726 \n#&gt; Run 72 stress 0.1215665 \n#&gt; Run 73 stress 0.1214001 \n#&gt; Run 74 stress 0.120894 \n#&gt; Run 75 stress 0.1194207 \n#&gt; Run 76 stress 0.1185473 \n#&gt; Run 77 stress 0.1193857 \n#&gt; Run 78 stress 0.1195034 \n#&gt; Run 79 stress 0.1185458 \n#&gt; Run 80 stress 0.1191039 \n#&gt; Run 81 stress 0.1192955 \n#&gt; Run 82 stress 0.11821 \n#&gt; Run 83 stress 0.1205725 \n#&gt; Run 84 stress 0.1186976 \n#&gt; Run 85 stress 0.1189673 \n#&gt; Run 86 stress 0.1196997 \n#&gt; Run 87 stress 0.1207973 \n#&gt; Run 88 stress 0.1189912 \n#&gt; Run 89 stress 0.1190163 \n#&gt; Run 90 stress 0.118575 \n#&gt; Run 91 stress 0.1210431 \n#&gt; Run 92 stress 0.1187268 \n#&gt; Run 93 stress 0.1186896 \n#&gt; Run 94 stress 0.1191338 \n#&gt; Run 95 stress 0.1198434 \n#&gt; Run 96 stress 0.1197512 \n#&gt; Run 97 stress 0.1181055 \n#&gt; Run 98 stress 0.1198634 \n#&gt; Run 99 stress 0.1193117 \n#&gt; Run 100 stress 0.1183318 \n#&gt; Run 101 stress 0.1224138 \n#&gt; Run 102 stress 0.1184128 \n#&gt; Run 103 stress 0.1195686 \n#&gt; Run 104 stress 0.1199533 \n#&gt; Run 105 stress 0.1186017 \n#&gt; Run 106 stress 0.1201715 \n#&gt; Run 107 stress 0.1191841 \n#&gt; Run 108 stress 0.1194039 \n#&gt; Run 109 stress 0.1181875 \n#&gt; Run 110 stress 0.1195341 \n#&gt; Run 111 stress 0.1190356 \n#&gt; Run 112 stress 0.1190526 \n#&gt; Run 113 stress 0.119654 \n#&gt; Run 114 stress 0.1185665 \n#&gt; Run 115 stress 0.1181684 \n#&gt; Run 116 stress 0.1182758 \n#&gt; Run 117 stress 0.1200614 \n#&gt; Run 118 stress 0.1209657 \n#&gt; Run 119 stress 0.1201395 \n#&gt; Run 120 stress 0.118745 \n#&gt; Run 121 stress 0.1204416 \n#&gt; Run 122 stress 0.1201015 \n#&gt; Run 123 stress 0.1188933 \n#&gt; Run 124 stress 0.1197918 \n#&gt; Run 125 stress 0.1189769 \n#&gt; Run 126 stress 0.1185523 \n#&gt; Run 127 stress 0.118093 \n#&gt; Run 128 stress 0.1194063 \n#&gt; Run 129 stress 0.1198431 \n#&gt; Run 130 stress 0.1184639 \n#&gt; Run 131 stress 0.1186917 \n#&gt; Run 132 stress 0.1180767 \n#&gt; Run 133 stress 0.118256 \n#&gt; Run 134 stress 0.1188061 \n#&gt; Run 135 stress 0.1201618 \n#&gt; Run 136 stress 0.1193434 \n#&gt; Run 137 stress 0.1198732 \n#&gt; Run 138 stress 0.1178801 \n#&gt; Run 139 stress 0.1192902 \n#&gt; Run 140 stress 0.1193387 \n#&gt; Run 141 stress 0.1191831 \n#&gt; Run 142 stress 0.1188177 \n#&gt; Run 143 stress 0.1202102 \n#&gt; Run 144 stress 0.1179252 \n#&gt; Run 145 stress 0.1188159 \n#&gt; Run 146 stress 0.1198713 \n#&gt; Run 147 stress 0.1188872 \n#&gt; Run 148 stress 0.1181425 \n#&gt; Run 149 stress 0.1186447 \n#&gt; Run 150 stress 0.1200236 \n#&gt; Run 151 stress 0.1185417 \n#&gt; Run 152 stress 0.1203268 \n#&gt; Run 153 stress 0.1197702 \n#&gt; Run 154 stress 0.1201025 \n#&gt; Run 155 stress 0.1217321 \n#&gt; Run 156 stress 0.1193099 \n#&gt; Run 157 stress 0.118304 \n#&gt; Run 158 stress 0.1208602 \n#&gt; Run 159 stress 0.1193542 \n#&gt; Run 160 stress 0.1186054 \n#&gt; Run 161 stress 0.1190113 \n#&gt; Run 162 stress 0.1198267 \n#&gt; Run 163 stress 0.1193104 \n#&gt; Run 164 stress 0.1190986 \n#&gt; Run 165 stress 0.1199061 \n#&gt; Run 166 stress 0.1195836 \n#&gt; Run 167 stress 0.1198015 \n#&gt; Run 168 stress 0.1176901 \n#&gt; ... Procrustes: rmse 0.06304642  max resid 0.3124517 \n#&gt; Run 169 stress 0.119372 \n#&gt; Run 170 stress 0.1195727 \n#&gt; Run 171 stress 0.1202726 \n#&gt; Run 172 stress 0.1177694 \n#&gt; ... Procrustes: rmse 0.06613073  max resid 0.2829987 \n#&gt; Run 173 stress 0.1187576 \n#&gt; Run 174 stress 0.1196139 \n#&gt; Run 175 stress 0.1178032 \n#&gt; ... Procrustes: rmse 0.06874492  max resid 0.3168956 \n#&gt; Run 176 stress 0.1203651 \n#&gt; Run 177 stress 0.118072 \n#&gt; Run 178 stress 0.1195902 \n#&gt; Run 179 stress 0.118691 \n#&gt; Run 180 stress 0.1208294 \n#&gt; Run 181 stress 0.1200191 \n#&gt; Run 182 stress 0.119866 \n#&gt; Run 183 stress 0.1187328 \n#&gt; Run 184 stress 0.1209252 \n#&gt; Run 185 stress 0.118211 \n#&gt; Run 186 stress 0.1186497 \n#&gt; Run 187 stress 0.1189714 \n#&gt; Run 188 stress 0.1206962 \n#&gt; Run 189 stress 0.1176172 \n#&gt; ... Procrustes: rmse 0.06466525  max resid 0.3171931 \n#&gt; Run 190 stress 0.1189226 \n#&gt; Run 191 stress 0.1185419 \n#&gt; Run 192 stress 0.1198324 \n#&gt; Run 193 stress 0.1191051 \n#&gt; Run 194 stress 0.1204698 \n#&gt; Run 195 stress 0.1183989 \n#&gt; Run 196 stress 0.1188965 \n#&gt; Run 197 stress 0.1185408 \n#&gt; Run 198 stress 0.1177961 \n#&gt; ... Procrustes: rmse 0.07220897  max resid 0.3121273 \n#&gt; Run 199 stress 0.1189096 \n#&gt; Run 200 stress 0.1177789 \n#&gt; ... Procrustes: rmse 0.06929616  max resid 0.2715589 \n#&gt; Run 201 stress 0.1197255 \n#&gt; Run 202 stress 0.1199408 \n#&gt; Run 203 stress 0.1187485 \n#&gt; Run 204 stress 0.1194871 \n#&gt; Run 205 stress 0.1201045 \n#&gt; Run 206 stress 0.117627 \n#&gt; ... Procrustes: rmse 0.08303976  max resid 0.2862873 \n#&gt; Run 207 stress 0.1201244 \n#&gt; Run 208 stress 0.1184364 \n#&gt; Run 209 stress 0.1188549 \n#&gt; Run 210 stress 0.1194335 \n#&gt; Run 211 stress 0.1191933 \n#&gt; Run 212 stress 0.1194258 \n#&gt; Run 213 stress 0.1197242 \n#&gt; Run 214 stress 0.1192565 \n#&gt; Run 215 stress 0.1192472 \n#&gt; Run 216 stress 0.1191829 \n#&gt; Run 217 stress 0.1192963 \n#&gt; Run 218 stress 0.1202514 \n#&gt; Run 219 stress 0.1186722 \n#&gt; Run 220 stress 0.1201576 \n#&gt; Run 221 stress 0.1180075 \n#&gt; Run 222 stress 0.120578 \n#&gt; Run 223 stress 0.1178374 \n#&gt; ... Procrustes: rmse 0.0673166  max resid 0.2675976 \n#&gt; Run 224 stress 0.1186392 \n#&gt; Run 225 stress 0.1208761 \n#&gt; Run 226 stress 0.1181799 \n#&gt; Run 227 stress 0.119974 \n#&gt; Run 228 stress 0.1187453 \n#&gt; Run 229 stress 0.1191273 \n#&gt; Run 230 stress 0.120295 \n#&gt; Run 231 stress 0.1194106 \n#&gt; Run 232 stress 0.1184291 \n#&gt; Run 233 stress 0.1178429 \n#&gt; ... Procrustes: rmse 0.06301736  max resid 0.3206148 \n#&gt; Run 234 stress 0.1196438 \n#&gt; Run 235 stress 0.1198732 \n#&gt; Run 236 stress 0.1206352 \n#&gt; Run 237 stress 0.1193215 \n#&gt; Run 238 stress 0.1189903 \n#&gt; Run 239 stress 0.1192656 \n#&gt; Run 240 stress 0.1192452 \n#&gt; Run 241 stress 0.1186789 \n#&gt; Run 242 stress 0.1184853 \n#&gt; Run 243 stress 0.1195621 \n#&gt; Run 244 stress 0.1180821 \n#&gt; Run 245 stress 0.118932 \n#&gt; Run 246 stress 0.1199602 \n#&gt; Run 247 stress 0.1175648 \n#&gt; ... Procrustes: rmse 0.06949132  max resid 0.272315 \n#&gt; Run 248 stress 0.1187787 \n#&gt; Run 249 stress 0.1176292 \n#&gt; ... Procrustes: rmse 0.0705131  max resid 0.3331216 \n#&gt; Run 250 stress 0.1189756 \n#&gt; Run 251 stress 0.120262 \n#&gt; Run 252 stress 0.1196884 \n#&gt; Run 253 stress 0.1197043 \n#&gt; Run 254 stress 0.1192298 \n#&gt; Run 255 stress 0.1183278 \n#&gt; Run 256 stress 0.1186797 \n#&gt; Run 257 stress 0.1181239 \n#&gt; Run 258 stress 0.1204265 \n#&gt; Run 259 stress 0.1179852 \n#&gt; Run 260 stress 0.1195732 \n#&gt; Run 261 stress 0.1196992 \n#&gt; Run 262 stress 0.1183163 \n#&gt; Run 263 stress 0.1181869 \n#&gt; Run 264 stress 0.1188371 \n#&gt; Run 265 stress 0.1185712 \n#&gt; Run 266 stress 0.1182202 \n#&gt; Run 267 stress 0.1192585 \n#&gt; Run 268 stress 0.1185244 \n#&gt; Run 269 stress 0.1188616 \n#&gt; Run 270 stress 0.1185748 \n#&gt; Run 271 stress 0.1195692 \n#&gt; Run 272 stress 0.1201793 \n#&gt; Run 273 stress 0.1201379 \n#&gt; Run 274 stress 0.1191017 \n#&gt; Run 275 stress 0.119854 \n#&gt; Run 276 stress 0.1206238 \n#&gt; Run 277 stress 0.1194579 \n#&gt; Run 278 stress 0.1194496 \n#&gt; Run 279 stress 0.1186716 \n#&gt; Run 280 stress 0.1196048 \n#&gt; Run 281 stress 0.1182952 \n#&gt; Run 282 stress 0.120723 \n#&gt; Run 283 stress 0.119428 \n#&gt; Run 284 stress 0.1191335 \n#&gt; Run 285 stress 0.118789 \n#&gt; Run 286 stress 0.1199199 \n#&gt; Run 287 stress 0.119434 \n#&gt; Run 288 stress 0.1182317 \n#&gt; Run 289 stress 0.1186925 \n#&gt; Run 290 stress 0.1208664 \n#&gt; Run 291 stress 0.1177168 \n#&gt; ... Procrustes: rmse 0.07399642  max resid 0.2140589 \n#&gt; Run 292 stress 0.1185499 \n#&gt; Run 293 stress 0.1195837 \n#&gt; Run 294 stress 0.1186854 \n#&gt; Run 295 stress 0.1200888 \n#&gt; Run 296 stress 0.1201678 \n#&gt; Run 297 stress 0.1198337 \n#&gt; Run 298 stress 0.1195432 \n#&gt; Run 299 stress 0.1188039 \n#&gt; Run 300 stress 0.1176323 \n#&gt; ... Procrustes: rmse 0.07310647  max resid 0.3336329 \n#&gt; *** Best solution was not repeated -- monoMDS stopping criteria:\n#&gt;    300: no. of iterations &gt;= maxit\n\n# plot the graph\nvegan::ordisurf((example_NMDS),CToperation_elev_sf$elevation,main=\"\",col=\"forestgreen\", trymax=100) # bubble = 2\n#&gt; \n#&gt; Family: gaussian \n#&gt; Link function: identity \n#&gt; \n#&gt; Formula:\n#&gt; y ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n#&gt; \n#&gt; Estimated degrees of freedom:\n#&gt; 6.45  total = 7.45 \n#&gt; \n#&gt; REML score: 714.626\nvegan::orditorp(example_NMDS,display=\"species\",col=\"blue\",air=0.1,\n   cex=0.5)\n\n\n\n\n\n\n\nWe can make a similar plot using gg_ordisurf from the package ggordiplots but also incorporating habitat type.\n\nCode# ggordiplots::gg_ordisurf()\n# To fit a surface with ggordiplots:\n\n \nordiplot &lt;- gg_ordisurf(ord = example_NMDS, \n                        env.var = CToperation_elev_sf$elevation,\n                        var.label = \"Elevation\",\n                        pt.size = 2,\n                        groups = CToperation_elev_sf$hab_code,\n                        binwidth = 50)\n\n\n\n\n\n\nCode\n# ggplotly(ordiplot$plot) # see interactive\n\n# # alternative using biodiversityR\n# \n# A1.surface &lt;- ordisurf( y=example_NMDS)\n# A1.grid &lt;- ordisurfgrid.long(A1.surface)\n# # Preparing the plot\n# \n# plotgg4 &lt;- ggplot() + \n#     geom_contour_filled(data=A1.grid, \n#                         aes(x=x, y=y, z=z)) +\n#     geom_vline(xintercept = c(0), color = \"grey70\", linetype = 2) +\n#     geom_hline(yintercept = c(0), color = \"grey70\", linetype = 2) +  \n#     xlab(axis.long2[1, \"label\"]) +\n#     ylab(axis.long2[2, \"label\"]) +  \n#     scale_x_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +\n#     scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +\n#     geom_point(data=sites.long2, \n#                aes(x=axis1, y=axis2, shape=Management), \n#                colour=\"red\", size=4) +\n#     BioR.theme +\n#     scale_fill_viridis_d() +\n#     labs(fill=\"A1\") +\n#     coord_fixed(ratio=1)\n# # and seeing the plot.\n# \n# plotgg4\n\n\nThe contours connect species in the ordination space that are predicted to have the same elevation."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-inext",
    "href": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-inext",
    "title": "Species diversity",
    "section": "Rarefaction using iNEXT\n",
    "text": "Rarefaction using iNEXT\n\n\nCode\n\n\nout &lt;- iNEXT(incidence_cesar, # The data frame\n             q=0,# The type of diversity estimator \n             datatype=\"incidence_freq\",   # The type of analysis\n             knots=40,                    # The number of data points \n             se=TRUE,                     # confidence intervals\n             conf=0.95,                   # The level of confidence intervals\n             nboot=100)                    # The number of bootstraps \n\nggiNEXT(out, type=1)\n\n\n\n\n\n\nCodeggiNEXT(out, type=2)\n\n\n\n\n\n\nCodeggiNEXT(out, type=3)\n\n\n\n\n\n\nCode\np1 &lt;- ggiNEXT(out, type=1)+ theme_classic() +   #  type 1 = the diversity estimator\n        labs(x = \"Survey sites\", y = \"Richness\")\n  \np2 &lt;- ggiNEXT(out, type=2)+ theme_classic() +    #  type 2 = the survey coverage\n        labs(x = \"Survey sites\")\n    \ngrid.arrange(p1, p2, nrow = 2)\n\n\n\n\n\n\nCode##############\nout2 &lt;- iNEXT(incidence_cesar, q=c(0,1,2) ,datatype=\"incidence_freq\" )\n\nggiNEXT(out2, type=1, facet.var=\"Order.q\", color.var=\"Assemblage\") + theme_classic() \n\n\n\n\n\n\n\nThe iNEXT package is well suited for comparisons of diversity indices through the use of hill numbers - of which the q value = 1 represents the traditional diversity indices: The species richness is q = 0. The Shannon index is (q=1), and Simpson is (q=2). Note Increasing values of q reduces the influence of rare species on our estimate of community diversity."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#package-citation",
    "href": "posts/2024-06-25-species-diversity/index.html#package-citation",
    "title": "Species diversity",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.3.2 (R Core Team 2023) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.32 (Xie, Cheng, and Tan 2024), eks v. 1.0.5 (Duong 2024), elevatr v. 0.99.0 (Hollister et al. 2023), ggforce v. 0.4.2 (Pedersen 2024a), ggordiplots v. 0.4.3 (Quensen, Simpson, and Oksanen 2024), ggvegan v. 0.1.999 (Simpson and Oksanen 2023), gridExtra v. 2.3 (Auguie 2017), iNEXT v. 3.0.1 (Chao et al. 2014; Hsieh, Ma, and Chao 2024), kableExtra v. 1.4.0 (Zhu 2024), knitr v. 1.46 (Xie 2014, 2015, 2024), mapview v. 2.11.2 (Appelhans et al. 2023), MeanRarity v. 0.0.1.5 (Roswell and Dushoff 2023), patchwork v. 1.2.0 (Pedersen 2024b), plotly v. 4.10.4 (Sievert 2020), plyr v. 1.8.9 (Wickham 2011), reshape2 v. 1.4.4 (Wickham 2007), rmarkdown v. 2.27 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), scales v. 1.3.0 (Wickham, Pedersen, and Seidel 2023), sf v. 1.0.15 (Pebesma 2018; Pebesma and Bivand 2023), SpadeR v. 0.1.1 (Chao et al. 2016), tidyverse v. 2.0.0 (Wickham et al. 2019), tmap v. 3.99.9000 (Tennekes 2018), vegan v. 2.6.6.1 (Oksanen et al. 2024)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#sesion-info",
    "href": "posts/2024-06-25-species-diversity/index.html#sesion-info",
    "title": "Species diversity",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.3.2 (2023-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19042)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-07-19\n#&gt;  pandoc   3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version     date (UTC) lib source\n#&gt;    abind               1.4-5       2016-07-21 [1] CRAN (R 4.3.1)\n#&gt;    base64enc           0.1-3       2015-07-28 [1] CRAN (R 4.3.1)\n#&gt;    brew                1.0-10      2023-12-16 [1] CRAN (R 4.3.2)\n#&gt;    bslib               0.6.1       2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;    cachem              1.0.8       2023-05-01 [1] CRAN (R 4.3.2)\n#&gt;    camtrapR          * 2.3.0       2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;    cellranger          1.1.0       2016-07-27 [1] CRAN (R 4.3.2)\n#&gt;    class               7.3-22      2023-05-03 [2] CRAN (R 4.3.2)\n#&gt;    classInt            0.4-10      2023-09-05 [1] CRAN (R 4.3.2)\n#&gt;    cli                 3.6.2       2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    cluster             2.1.4       2022-08-22 [2] CRAN (R 4.3.2)\n#&gt;    codetools           0.2-19      2023-02-01 [2] CRAN (R 4.3.2)\n#&gt;    colorspace          2.1-0       2023-01-23 [1] CRAN (R 4.3.2)\n#&gt;    cols4all            0.7         2024-02-20 [1] Github (mtennekes/cols4all@91856c0)\n#&gt;    crayon              1.5.2       2022-09-29 [1] CRAN (R 4.3.2)\n#&gt;    crosstalk           1.2.1       2023-11-23 [1] CRAN (R 4.3.2)\n#&gt;    curl                5.2.0       2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    data.table          1.15.0      2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    DBI                 1.2.2       2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;    devtools            2.4.5       2022-10-11 [1] CRAN (R 4.3.2)\n#&gt;    dichromat           2.0-0.1     2022-05-02 [1] CRAN (R 4.3.1)\n#&gt;    digest              0.6.34      2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;    dplyr             * 1.1.4       2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    DT                * 0.32        2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;    e1071               1.7-14      2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    eks               * 1.0.5       2024-05-01 [1] CRAN (R 4.3.3)\n#&gt;    elevatr           * 0.99.0      2023-09-12 [1] CRAN (R 4.3.2)\n#&gt;    ellipsis            0.3.2       2021-04-29 [1] CRAN (R 4.3.2)\n#&gt;    evaluate            0.23        2023-11-01 [1] CRAN (R 4.3.2)\n#&gt;    fansi               1.0.6       2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    farver              2.1.1       2022-07-06 [1] CRAN (R 4.3.2)\n#&gt;    fastmap             1.1.1       2023-02-24 [1] CRAN (R 4.3.2)\n#&gt;    forcats           * 1.0.0       2023-01-29 [1] CRAN (R 4.3.2)\n#&gt;    fs                  1.6.3       2023-07-20 [1] CRAN (R 4.3.2)\n#&gt;    generics            0.1.3       2022-07-05 [1] CRAN (R 4.3.2)\n#&gt;    ggforce           * 0.4.2       2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;    ggordiplots       * 0.4.3       2024-01-14 [1] CRAN (R 4.3.3)\n#&gt;    ggplot2           * 3.5.1       2024-04-23 [1] CRAN (R 4.3.3)\n#&gt;    ggrepel             0.9.5       2024-01-10 [1] CRAN (R 4.3.3)\n#&gt;    ggvegan           * 0.1.999     2024-06-28 [1] Github (gavinsimpson/ggvegan@058c08c)\n#&gt;    glue              * 1.7.0       2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    grateful          * 0.2.4       2023-10-22 [1] CRAN (R 4.3.3)\n#&gt;    gridExtra         * 2.3         2017-09-09 [1] CRAN (R 4.3.2)\n#&gt;    gtable              0.3.4       2023-08-21 [1] CRAN (R 4.3.2)\n#&gt;    hms                 1.1.3       2023-03-21 [1] CRAN (R 4.3.2)\n#&gt;    htmltools           0.5.7       2023-11-03 [1] CRAN (R 4.3.2)\n#&gt;    htmlwidgets         1.6.4       2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    httpuv              1.6.14      2024-01-26 [1] CRAN (R 4.3.2)\n#&gt;    httr                1.4.7       2023-08-15 [1] CRAN (R 4.3.2)\n#&gt;    iNEXT             * 3.0.1       2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;    isoband             0.2.7       2022-12-20 [1] CRAN (R 4.3.2)\n#&gt;    jquerylib           0.1.4       2021-04-26 [1] CRAN (R 4.3.2)\n#&gt;    jsonlite            1.8.8       2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    kableExtra        * 1.4.0       2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;    KernSmooth          2.23-22     2023-07-10 [2] CRAN (R 4.3.2)\n#&gt;    knitr             * 1.46        2024-04-06 [1] CRAN (R 4.3.3)\n#&gt;    ks                  1.14.2      2024-01-15 [1] CRAN (R 4.3.3)\n#&gt;    labeling            0.4.3       2023-08-29 [1] CRAN (R 4.3.1)\n#&gt;    later               1.3.2       2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    lattice           * 0.22-5      2023-10-24 [1] CRAN (R 4.3.2)\n#&gt;    lazyeval            0.2.2       2019-03-15 [1] CRAN (R 4.3.2)\n#&gt;    leafem              0.2.3       2023-09-17 [1] CRAN (R 4.3.2)\n#&gt;    leaflegend          1.2.0       2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    leaflet             2.2.1       2023-11-13 [1] CRAN (R 4.3.2)\n#&gt;    leaflet.providers   2.0.0       2023-10-17 [1] CRAN (R 4.3.2)\n#&gt;    leafpop             0.1.0       2021-05-22 [1] CRAN (R 4.3.2)\n#&gt;    leafsync            0.1.0       2019-03-05 [1] CRAN (R 4.3.2)\n#&gt;    lifecycle           1.0.4       2023-11-07 [1] CRAN (R 4.3.2)\n#&gt;    lubridate         * 1.9.3       2023-09-27 [1] CRAN (R 4.3.2)\n#&gt;    lwgeom              0.2-13      2023-05-22 [1] CRAN (R 4.3.2)\n#&gt;    magrittr            2.0.3       2022-03-30 [1] CRAN (R 4.3.2)\n#&gt;    maplegend           0.1.0       2023-10-18 [1] CRAN (R 4.3.3)\n#&gt;    mapsf               0.10.1      2024-05-06 [1] CRAN (R 4.3.3)\n#&gt;    mapview           * 2.11.2      2023-10-13 [1] CRAN (R 4.3.2)\n#&gt;    MASS                7.3-60      2023-05-04 [2] CRAN (R 4.3.2)\n#&gt;    Matrix              1.6-1.1     2023-09-18 [2] CRAN (R 4.3.2)\n#&gt;    mclust              6.1         2024-02-23 [1] CRAN (R 4.3.3)\n#&gt;    MeanRarity        * 0.0.1.0005  2024-07-03 [1] Github (mikeroswell/MeanRarity@a8b518d)\n#&gt;    memoise             2.0.1       2021-11-26 [1] CRAN (R 4.3.2)\n#&gt;    mgcv                1.9-1       2023-12-21 [1] CRAN (R 4.3.3)\n#&gt;    mime                0.12        2021-09-28 [1] CRAN (R 4.3.1)\n#&gt;    miniUI              0.1.1.1     2018-05-18 [1] CRAN (R 4.3.2)\n#&gt;    munsell             0.5.0       2018-06-12 [1] CRAN (R 4.3.2)\n#&gt;    mvtnorm             1.2-4       2023-11-27 [1] CRAN (R 4.3.3)\n#&gt;    nlme                3.1-163     2023-08-09 [2] CRAN (R 4.3.2)\n#&gt;    patchwork         * 1.2.0       2024-01-08 [1] CRAN (R 4.3.3)\n#&gt;    permute           * 0.9-7       2022-01-27 [1] CRAN (R 4.3.3)\n#&gt;    pillar              1.9.0       2023-03-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgbuild            1.4.4       2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    pkgconfig           2.0.3       2019-09-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgload             1.3.4       2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    plotly            * 4.10.4      2024-01-13 [1] CRAN (R 4.3.3)\n#&gt;    plyr              * 1.8.9       2023-10-02 [1] CRAN (R 4.3.2)\n#&gt;    png                 0.1-8       2022-11-29 [1] CRAN (R 4.3.1)\n#&gt;    polyclip            1.10-6      2023-09-27 [1] CRAN (R 4.3.1)\n#&gt;    pracma              2.4.4       2023-11-10 [1] CRAN (R 4.3.3)\n#&gt;    prettyunits         1.2.0       2023-09-24 [1] CRAN (R 4.3.2)\n#&gt;    profvis             0.3.8       2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    progress            1.2.3       2023-12-06 [1] CRAN (R 4.3.3)\n#&gt;    progressr           0.14.0      2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    promises            1.2.1       2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    proxy               0.4-27      2022-06-09 [1] CRAN (R 4.3.2)\n#&gt;    purrr             * 1.0.2       2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    R6                  2.5.1       2021-08-19 [1] CRAN (R 4.3.2)\n#&gt;    raster              3.6-26      2023-10-14 [1] CRAN (R 4.3.2)\n#&gt;    rbibutils           2.2.16      2023-10-25 [1] CRAN (R 4.3.3)\n#&gt;    RColorBrewer        1.1-3       2022-04-03 [1] CRAN (R 4.3.1)\n#&gt;    Rcpp                1.0.12      2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    RcppNumerical       0.6-0       2023-09-06 [1] CRAN (R 4.3.3)\n#&gt;  D RcppParallel        5.1.7       2023-02-27 [1] CRAN (R 4.3.2)\n#&gt;    Rdpack              2.6         2023-11-08 [1] CRAN (R 4.3.3)\n#&gt;    readr             * 2.1.5       2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    readxl            * 1.4.3       2023-07-06 [1] CRAN (R 4.3.2)\n#&gt;    remotes             2.5.0       2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    renv                1.0.7       2024-04-11 [1] CRAN (R 4.3.3)\n#&gt;    reshape2          * 1.4.4       2020-04-09 [1] CRAN (R 4.3.3)\n#&gt;    rlang               1.1.3       2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    rmarkdown           2.27        2024-05-17 [1] CRAN (R 4.3.3)\n#&gt;    rstudioapi          0.16.0      2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;    s2                  1.1.6       2023-12-19 [1] CRAN (R 4.3.2)\n#&gt;    sass                0.4.8       2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    satellite           1.0.5       2024-02-10 [1] CRAN (R 4.3.2)\n#&gt;    scales            * 1.3.0       2023-11-28 [1] CRAN (R 4.3.3)\n#&gt;    secr                4.6.6       2024-02-29 [1] CRAN (R 4.3.3)\n#&gt;    sessioninfo         1.2.2       2021-12-06 [1] CRAN (R 4.3.2)\n#&gt;    sf                * 1.0-15      2023-12-18 [1] CRAN (R 4.3.2)\n#&gt;    shiny               1.8.0       2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    slippymath          0.3.1       2019-06-28 [1] CRAN (R 4.3.2)\n#&gt;    sp                  2.1-3       2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    SpadeR            * 0.1.1       2016-09-06 [1] CRAN (R 4.3.1)\n#&gt;    stars               0.6-4       2023-09-11 [1] CRAN (R 4.3.2)\n#&gt;    stringi             1.8.3       2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    stringr           * 1.5.1       2023-11-14 [1] CRAN (R 4.3.2)\n#&gt;    svglite             2.1.3       2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    systemfonts         1.0.5       2023-10-09 [1] CRAN (R 4.3.2)\n#&gt;    terra               1.7-71      2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    tibble            * 3.2.1       2023-03-20 [1] CRAN (R 4.3.2)\n#&gt;    tidyr             * 1.3.1       2024-01-24 [1] CRAN (R 4.3.2)\n#&gt;    tidyselect          1.2.1       2024-03-11 [1] CRAN (R 4.3.3)\n#&gt;    tidyverse         * 2.0.0       2023-02-22 [1] CRAN (R 4.3.2)\n#&gt;    timechange          0.3.0       2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;    tmap              * 3.99.9000   2024-02-22 [1] Github (r-tmap/tmap@afbf4e8)\n#&gt;    tmaptools           3.1-1       2024-02-20 [1] Github (r-tmap/tmaptools@0c8b0b1)\n#&gt;    tweenr              2.0.3       2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;    tzdb                0.4.0       2023-05-12 [1] CRAN (R 4.3.2)\n#&gt;    units               0.8-5       2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;    urlchecker          1.0.1       2021-11-30 [1] CRAN (R 4.3.2)\n#&gt;    usethis             2.2.3       2024-02-19 [1] CRAN (R 4.3.2)\n#&gt;    utf8                1.2.4       2023-10-22 [1] CRAN (R 4.3.2)\n#&gt;    uuid                1.2-0       2024-01-14 [1] CRAN (R 4.3.2)\n#&gt;    vctrs               0.6.5       2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;    vegan             * 2.6-6.1     2024-05-21 [1] CRAN (R 4.3.3)\n#&gt;    viridisLite         0.4.2       2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    widgetframe         0.3.1       2017-12-20 [1] CRAN (R 4.3.2)\n#&gt;    withr               3.0.0       2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    wk                  0.9.1       2023-11-29 [1] CRAN (R 4.3.2)\n#&gt;    xfun                0.44        2024-05-15 [1] CRAN (R 4.3.3)\n#&gt;    XML                 3.99-0.16.1 2024-01-22 [1] CRAN (R 4.3.2)\n#&gt;    xml2                1.3.6       2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    xtable              1.8-4       2019-04-21 [1] CRAN (R 4.3.2)\n#&gt;    yaml                2.3.8       2023-12-11 [1] CRAN (R 4.3.2)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.3\n#&gt;  [2] C:/Program Files/R/R-4.3.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2024-06-15-visualizing-the-data/index.html",
    "href": "posts/2024-06-15-visualizing-the-data/index.html",
    "title": "Visualizing Cesar Cameratrap Data",
    "section": "",
    "text": "As a simple map and calendar"
  },
  {
    "objectID": "posts/2024-06-15-visualizing-the-data/index.html#load-packages",
    "href": "posts/2024-06-15-visualizing-the-data/index.html#load-packages",
    "title": "Visualizing Cesar Cameratrap Data",
    "section": "Load packages",
    "text": "Load packages\n\nCode\n# library(ggpmthemes)\nlibrary(glue) # Interpreted String Literals\nlibrary(curl) # A Modern and Flexible Web Client for R\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(ggTimeSeries) # calendar\nlibrary(grateful) # Facilitate Citation of R Packages\n\nlibrary(knitr) # A General-Purpose Package for Dynamic Report Generation in R\n# options(kableExtra.auto_format = FALSE)\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(ggforce) # Accelerating 'ggplot2'\n\nsource(\"C:/CodigoR/CameraTrapCesar/R/organiza_datos.R\")"
  },
  {
    "objectID": "posts/2024-06-15-visualizing-the-data/index.html#load-data",
    "href": "posts/2024-06-15-visualizing-the-data/index.html#load-data",
    "title": "Visualizing Cesar Cameratrap Data",
    "section": "Load data",
    "text": "Load data\n\nCode\ndatos &lt;- read_excel(\"C:/CodigoR/CameraTrapCesar/data/CT_Cesar.xlsx\")"
  },
  {
    "objectID": "posts/2024-06-15-visualizing-the-data/index.html#convert-to-sf",
    "href": "posts/2024-06-15-visualizing-the-data/index.html#convert-to-sf",
    "title": "Visualizing Cesar Cameratrap Data",
    "section": "Convert to sf",
    "text": "Convert to sf\n\nCode\ndatos_distinct &lt;- datos |&gt; distinct(Longitude, Latitude, CT, Proyecto)\n\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\ndatos_sf &lt;-  st_as_sf(x = datos_distinct,\n                         coords = c(\"Longitude\", \n                                    \"Latitude\"),\n                         crs = projlatlon)"
  },
  {
    "objectID": "posts/2024-06-15-visualizing-the-data/index.html#plot-all",
    "href": "posts/2024-06-15-visualizing-the-data/index.html#plot-all",
    "title": "Visualizing Cesar Cameratrap Data",
    "section": "Plot all",
    "text": "Plot all\n\nCodemapview(datos_sf, zcol=\"Proyecto\")\n\n\n\n\nCode\n\ncalendario &lt;- function(data=datos, Proyect=Proyecto){\n  dtData&lt;- datos |&gt; filter(Proyecto==Proyect) |&gt; #|&gt; filter(Year==\"2022\")\n  # becerril$Date_Time &lt;- as_date(as.character(data$eventDate))\n      mutate(Date_Time=as.Date(eventDate, \"%d/%m/%Y\")) |&gt; \n      count(Date_Time) |&gt; na.omit()\n  \n  # base plot\n  p1 = ggplot_calendar_heatmap(\n     dtData,\n     'Date_Time',\n     'n',\n     dayBorderSize = 0.1,\n     monthBorderSize = 0.7\n  )\n  \n  # adding some formatting\n  p1 +\n     xlab(NULL) +\n     ylab(NULL) +\n     scale_fill_continuous(low = 'cyan', high = 'red') +\n     facet_wrap(~Year, ncol = 1) # number of columns\n} # end function"
  },
  {
    "objectID": "posts/2024-06-15-visualizing-the-data/index.html#see-camera-calendar-per-proyecto",
    "href": "posts/2024-06-15-visualizing-the-data/index.html#see-camera-calendar-per-proyecto",
    "title": "Visualizing Cesar Cameratrap Data",
    "section": "See camera calendar per Proyecto",
    "text": "See camera calendar per Proyecto\nBecerril\n\nCode\ncalendario(data=datos, Proyect = \"Becerril\")\n\n\n\n\n\n\nCode\n# species &lt;- f.det_history.creator(data=becerril_2022)\n# \n# \n# min(dmy(becerril_2022$Start))\n# max(dmy(becerril_2022$Start))\n# \n# min(dmy(becerril_2022$eventDate))\n\n\nLas camaras en Becerril estuvieron activas año y medio.\nLaPaz_Manaure\n\nCode\ncalendario(data=datos, Proyect = \"LaPaz_Manaure\")\n\n\n\n\n\n\n\nPCF\n\nCodecalendario(data=datos, Proyect = \"PCF\")\n\n\n\n\n\n\n\nCL\n\nCodecalendario(data=datos, Proyect = \"CL\")\n\n\n\n\n\n\n\nEDN\n\nCodecalendario(data=datos, Proyect = \"EDN\")\n\n\n\n\n\n\n\nPB\n\nCodecalendario(data=datos, Proyect = \"PB\" )\n\n\n\n\n\n\n\nEDS\n\nCodecalendario(data=datos, Proyect = \"EDS\" )\n\n\n\n\n\n\n\nCCI\n\nCodecalendario(data=datos, Proyect = \"CCI\" )\n\n\n\n\n\n\n\nMLJ\n\nCodecalendario(data=datos, Proyect = \"MLJ\" )\n\n\n\n\n\n\n\nMCAL\n\nCodecalendario(data=datos, Proyect = \"MCAL\" )"
  },
  {
    "objectID": "posts/2024-06-15-visualizing-the-data/index.html#package-citation",
    "href": "posts/2024-06-15-visualizing-the-data/index.html#package-citation",
    "title": "Visualizing Cesar Cameratrap Data",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.3.2 (R Core Team 2023) and the following R packages: curl v. 5.2.0 (Ooms 2023), devtools v. 2.4.5 (Wickham et al. 2022), ggforce v. 0.4.2 (Pedersen 2024a), ggTimeSeries v. 1.0.2 (Kothari 2022), glue v. 1.7.0 (Hester and Bryan 2024), kableExtra v. 1.4.0 (Zhu 2024), knitr v. 1.46 (Xie 2014, 2015, 2024), mapview v. 2.11.2 (Appelhans et al. 2023), patchwork v. 1.2.0 (Pedersen 2024b), quarto v. 1.4 (Allaire and Dervieux 2024), rmarkdown v. 2.27 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), sf v. 1.0.15 (Pebesma 2018; Pebesma and Bivand 2023), styler v. 1.10.3 (Müller and Walthert 2024), tidyverse v. 2.0.0 (Wickham et al. 2019)."
  },
  {
    "objectID": "posts/2024-06-15-visualizing-the-data/index.html#sesion-info",
    "href": "posts/2024-06-15-visualizing-the-data/index.html#sesion-info",
    "title": "Visualizing Cesar Cameratrap Data",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.3.2 (2023-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19042)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-06-23\n#&gt;  pandoc   3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  package           * version date (UTC) lib source\n#&gt;  base64enc           0.1-3   2015-07-28 [1] CRAN (R 4.3.1)\n#&gt;  brew                1.0-10  2023-12-16 [1] CRAN (R 4.3.2)\n#&gt;  cachem              1.0.8   2023-05-01 [1] CRAN (R 4.3.2)\n#&gt;  cellranger          1.1.0   2016-07-27 [1] CRAN (R 4.3.2)\n#&gt;  class               7.3-22  2023-05-03 [2] CRAN (R 4.3.2)\n#&gt;  classInt            0.4-10  2023-09-05 [1] CRAN (R 4.3.2)\n#&gt;  cli                 3.6.2   2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;  codetools           0.2-19  2023-02-01 [2] CRAN (R 4.3.2)\n#&gt;  colorspace          2.1-0   2023-01-23 [1] CRAN (R 4.3.2)\n#&gt;  crosstalk           1.2.1   2023-11-23 [1] CRAN (R 4.3.2)\n#&gt;  curl              * 5.2.0   2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  data.table          1.15.0  2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;  DBI                 1.2.2   2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;  devtools            2.4.5   2022-10-11 [1] CRAN (R 4.3.2)\n#&gt;  digest              0.6.34  2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;  dplyr             * 1.1.4   2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;  e1071               1.7-14  2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;  ellipsis            0.3.2   2021-04-29 [1] CRAN (R 4.3.2)\n#&gt;  evaluate            0.23    2023-11-01 [1] CRAN (R 4.3.2)\n#&gt;  fansi               1.0.6   2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  farver              2.1.1   2022-07-06 [1] CRAN (R 4.3.2)\n#&gt;  fastmap             1.1.1   2023-02-24 [1] CRAN (R 4.3.2)\n#&gt;  forcats           * 1.0.0   2023-01-29 [1] CRAN (R 4.3.2)\n#&gt;  fs                  1.6.3   2023-07-20 [1] CRAN (R 4.3.2)\n#&gt;  generics            0.1.3   2022-07-05 [1] CRAN (R 4.3.2)\n#&gt;  ggforce           * 0.4.2   2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;  ggplot2           * 3.5.1   2024-04-23 [1] CRAN (R 4.3.3)\n#&gt;  ggTimeSeries      * 1.0.2   2022-01-23 [1] CRAN (R 4.3.3)\n#&gt;  glue              * 1.7.0   2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;  grateful          * 0.2.4   2023-10-22 [1] CRAN (R 4.3.3)\n#&gt;  gtable              0.3.4   2023-08-21 [1] CRAN (R 4.3.2)\n#&gt;  hms                 1.1.3   2023-03-21 [1] CRAN (R 4.3.2)\n#&gt;  htmltools           0.5.7   2023-11-03 [1] CRAN (R 4.3.2)\n#&gt;  htmlwidgets         1.6.4   2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;  httpuv              1.6.14  2024-01-26 [1] CRAN (R 4.3.2)\n#&gt;  jquerylib           0.1.4   2021-04-26 [1] CRAN (R 4.3.2)\n#&gt;  jsonlite            1.8.8   2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;  kableExtra        * 1.4.0   2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;  KernSmooth          2.23-22 2023-07-10 [2] CRAN (R 4.3.2)\n#&gt;  knitr             * 1.46    2024-04-06 [1] CRAN (R 4.3.3)\n#&gt;  labeling            0.4.3   2023-08-29 [1] CRAN (R 4.3.1)\n#&gt;  later               1.3.2   2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;  lattice             0.22-5  2023-10-24 [1] CRAN (R 4.3.2)\n#&gt;  leafem              0.2.3   2023-09-17 [1] CRAN (R 4.3.2)\n#&gt;  leaflet             2.2.1   2023-11-13 [1] CRAN (R 4.3.2)\n#&gt;  leaflet.providers   2.0.0   2023-10-17 [1] CRAN (R 4.3.2)\n#&gt;  leafpop             0.1.0   2021-05-22 [1] CRAN (R 4.3.2)\n#&gt;  lifecycle           1.0.4   2023-11-07 [1] CRAN (R 4.3.2)\n#&gt;  lubridate         * 1.9.3   2023-09-27 [1] CRAN (R 4.3.2)\n#&gt;  magrittr            2.0.3   2022-03-30 [1] CRAN (R 4.3.2)\n#&gt;  mapview           * 2.11.2  2023-10-13 [1] CRAN (R 4.3.2)\n#&gt;  MASS                7.3-60  2023-05-04 [2] CRAN (R 4.3.2)\n#&gt;  memoise             2.0.1   2021-11-26 [1] CRAN (R 4.3.2)\n#&gt;  mime                0.12    2021-09-28 [1] CRAN (R 4.3.1)\n#&gt;  miniUI              0.1.1.1 2018-05-18 [1] CRAN (R 4.3.2)\n#&gt;  munsell             0.5.0   2018-06-12 [1] CRAN (R 4.3.2)\n#&gt;  patchwork         * 1.2.0   2024-01-08 [1] CRAN (R 4.3.3)\n#&gt;  pillar              1.9.0   2023-03-22 [1] CRAN (R 4.3.2)\n#&gt;  pkgbuild            1.4.4   2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;  pkgconfig           2.0.3   2019-09-22 [1] CRAN (R 4.3.2)\n#&gt;  pkgload             1.3.4   2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;  png                 0.1-8   2022-11-29 [1] CRAN (R 4.3.1)\n#&gt;  polyclip            1.10-6  2023-09-27 [1] CRAN (R 4.3.1)\n#&gt;  processx            3.8.3   2023-12-10 [1] CRAN (R 4.3.2)\n#&gt;  profvis             0.3.8   2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;  promises            1.2.1   2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;  proxy               0.4-27  2022-06-09 [1] CRAN (R 4.3.2)\n#&gt;  ps                  1.7.6   2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;  purrr             * 1.0.2   2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;  quarto            * 1.4     2024-03-06 [1] CRAN (R 4.3.3)\n#&gt;  R.cache             0.16.0  2022-07-21 [1] CRAN (R 4.3.3)\n#&gt;  R.methodsS3         1.8.2   2022-06-13 [1] CRAN (R 4.3.3)\n#&gt;  R.oo                1.26.0  2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;  R.utils             2.12.3  2023-11-18 [1] CRAN (R 4.3.3)\n#&gt;  R6                  2.5.1   2021-08-19 [1] CRAN (R 4.3.2)\n#&gt;  raster              3.6-26  2023-10-14 [1] CRAN (R 4.3.2)\n#&gt;  Rcpp                1.0.12  2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;  readr             * 2.1.5   2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  readxl            * 1.4.3   2023-07-06 [1] CRAN (R 4.3.2)\n#&gt;  remotes             2.5.0   2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;  renv                1.0.3   2023-09-19 [1] CRAN (R 4.3.2)\n#&gt;  rlang               1.1.3   2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;  rmarkdown           2.27    2024-05-17 [1] CRAN (R 4.3.3)\n#&gt;  rstudioapi          0.16.0  2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;  satellite           1.0.5   2024-02-10 [1] CRAN (R 4.3.2)\n#&gt;  scales              1.3.0   2023-11-28 [1] CRAN (R 4.3.3)\n#&gt;  sessioninfo         1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n#&gt;  sf                * 1.0-15  2023-12-18 [1] CRAN (R 4.3.2)\n#&gt;  shiny               1.8.0   2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;  sp                  2.1-3   2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;  stringi             1.8.3   2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;  stringr           * 1.5.1   2023-11-14 [1] CRAN (R 4.3.2)\n#&gt;  styler            * 1.10.3  2024-04-07 [1] CRAN (R 4.3.3)\n#&gt;  svglite             2.1.3   2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;  systemfonts         1.0.5   2023-10-09 [1] CRAN (R 4.3.2)\n#&gt;  terra               1.7-71  2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;  tibble            * 3.2.1   2023-03-20 [1] CRAN (R 4.3.2)\n#&gt;  tidyr             * 1.3.1   2024-01-24 [1] CRAN (R 4.3.2)\n#&gt;  tidyselect          1.2.1   2024-03-11 [1] CRAN (R 4.3.3)\n#&gt;  tidyverse         * 2.0.0   2023-02-22 [1] CRAN (R 4.3.2)\n#&gt;  timechange          0.3.0   2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;  tweenr              2.0.3   2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;  tzdb                0.4.0   2023-05-12 [1] CRAN (R 4.3.2)\n#&gt;  units               0.8-5   2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;  urlchecker          1.0.1   2021-11-30 [1] CRAN (R 4.3.2)\n#&gt;  usethis             2.2.3   2024-02-19 [1] CRAN (R 4.3.2)\n#&gt;  utf8                1.2.4   2023-10-22 [1] CRAN (R 4.3.2)\n#&gt;  uuid                1.2-0   2024-01-14 [1] CRAN (R 4.3.2)\n#&gt;  vctrs               0.6.5   2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;  viridisLite         0.4.2   2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;  withr               3.0.0   2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;  xfun                0.44    2024-05-15 [1] CRAN (R 4.3.3)\n#&gt;  xml2                1.3.6   2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;  xtable              1.8-4   2019-04-21 [1] CRAN (R 4.3.2)\n#&gt;  yaml                2.3.8   2023-12-11 [1] CRAN (R 4.3.2)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.3\n#&gt;  [2] C:/Program Files/R/R-4.3.2/library\n#&gt; \n#&gt; ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "diversity.html",
    "href": "diversity.html",
    "title": "Diversity",
    "section": "",
    "text": "Mammalian diversity"
  },
  {
    "objectID": "diversity.html#diversity",
    "href": "diversity.html#diversity",
    "title": "Diversity",
    "section": "",
    "text": "Mammalian diversity"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, my name is Diego Lizcano. As a wildlife ecologist, the R statistical computing language is an important part of my daily workflow. I mainly use R for data analysis, modelling, and data manipulation."
  },
  {
    "objectID": "about.html#current-research",
    "href": "about.html#current-research",
    "title": "About",
    "section": "Current research",
    "text": "Current research\nI am currently working as a data annalist for WCS Andes-Amazon-Orinoco Region\nSome research I am currently working on:\n\nJaguar detection and occupancy modeling\nWCS Strongholds analysis\n\nI am always looking for new collaborations. Do not hesitate to contact me!"
  },
  {
    "objectID": "about.html#scientific-interests-no-specific-order",
    "href": "about.html#scientific-interests-no-specific-order",
    "title": "About",
    "section": "Scientific interests (no specific order)",
    "text": "Scientific interests (no specific order)\n\nMammal ecology\nCamera trap data analysis\nAcoustics\nEcological modeling"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Camera Trap Blog",
    "section": "",
    "text": "“Stacked” Models\n\n\n\nR\n\n\noccupancy\n\n\nubms\n\n\n\nSuppose you have a dataset of repeated detections/non detections or counts that are collected over several years, but do not want to fit a dynamic model\n\n\n\nDiego J. Lizcano\n\n\nJul 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA multi-species (species interactions) occupancy model\n\n\n\nR\n\n\noccupancy\n\n\ntapir\n\n\n\nA mountain tapir, puma and andean bear interacting model\n\n\n\nDiego J. Lizcano\n\n\nJul 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies diversity\n\n\n\nR\n\n\ndiversity\n\n\naccumulation\n\n\neffort\n\n\n\nusing packages vegan and iNext to analyze diversity on camera trap data\n\n\n\nDiego J. Lizcano\n\n\nJun 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultispecies occupancy model\n\n\n\nR\n\n\noccupancy\n\n\nJAGS\n\n\ncamtrapR\n\n\n\nMultispecies occupancy models combines information from multiple species to estimate both individual and community-level responses to environmental variables\n\n\n\nDiego J. Lizcano\n\n\nJun 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA calendar to visualize camera trap data\n\n\n\nR\n\n\ncalendar\n\n\nmap\n\n\n\nUsing several camera trap data campaingns from Galictis Biodiversidad\n\n\n\nDiego J. Lizcano\n\n\nJun 15, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html",
    "title": "Multispecies occupancy model",
    "section": "",
    "text": "CamtrapR is making very easy to make Multispecies occupancy models from camera trap data. Here one example."
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#using-camtrapr",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#using-camtrapr",
    "title": "Multispecies occupancy model",
    "section": "",
    "text": "CamtrapR is making very easy to make Multispecies occupancy models from camera trap data. Here one example."
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#load-packages",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#load-packages",
    "title": "Multispecies occupancy model",
    "section": "Load packages",
    "text": "Load packages\nFirst we load some packages\n\nCode\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(terra) # Spatial Data Analysis\nlibrary(elevatr) # Access Elevation Data from Various APIs\n\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses \nlibrary(rjags) # Bayesian Graphical Models using MCMC \nlibrary(nimble) # MCMC, Particle Filtering, and Programmable Hierarchical Modeling \n\nlibrary(bayesplot) # Plotting for Bayesian Models # Plotting for Bayesian Models \nlibrary(SpadeR) # Species-Richness Prediction and Diversity Estimation with R \nlibrary(tictoc) # Functions for Timing R Scripts, as Well as Implementations of \"Stack\" and \"StackList\" Structures \nlibrary(beepr) # Easily Play Notification Sounds on any Platform \nlibrary(snowfall) # Easier Cluster Computing (Based on 'snow')\nlibrary(bayesplot) # Plotting for Bayesian Models # Plotting for Bayesian Models \n\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'"
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#load-data",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#load-data",
    "title": "Multispecies occupancy model",
    "section": "Load data",
    "text": "Load data\nThe data set is i a excel file so we use read_excel function to load it.\n\nCode\ndatos &lt;- read_excel(\"C:/CodigoR/CameraTrapCesar/data/CT_Cesar.xlsx\")"
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#selecting-just-ct_becerril-2021",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#selecting-just-ct_becerril-2021",
    "title": "Multispecies occupancy model",
    "section": "Selecting Just CT_Becerril 2021",
    "text": "Selecting Just CT_Becerril 2021\nTo this example I selected just one place one year, Becerril 2021. Sometimes we need to make unique codes per camera and cameraOperation table.\n\nCode# make a new column Station\n# datos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"CT_LaPaz_Manaure\") |&gt; unite (\"Station\", ProyectoEtapa:Salida:CT, sep = \"-\")\n\n# fix dates\ndatos$Start &lt;- as.Date(datos$Start, \"%d/%m/%Y\")\ndatos$End &lt;- as.Date(datos$End, \"%d/%m/%Y\")\ndatos$eventDate &lt;- as.Date(datos$eventDate, \"%d/%m/%Y\")\ndatos$eventDateTime &lt;- ymd_hms(paste(datos$eventDate, \" \",\n                              datos$eventTime, \":00\", sep=\"\"))\n\n# filter Becerril\ndatos_PCF &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_Becerril\") |&gt; mutate (Station=IdGeo)\n\n# filter 2021 and make uniques\nCToperation  &lt;- datos_PCF |&gt; filter(Year==2021) |&gt; group_by(Station) |&gt; \n                           mutate(minStart=min(Start), maxEnd=max(End)) |&gt; distinct(Longitude, Latitude, minStart, maxEnd, Year) |&gt; ungroup()"
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#generating-cameraoperation-and-making-detection-histories-for-all-the-species.",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#generating-cameraoperation-and-making-detection-histories-for-all-the-species.",
    "title": "Multispecies occupancy model",
    "section": "Generating cameraOperation and making detection histories for all the species.",
    "text": "Generating cameraOperation and making detection histories for all the species.\nThe package CamtrapR has the function ‘cameraOperation’ which makes a table of cameras (stations) and dates (setup, puck-up), this table is key to generate the detection histories using the function ‘detectionHistory’ in the next step.\n\nCode# Generamos la matríz de operación de las cámaras\n\ncamop &lt;- cameraOperation(CTtable= CToperation, # Tabla de operación\n                         stationCol= \"Station\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\") #, # Formato de las fechas\n                         #cameraCol=\"CT\")\n                         # sessionCol= \"Year\")\n\n# Generar las historias de detección ---------------------------------------\n## remove plroblem species\nind &lt;- which(datos_PCF$Species==\"Marmosa sp.\")\ndatos_PCF &lt;- datos_PCF[-ind,]\n\nDetHist_list &lt;- lapply(unique(datos_PCF$Species), FUN = function(x) {\n  detectionHistory(\n    recordTable         = datos_PCF, # Tabla de registros\n    camOp                = camop, # Matriz de operación de cámaras\n    stationCol           = \"Station\",\n    speciesCol           = \"Species\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 10, # Colapso de las historias a 10 ías\n    day1                 = \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = TRUE,\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(DetHist_list) &lt;- unique(datos_PCF$Species)\n\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\nylist &lt;- lapply(DetHist_list, FUN = function(x) x$detection_history)"
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#preparing-spatial-covariates",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#preparing-spatial-covariates",
    "title": "Multispecies occupancy model",
    "section": "Preparing spatial covariates",
    "text": "Preparing spatial covariates\nmake sf object, get elevation and derive terrain (slope and roughness).\nWe use the lat and long to make a sf object with the camera locations.\n\nCode\n# make sf object\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\ndatos_PCF_sf &lt;-  st_as_sf(x = CToperation,\n                         coords = c(\"Longitude\", \n                                    \"Latitude\"),\n                         crs = projlatlon)\n\n# covariates\nelev &lt;- rast(get_elev_raster(datos_PCF_sf, z=14)) # get raster map\nslope &lt;- terrain(elev, v=\"slope\", neighbors=8, unit=\"degrees\")  \n# also slope, aspect, TPI, TRI, TRIriley, TRIrmsd, roughness, flowdir \nrough &lt;- terrain(elev, v=\"roughness\", neighbors=8, unit=\"degrees\")  \n# landcover &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/LandCover_Type_Yearly_500m_v61/LC1/MCD12Q1_LC1_2021_001.tif\") \n\ncos_rast &lt;- c(elev,slope, rough) # make a stack\n# rename stack\nnames(cos_rast) &lt;- c(\"elev\", \"slope\", \"rough\")\n\nplot(cos_rast)\n\n\n\n\n\n\nCode\nmapview(elev) + mapview(datos_PCF_sf)\n\n\n\n\n\nExtract values from the rasters\nWe use the camera locations to extract the raster (elevations, slope and roughness) information.\n\nCode\n\n# extract\ncovs &lt;- terra::extract(cos_rast, datos_PCF_sf)\n# landcov &lt;- terra::extract(landcover, datos_PCF_sf)"
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#multispecies-occupancy-model",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#multispecies-occupancy-model",
    "title": "Multispecies occupancy model",
    "section": "Multispecies occupancy model",
    "text": "Multispecies occupancy model\nPreparing the model\nNow we have all ready to make our model. We put the data of the species, and the covariates in a list.\n\nCode\n# check consistancy equal mumner of spatial covariates and rows in data\n# identical(nrow(ylist[[1]]), nrow(covars)) \n\n# Base de datos para los análisis -----------------------------------------\n\ndata_list &lt;- list(ylist    = ylist, # Historias de detección\n                  siteCovs = covs[,2:4], #covars, # Covariables de sitio\n                  obsCovs  = list(effort = DetHist_list[[1]]$effort))  # agregamos el esfuerzo de muestreo como covariable de observación\n\n# 3. 1 Modelo multi-especie  -----------------------------------------\n\n# Se creará un txt temporal donde estarán las especificaciones del modelo en enfoque Bayesiano\nmodelfile &lt;- (fileext = \"modoccu.txt\")\n\n# Usaremos la función ` communityModel`\n\n\nGenerating the model\nWe use the function ‘communityModel’ to setup our model, selecting which covariates is for detection or occupancy and if it is fixed or random effect.\n\nCode\n\n# Generemos el modelo\ncomu_model &lt;- communityModel(data_list, # la lista de datos\n                             occuCovs = list(ranef=c(\"rough\", \"elev\")), # ranef La covariables de sitio\n                             detCovsObservation = list(fixed = \"effort\"), #Covariables de observación\n                             intercepts = list(det = \"ranef\", occu = \"ranef\"),\n                             augmentation = c(full = 30),# Número aumentado de especies\n                             modelFile = \"modelfile\")\n\nsummary(comu_model)\n#&gt; commOccu object for community occupancy model (in JAGS)\n#&gt; \n#&gt; 30 species,  23 stations,  39 occasions\n#&gt; 530 occasions with effort\n#&gt; Number of detections (by species): 0 - 164 \n#&gt; \n#&gt; Available site covariates:\n#&gt;  elev, slope, rough \n#&gt; \n#&gt; Used site covariates:\n#&gt;  elev, rough \n#&gt; \n#&gt; Available site-occasion covariates:\n#&gt;  effort\n\n\nRunning the model\n\nGo for a coffe and enjoy while you wait for the signal beep.\n\n\nCode# Running the model\n\nfit.commu &lt;- fit(comu_model,\n                 n.iter = 1200,\n                 n.burnin = 200,\n                 thin = 2,\n                 chains = 3,\n                 cores = 3,\n                 quiet = T\n);beep(sound = 4)\n\n# save the results to not run again\nsave(fit.commu, file=\"C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/DR_result.R\") # guardamos los resultados para no correr de nuevo\n\n\nSee the results\nAs a table\n\nCode\n# Resultados --------------------------------------------------------------\n\n# Extraemos lo tabla de valores estimados\nmodresult &lt;- as.data.frame(summary(fit.commu)[[\"statistics\"]])\n# View(modresult)\nDT::datatable(round(summary(fit.commu)$statistics, 3))\n\n\n\n\n\nAs graphs\n\nCode# Gráficos de predicción y de coeficientes\n\n# Otra gran ventaja de CamtrapR es que permite gráficar de manera muy sencilla la predicción posterior del modelo. Veamos que pasa con la ocupación de cada especie\n\nplot_effects(comu_model,\n              fit.commu,\n              submodel = \"det\")\n#&gt; $effort\n\n\n\n\n\n\nCode\nplot_coef(comu_model,\n           fit.commu,\n           submodel = \"state\",\n           combine = T)\n\n\n\n\n\n\nCode\nplot_effects(comu_model, # El modelo\n             fit.commu, # El objeto ajustado\n             submodel = \"state\",\n             response = \"occupancy\") # el parámetro de interés\n#&gt; $rough\n\n\n\n\n\n\n#&gt; \n#&gt; $elev\n\n\n\n\n\n\nCode\n# Ahora con los coeficientes estimados\n\n# plot_coef(comu_model,\n#           fit.commu,\n#           submodel = \"state\")\n\n\nSee the species richness\nNotice the estimated species richness, Mean, SD, and SE is: 29.0866667, 1.1764686, 0.0303763, 0.0529884\n\nCode\n# Valor de Ntotal, es decir del número de especies estimado\n(riqueza_est &lt;- modresult[\"Ntotal\",])\n#&gt;            Mean       SD   Naive SE Time-series SE\n#&gt; Ntotal 29.08667 1.176469 0.03037629     0.05298842\n\n# Veamos el gráfico de la distribución posterior\nmcmc_areas(fit.commu, # objeto jags\n           pars= \"Ntotal\", # parámetro de interés\n           point_est = \"mean\",\n           prob = 0.95) # intervalos de credibilidad\n\n\n\n\n\n\nCode\n\n# La estimación no se ve muy bien, hay que verificar los trace plots\n\nmcmc_trace(fit.commu, pars = \"Ntotal\")\n\n\n\n\n\n\nCode\n# Debería verse como un cesped, muy probablemente necesitamos muchas mas iteraciones para este modelo\n\ngd &lt;- as.data.frame(gelman.diag(fit.commu,  multivariate = FALSE)[[1]])\nDT::datatable(gd[\"Ntotal\",])\n\n\n\n\nCode\n#La prueba de Gelman-Rubin debe ser ~1 para considerar que hay buena convergencia. Aunque tenemos un valor bueno para Ntotal, hay varios valores de omega con NA, eso puede estar causando los problemas.\n\n\nComparing species richness with Chao\n\nCode\n# Comparando con métodos clásicos -----------------------------------------\n\n\n# Formatear los datos a un vector de frecuencia\ninci_Chao &lt;- ylist %&gt;%  # historias de captura\n  map(~rowSums(.,na.rm = T)) %&gt;% # sumo las detecciones en cada sitio\n  reduce(cbind) %&gt;% # unimos las listas\n  t() %&gt;% # trasponer la tabla\n  as_tibble() %&gt;% #formato tibble\n  mutate_if(is.numeric,~(.&gt;=1)*1) %&gt;%  #como es incidencia, formateo a 1 y 0\n  rowSums() %&gt;%  # ahora si la suma de las incidencias en cada sitio\n  as_tibble() %&gt;% \n add_row(value= dim(CToperation)[1], .before = 1) %&gt;%  # el formato requiere que el primer valor sea el número de sitios\n  as.matrix() # Requiere formato de matriz\n\n\n\n# Calcular la riqueza con estimadores no paramétricos\nchao_sp &lt;- ChaoSpecies(inci_Chao, datatype = \"incidence_freq\")\n\nNIChao &lt;- chao_sp$Species_table[4,c(1,3,4)] # Extraer valores de IChao\n\nNocu&lt;- mcmc_intervals(fit.commu, pars = \"Ntotal\", prob = 0.95,prob_outer = 0.99, point_est = \"mean\")[[1]] %&gt;%  # Extraer valores del bayes plot\n  select(m,l,h) %&gt;% # Seleccionar columnas\n  rename(\"Estimate\"= m, # Renombrarlas\n         \"95%Lower\"= l,\n         \"95%Upper\"= h)\n\n\n# Unir en un solo dataframe\nNplotdata &lt;- rbind(IChao=NIChao, BayesModel=Nocu) %&gt;% \n  as.data.frame() %&gt;% \n  rownames_to_column(.)\n\n# Gráfico para comparar la riqueza estimada\nplotN &lt;- ggplot(Nplotdata, aes(x=rowname, y= Estimate, col=rowname))+\n  geom_point(aes(shape=rowname),size=3)+\n  geom_errorbar(aes(ymin= `95%Lower`, ymax= `95%Upper`), width=.3, size=1)+\n  labs(x=\"Estimador de riqueza\",y=\"Estimated species number\", title = \"Richness estimation by Bayesian model vs Chao\")+\n  theme_classic()+\n  theme(text=element_text(size = 13), plot.title = element_text(hjust= 0.5), legend.position = \"none\")\n\nplotN\n\n\n\n\n\n\n\nSpatial prediction\nOccupancy\nJust like magic camtrapR allow us to make predictions using a raster object, obtaining maps of richness and occupancy per species.\n\nBe aware if you used a large number in interations for better fit in the Running model part, you can get the Error: cannot locate a vector size 467.8 Gb\n\nHere we are plotting only the first 9 species for space reasons.\n\nCode# species occupancy estimates\npredictions_psi &lt;- camtrapR::predict(object    = comu_model, \n                             mcmc.list = fit.commu,\n                             x         = cos_rast,\n                             type      = \"psi\",\n                             draws     = 1000)\n\n# save the results to not run again\nwriteRaster(predictions_psi[[1]], file=\"C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_psi.tif\", overwrite=TRUE) # guardamos los resultados para no correr de nuevo\n\n\n\n# Plot occupancy\nplot(predictions_psi$mean, zlim = c(0,1), \n       col = hcl.colors(100), \n       maxnl = 9,   # plotting only the first 9 species for space reasons\n       asp = 1)  \n  \n\n\n\n\n\n\n\n\n\n\nSpecies Richness\nNotice this prediction can be also very RAM consuming…\n\nCode# species richness estimates\npredictions_rich &lt;- predict(object   = comu_model, \n                             mcmc.list = fit.commu,\n                             x         = cos_rast,\n                             type      = \"richness\",\n                            draws     = 1000)\n\n# save the results to not run again\nwriteRaster(predictions_rich, file=\"C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_rich.tif\") # guardamos los resultados para no correr de nuevo\n\n\n# plot richness\nplot(predictions_rich, col = hcl.colors(100), asp = 1)\n  \n\n\n\n\n\n\n\n\n\n\nAn additional option to avoid the out of memory issue is to aggregate the pixel size in the raster object before making the prediction.\n\nCodeagregated_raster &lt;- aggregate(old_raster, fact = 10) # aggregate 10 pixels in one"
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#package-citation",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#package-citation",
    "title": "Multispecies occupancy model",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\n#&gt; WARNING: One or more problems were discovered while enumerating dependencies.\n#&gt; \n#&gt; # C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/DR_result.R --------\n#&gt; Error: invalid multibyte character in parser (&lt;input&gt;:4:4)\n#&gt; \n#&gt; # C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_psi.R --------\n#&gt; Error: invalid multibyte character in parser (&lt;input&gt;:11:2)\n#&gt; \n#&gt; Please see `?renv::dependencies` for more information.\npkgs\n\nWe used R version 4.3.2 (R Core Team 2023) and the following R packages: bayesplot v. 1.11.1 (Gabry et al. 2019; Gabry and Mahr 2024), beepr v. 1.3 (Bååth 2018), camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.32 (Xie, Cheng, and Tan 2024), elevatr v. 0.99.0 (Hollister et al. 2023), kableExtra v. 1.4.0 (Zhu 2024), mapview v. 2.11.2 (Appelhans et al. 2023), nimble v. 1.1.0 (de Valpine et al. 2017, 2024b, 2024a), patchwork v. 1.2.0 (Pedersen 2024), quarto v. 1.4 (Allaire and Dervieux 2024), rjags v. 4.15 (Plummer 2023), rmarkdown v. 2.27 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), sf v. 1.0.15 (Pebesma 2018; Pebesma and Bivand 2023), snowfall v. 1.84.6.3 (Knaus 2023), SpadeR v. 0.1.1 (Chao et al. 2016), styler v. 1.10.3 (Müller and Walthert 2024), terra v. 1.7.71 (Hijmans 2024), tictoc v. 1.2.1 (Izrailev 2024), tidyverse v. 2.0.0 (Wickham et al. 2019)."
  },
  {
    "objectID": "posts/2024-06-20-multispecies-occupancy/index.html#sesion-info",
    "href": "posts/2024-06-20-multispecies-occupancy/index.html#sesion-info",
    "title": "Multispecies occupancy model",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.3.2 (2023-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19042)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-07-04\n#&gt;  pandoc   3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version    date (UTC) lib source\n#&gt;    abind               1.4-5      2016-07-21 [1] CRAN (R 4.3.1)\n#&gt;    audio               0.1-11     2023-08-18 [1] CRAN (R 4.3.1)\n#&gt;    backports           1.4.1      2021-12-13 [1] CRAN (R 4.3.1)\n#&gt;    base64enc           0.1-3      2015-07-28 [1] CRAN (R 4.3.1)\n#&gt;    bayesplot         * 1.11.1     2024-02-15 [1] CRAN (R 4.3.3)\n#&gt;    beepr             * 1.3        2018-06-04 [1] CRAN (R 4.3.3)\n#&gt;    brew                1.0-10     2023-12-16 [1] CRAN (R 4.3.2)\n#&gt;    bslib               0.6.1      2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;    cachem              1.0.8      2023-05-01 [1] CRAN (R 4.3.2)\n#&gt;    camtrapR          * 2.3.0      2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;    cellranger          1.1.0      2016-07-27 [1] CRAN (R 4.3.2)\n#&gt;    checkmate           2.3.1      2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    class               7.3-22     2023-05-03 [2] CRAN (R 4.3.2)\n#&gt;    classInt            0.4-10     2023-09-05 [1] CRAN (R 4.3.2)\n#&gt;    cli                 3.6.2      2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    coda              * 0.19-4.1   2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    codetools           0.2-19     2023-02-01 [2] CRAN (R 4.3.2)\n#&gt;    colorspace          2.1-0      2023-01-23 [1] CRAN (R 4.3.2)\n#&gt;    crayon              1.5.2      2022-09-29 [1] CRAN (R 4.3.2)\n#&gt;    crosstalk           1.2.1      2023-11-23 [1] CRAN (R 4.3.2)\n#&gt;    curl                5.2.0      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    data.table          1.15.0     2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    DBI                 1.2.2      2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;    devtools            2.4.5      2022-10-11 [1] CRAN (R 4.3.2)\n#&gt;    digest              0.6.34     2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;    distributional      0.4.0      2024-02-07 [1] CRAN (R 4.3.2)\n#&gt;    dplyr             * 1.1.4      2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    DT                  0.32       2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;    e1071               1.7-14     2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    elevatr           * 0.99.0     2023-09-12 [1] CRAN (R 4.3.2)\n#&gt;    ellipsis            0.3.2      2021-04-29 [1] CRAN (R 4.3.2)\n#&gt;    evaluate            0.23       2023-11-01 [1] CRAN (R 4.3.2)\n#&gt;    fansi               1.0.6      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    farver              2.1.1      2022-07-06 [1] CRAN (R 4.3.2)\n#&gt;    fastmap             1.1.1      2023-02-24 [1] CRAN (R 4.3.2)\n#&gt;    forcats           * 1.0.0      2023-01-29 [1] CRAN (R 4.3.2)\n#&gt;    fs                  1.6.3      2023-07-20 [1] CRAN (R 4.3.2)\n#&gt;    generics            0.1.3      2022-07-05 [1] CRAN (R 4.3.2)\n#&gt;    ggplot2           * 3.5.1      2024-04-23 [1] CRAN (R 4.3.3)\n#&gt;    ggridges            0.5.6      2024-01-23 [1] CRAN (R 4.3.3)\n#&gt;    glue                1.7.0      2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    grateful          * 0.2.4      2023-10-22 [1] CRAN (R 4.3.3)\n#&gt;    gtable              0.3.4      2023-08-21 [1] CRAN (R 4.3.2)\n#&gt;    hms                 1.1.3      2023-03-21 [1] CRAN (R 4.3.2)\n#&gt;    htmltools           0.5.7      2023-11-03 [1] CRAN (R 4.3.2)\n#&gt;    htmlwidgets         1.6.4      2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    httpuv              1.6.14     2024-01-26 [1] CRAN (R 4.3.2)\n#&gt;    httr                1.4.7      2023-08-15 [1] CRAN (R 4.3.2)\n#&gt;    igraph              2.0.2      2024-02-17 [1] CRAN (R 4.3.2)\n#&gt;    jquerylib           0.1.4      2021-04-26 [1] CRAN (R 4.3.2)\n#&gt;    jsonlite            1.8.8      2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    kableExtra        * 1.4.0      2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;    KernSmooth          2.23-22    2023-07-10 [2] CRAN (R 4.3.2)\n#&gt;    knitr               1.46       2024-04-06 [1] CRAN (R 4.3.3)\n#&gt;    labeling            0.4.3      2023-08-29 [1] CRAN (R 4.3.1)\n#&gt;    later               1.3.2      2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    lattice             0.22-5     2023-10-24 [1] CRAN (R 4.3.2)\n#&gt;    leafem              0.2.3      2023-09-17 [1] CRAN (R 4.3.2)\n#&gt;    leaflet             2.2.1      2023-11-13 [1] CRAN (R 4.3.2)\n#&gt;    leaflet.providers   2.0.0      2023-10-17 [1] CRAN (R 4.3.2)\n#&gt;    leafpop             0.1.0      2021-05-22 [1] CRAN (R 4.3.2)\n#&gt;    lifecycle           1.0.4      2023-11-07 [1] CRAN (R 4.3.2)\n#&gt;    lubridate         * 1.9.3      2023-09-27 [1] CRAN (R 4.3.2)\n#&gt;    lwgeom              0.2-13     2023-05-22 [1] CRAN (R 4.3.2)\n#&gt;    magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.3.2)\n#&gt;    mapview           * 2.11.2     2023-10-13 [1] CRAN (R 4.3.2)\n#&gt;    MASS                7.3-60     2023-05-04 [2] CRAN (R 4.3.2)\n#&gt;    Matrix              1.6-1.1    2023-09-18 [2] CRAN (R 4.3.2)\n#&gt;    memoise             2.0.1      2021-11-26 [1] CRAN (R 4.3.2)\n#&gt;    mgcv                1.9-1      2023-12-21 [1] CRAN (R 4.3.3)\n#&gt;    mime                0.12       2021-09-28 [1] CRAN (R 4.3.1)\n#&gt;    miniUI              0.1.1.1    2018-05-18 [1] CRAN (R 4.3.2)\n#&gt;    munsell             0.5.0      2018-06-12 [1] CRAN (R 4.3.2)\n#&gt;    nimble            * 1.1.0      2024-01-31 [1] CRAN (R 4.3.3)\n#&gt;    nlme                3.1-163    2023-08-09 [2] CRAN (R 4.3.2)\n#&gt;    numDeriv            2016.8-1.1 2019-06-06 [1] CRAN (R 4.3.1)\n#&gt;    patchwork         * 1.2.0      2024-01-08 [1] CRAN (R 4.3.3)\n#&gt;    pillar              1.9.0      2023-03-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgbuild            1.4.4      2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgload             1.3.4      2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    plyr                1.8.9      2023-10-02 [1] CRAN (R 4.3.2)\n#&gt;    png                 0.1-8      2022-11-29 [1] CRAN (R 4.3.1)\n#&gt;    posterior           1.5.0      2023-10-31 [1] CRAN (R 4.3.2)\n#&gt;    pracma              2.4.4      2023-11-10 [1] CRAN (R 4.3.3)\n#&gt;    prettyunits         1.2.0      2023-09-24 [1] CRAN (R 4.3.2)\n#&gt;    processx            3.8.3      2023-12-10 [1] CRAN (R 4.3.2)\n#&gt;    profvis             0.3.8      2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    progress            1.2.3      2023-12-06 [1] CRAN (R 4.3.3)\n#&gt;    progressr           0.14.0     2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    promises            1.2.1      2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    proxy               0.4-27     2022-06-09 [1] CRAN (R 4.3.2)\n#&gt;    ps                  1.7.6      2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;    purrr             * 1.0.2      2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    quarto            * 1.4        2024-03-06 [1] CRAN (R 4.3.3)\n#&gt;    R.cache             0.16.0     2022-07-21 [1] CRAN (R 4.3.3)\n#&gt;    R.methodsS3         1.8.2      2022-06-13 [1] CRAN (R 4.3.3)\n#&gt;    R.oo                1.26.0     2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;    R.utils             2.12.3     2023-11-18 [1] CRAN (R 4.3.3)\n#&gt;    R6                  2.5.1      2021-08-19 [1] CRAN (R 4.3.2)\n#&gt;    raster              3.6-26     2023-10-14 [1] CRAN (R 4.3.2)\n#&gt;    RColorBrewer        1.1-3      2022-04-03 [1] CRAN (R 4.3.1)\n#&gt;    Rcpp                1.0.12     2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    RcppNumerical       0.6-0      2023-09-06 [1] CRAN (R 4.3.3)\n#&gt;  D RcppParallel        5.1.7      2023-02-27 [1] CRAN (R 4.3.2)\n#&gt;    readr             * 2.1.5      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    readxl            * 1.4.3      2023-07-06 [1] CRAN (R 4.3.2)\n#&gt;    remotes             2.5.0      2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    renv                1.0.7      2024-04-11 [1] CRAN (R 4.3.3)\n#&gt;    reshape2            1.4.4      2020-04-09 [1] CRAN (R 4.3.3)\n#&gt;    rjags             * 4-15       2023-11-30 [1] CRAN (R 4.3.3)\n#&gt;    rlang               1.1.3      2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    rmarkdown           2.27       2024-05-17 [1] CRAN (R 4.3.3)\n#&gt;    rstudioapi          0.16.0     2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;    s2                  1.1.6      2023-12-19 [1] CRAN (R 4.3.2)\n#&gt;    sass                0.4.8      2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    satellite           1.0.5      2024-02-10 [1] CRAN (R 4.3.2)\n#&gt;    scales              1.3.0      2023-11-28 [1] CRAN (R 4.3.3)\n#&gt;    secr                4.6.6      2024-02-29 [1] CRAN (R 4.3.3)\n#&gt;    sessioninfo         1.2.2      2021-12-06 [1] CRAN (R 4.3.2)\n#&gt;    sf                * 1.0-15     2023-12-18 [1] CRAN (R 4.3.2)\n#&gt;    shiny               1.8.0      2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    slippymath          0.3.1      2019-06-28 [1] CRAN (R 4.3.2)\n#&gt;    snow              * 0.4-4      2021-10-27 [1] CRAN (R 4.3.2)\n#&gt;    snowfall          * 1.84-6.3   2023-11-26 [1] CRAN (R 4.3.2)\n#&gt;    sp                  2.1-3      2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    SpadeR            * 0.1.1      2016-09-06 [1] CRAN (R 4.3.1)\n#&gt;    stars               0.6-4      2023-09-11 [1] CRAN (R 4.3.2)\n#&gt;    stringi             1.8.3      2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    stringr           * 1.5.1      2023-11-14 [1] CRAN (R 4.3.2)\n#&gt;    styler            * 1.10.3     2024-04-07 [1] CRAN (R 4.3.3)\n#&gt;    svglite             2.1.3      2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    systemfonts         1.0.5      2023-10-09 [1] CRAN (R 4.3.2)\n#&gt;    tensorA             0.36.2.1   2023-12-13 [1] CRAN (R 4.3.2)\n#&gt;    terra             * 1.7-71     2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    tibble            * 3.2.1      2023-03-20 [1] CRAN (R 4.3.2)\n#&gt;    tictoc            * 1.2.1      2024-03-18 [1] CRAN (R 4.3.3)\n#&gt;    tidyr             * 1.3.1      2024-01-24 [1] CRAN (R 4.3.2)\n#&gt;    tidyselect          1.2.1      2024-03-11 [1] CRAN (R 4.3.3)\n#&gt;    tidyverse         * 2.0.0      2023-02-22 [1] CRAN (R 4.3.2)\n#&gt;    timechange          0.3.0      2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;    tzdb                0.4.0      2023-05-12 [1] CRAN (R 4.3.2)\n#&gt;    units               0.8-5      2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;    urlchecker          1.0.1      2021-11-30 [1] CRAN (R 4.3.2)\n#&gt;    usethis             2.2.3      2024-02-19 [1] CRAN (R 4.3.2)\n#&gt;    utf8                1.2.4      2023-10-22 [1] CRAN (R 4.3.2)\n#&gt;    uuid                1.2-0      2024-01-14 [1] CRAN (R 4.3.2)\n#&gt;    vctrs               0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;    viridisLite         0.4.2      2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    withr               3.0.0      2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    wk                  0.9.1      2023-11-29 [1] CRAN (R 4.3.2)\n#&gt;    xfun                0.44       2024-05-15 [1] CRAN (R 4.3.3)\n#&gt;    xml2                1.3.6      2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    xtable              1.8-4      2019-04-21 [1] CRAN (R 4.3.2)\n#&gt;    yaml                2.3.8      2023-12-11 [1] CRAN (R 4.3.2)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.3\n#&gt;  [2] C:/Program Files/R/R-4.3.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "",
    "text": "Direct observations of interactions (e.g. predation events)\nIndirect ways:\n\n\nOver time. We can use Activity pattern analysis (e.g. Ridout and Linkie 2009, overlap R package). Doesn’t necessarily test if species are typically found in the same locations.\nOver space. Multispecies occupancy models. Don’t necessary test if species are active at the same time.\n\n\n\nTwo or more species, no interactions explicitly modeled (e.g. community occupancy models; AHM1 Chap 11).\nTwo species, species interaction factor, sometimes has numerical issues (MacKenzie et al. 2004).\nTwo species, asymmetric interactions (Waddle et al. 2010, Richmond et al. 2010). Available in PRESENCE and MARK software.\nTwo species, symmetric interactions (Rota et al. 2016, AHM2 Chap 8) &lt;- focus of this post."
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#how-can-we-model-species-interactions",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#how-can-we-model-species-interactions",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "",
    "text": "Direct observations of interactions (e.g. predation events)\nIndirect ways:\n\n\nOver time. We can use Activity pattern analysis (e.g. Ridout and Linkie 2009, overlap R package). Doesn’t necessarily test if species are typically found in the same locations.\nOver space. Multispecies occupancy models. Don’t necessary test if species are active at the same time.\n\n\n\nTwo or more species, no interactions explicitly modeled (e.g. community occupancy models; AHM1 Chap 11).\nTwo species, species interaction factor, sometimes has numerical issues (MacKenzie et al. 2004).\nTwo species, asymmetric interactions (Waddle et al. 2010, Richmond et al. 2010). Available in PRESENCE and MARK software.\nTwo species, symmetric interactions (Rota et al. 2016, AHM2 Chap 8) &lt;- focus of this post."
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#load-packages",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#load-packages",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "Load packages",
    "text": "Load packages\n\nCode\n# library(ggpmthemes)\nlibrary(glue) # Interpreted String Literals\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary (terra)\nlibrary(unmarked)\nlibrary(stars)\nlibrary(elevatr)\nlibrary(ubms)\nlibrary(camtrapR)\nlibrary(knitr) # A General-Purpose Package for Dynamic Report Generation in R\n# options(kableExtra.auto_format = FALSE)\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(DT)\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(ggforce) # Accelerating 'ggplot2'\n\nlibrary(readr)\n\n\n\nsource(\"C:/CodigoR/CameraTrapCesar/R/organiza_datos.R\")"
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#load-data",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#load-data",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "Load data",
    "text": "Load data\nSingle campaign in raw format and next arrange to 5 occasions\nLoad full dataset\n\nCode\nodp_ecu_col&lt;- read_csv(\"C:/CodigoR/CameraTrapCesar/data/oso_danta_puma_ucu_pitalito_cocha2_ana_saldania_ecuador_noNA.csv\")"
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#convert-to-sf",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#convert-to-sf",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "Convert to sf",
    "text": "Convert to sf\n\nCode\ndatos_distinct &lt;- odp_ecu_col |&gt; distinct(Longitude, Latitude, Deployment_id)\n\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\ndatos_sf &lt;-  st_as_sf(x = datos_distinct,\n                         coords = c(\"Longitude\", \n                                    \"Latitude\"),\n                         crs = projlatlon)\n\nmapview(datos_sf, zcol=\"Deployment_id\")"
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#get-rasters",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#get-rasters",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "get rasters",
    "text": "get rasters\n\nCode\n#load raster\nper_tree_cov &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/Veg_Cont_Fields_Yearly_250m_v61/Perc_TreeCov/MOD44B_Perc_TreeCov_2010_065.tif\")\nroad_den &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/RoadDensity/grip4_total_dens_m_km2.asc\")\n# elev &lt;- rast(\"D:/CORREGIDAS/elevation_z7.tif\")\nlandcov &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/LandCover_Type_Yearly_500m_v61/LC1/MCD12Q1_LC1_2010_001.tif\") \ncattle &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/Global cattle distribution/5_Ct_2010_Da.tif\")\n#river &lt;- st_read(\"F:/WCS-CameraTrap/shp/DensidadRios/MCD12Q1_LC1_2001_001_RECLASS_MASK_GRID_3600m_DensDrenSouthAmer.shp\")\n\n# get elevation map\n#elevation_detailed &lt;- rast(get_elev_raster(sites, z = 10, clip=\"bbox\", neg_to_na=TRUE))\nelevation_detailed &lt;- get_elev_point (datos_sf, src=\"aws\", overwrite=TRUE)\n\n\n# extract covs using points and add to sites\n# covs &lt;- cbind(sites, terra::extract(SiteCovsRast, sites))\nper_tre &lt;- terra::extract(per_tree_cov, datos_sf)\nroads &lt;- terra::extract(road_den, datos_sf)\n# eleva &lt;- terra::extract(elevation_detailed, sites)\nland_cov &lt;- terra::extract(landcov, datos_sf)\ncattle_den &lt;-  terra::extract(cattle, datos_sf)\n\nsites &lt;- as.data.frame(datos_sf)\n\n# remove decimals convert to factor\nsites$land_cover &lt;-  factor(land_cov$MCD12Q1_LC1_2010_001)\n# sites$elevation &lt;-  eleva$file3be898018c3\nsites$per_tree_cov &lt;- per_tre$MOD44B_Perc_TreeCov_2010_065 \n#  fix 200 isue\nind &lt;- which(sites$per_tree_cov== 200)\nsites$per_tree_cov[ind] &lt;- 0\n\nsites$elevation &lt;- elevation_detailed$elevation\nsites$roads &lt;- roads$grip4_total_dens_m_km2\nsites$cattle &lt;- cattle_den[,2]\n\n# arrange detections observations\n\neffort &lt;- as.data.frame(odp_ecu_col[,19:23])\n\nylist &lt;- list(oso  =as.matrix(odp_ecu_col[,4:8]),\n              danta=as.matrix(odp_ecu_col[,9:13]),\n              puma =as.matrix(odp_ecu_col[,14:18]))\n\nlapply(ylist, head) # look at first few rows\n#&gt; $oso\n#&gt;      o1 o2 o3 o4 o5\n#&gt; [1,]  0  0  0  0  0\n#&gt; [2,]  0  0  0  0  0\n#&gt; [3,]  0  0  0  0  0\n#&gt; [4,]  0  0  0  0  0\n#&gt; [5,]  0  0  0  0  0\n#&gt; [6,]  0  0  0  0  0\n#&gt; \n#&gt; $danta\n#&gt;      d1 d2 d3 d4 d5\n#&gt; [1,]  1  1  1  1  1\n#&gt; [2,]  1  1  1  1  1\n#&gt; [3,]  1  1  1  0  1\n#&gt; [4,]  1  1  1  1  1\n#&gt; [5,]  0  1  1  1  1\n#&gt; [6,]  1  1  1  1  1\n#&gt; \n#&gt; $puma\n#&gt;      p1 p2 p3 p4 p5\n#&gt; [1,]  0  0  0  0  0\n#&gt; [2,]  0  0  0  0  0\n#&gt; [3,]  0  0  1  0  0\n#&gt; [4,]  0  0  0  0  0\n#&gt; [5,]  0  0  0  0  0\n#&gt; [6,]  0  1  0  0  0\n\nsite_covs &lt;- as.data.frame(sites[,4:7])\n# site_covs$roads &lt;- as.numeric(site_covs$roads)\n# site_covs &lt;- scale(site_covs)\nhead(site_covs)\n#&gt;   per_tree_cov elevation roads   cattle\n#&gt; 1           19      2199   541 2554.303\n#&gt; 2           13      2729   541 2554.303\n#&gt; 3            9      2199   541 2554.303\n#&gt; 4            5      2199   541 2554.303\n#&gt; 5            8      2199   541 2554.303\n#&gt; 6           13      2370   541 2554.303\n\n\nObsCovs_list &lt;- list(effort= odp_ecu_col[,19:23])\n\n\n# Make UMF object\numf &lt;- unmarkedFrameOccuMulti(y=ylist, \n                              siteCovs=site_covs,\n                              obsCovs=ObsCovs_list\n                              )\nhead(umf)\n#&gt; Data frame representation of unmarkedFrame object.\n#&gt; Only showing observation matrix for species 1.\n#&gt;    y.1 y.2 y.3 y.4 y.5 per_tree_cov elevation roads   cattle effort.1 effort.2\n#&gt; 1    0   0   0   0   0           19      2199   541 2554.303      9.5       10\n#&gt; 2    0   0   0   0   0           13      2729   541 2554.303      9.5       10\n#&gt; 3    0   0   0   0   0            9      2199   541 2554.303      9.5       10\n#&gt; 4    0   0   0   0   0            5      2199   541 2554.303      9.5       10\n#&gt; 5    0   0   0   0   0            8      2199   541 2554.303      9.5       10\n#&gt; 6    0   0   0   0   0           13      2370   541 2554.303      9.5       10\n#&gt; 7    0   0   0   0   0            4      2218    57 2545.696      9.5       10\n#&gt; 8    0   0   0   0   0            5      2310    57 2545.696      9.5       10\n#&gt; 9    0   0   0   0   0           10      2310    57 2545.696      9.5       10\n#&gt; 10   0   1   0   0   0            6      2023  1315 2963.785      9.5       10\n#&gt;    effort.3 effort.4 effort.5\n#&gt; 1        10       10      4.5\n#&gt; 2        10       10      2.5\n#&gt; 3        10       10      4.5\n#&gt; 4        10       10      4.5\n#&gt; 5        10       10     10.0\n#&gt; 6        10       10      3.5\n#&gt; 7        10       10     10.0\n#&gt; 8        10       10      2.5\n#&gt; 9        10       10     10.0\n#&gt; 10       10       10      2.5\nsummary(umf)\n#&gt; unmarkedFrame Object\n#&gt; \n#&gt; 287 sites\n#&gt; 3 species: oso danta puma \n#&gt; Maximum number of observations per site: 5 \n#&gt; Mean number of observations per site:\n#&gt; oso: 5  danta: 5  puma: 5  \n#&gt; Sites with at least one detection:\n#&gt; oso: 48  danta: 88  puma: 28  \n#&gt; Tabulation of y observations:\n#&gt; oso:\n#&gt;    0    1 \n#&gt; 1364   71 \n#&gt; danta:\n#&gt;    0    1 \n#&gt; 1238  197 \n#&gt; puma:\n#&gt;    0    1 \n#&gt; 1393   42 \n#&gt; \n#&gt; Site-level covariates:\n#&gt;   per_tree_cov     elevation        roads            cattle      \n#&gt;  Min.   : 2.00   Min.   : 684   Min.   :   0.0   Min.   :   0.0  \n#&gt;  1st Qu.:10.00   1st Qu.:2225   1st Qu.:   0.0   1st Qu.: 371.3  \n#&gt;  Median :19.00   Median :2590   Median :  59.0   Median :1599.6  \n#&gt;  Mean   :28.49   Mean   :2629   Mean   : 216.1   Mean   :1350.4  \n#&gt;  3rd Qu.:44.50   3rd Qu.:3038   3rd Qu.: 448.0   3rd Qu.:2498.4  \n#&gt;  Max.   :82.00   Max.   :4019   Max.   :1315.0   Max.   :5666.5  \n#&gt; \n#&gt; Observation-level covariates:\n#&gt;      effort     \n#&gt;  Min.   : 0.00  \n#&gt;  1st Qu.: 9.50  \n#&gt;  Median :10.00  \n#&gt;  Mean   :11.13  \n#&gt;  3rd Qu.:19.50  \n#&gt;  Max.   :24.00\n\nplot(umf)"
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#set-up-the-formulas",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#set-up-the-formulas",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "Set up the formulas",
    "text": "Set up the formulas\nIntercept-only model, assuming independence\nFor now, we assume independence among species. We do this by only allowing 1st order natural parameters (maxOrder = 1).\nThis is equivalent to fitting 3 single-species occupancy models.\n\nCode\numf@fDesign\n#&gt;          f1[oso] f2[danta] f3[puma] f4[oso:danta] f5[oso:puma] f6[danta:puma]\n#&gt; psi[111]       1         1        1             1            1              1\n#&gt; psi[110]       1         1        0             1            0              0\n#&gt; psi[101]       1         0        1             0            1              0\n#&gt; psi[100]       1         0        0             0            0              0\n#&gt; psi[011]       0         1        1             0            0              1\n#&gt; psi[010]       0         1        0             0            0              0\n#&gt; psi[001]       0         0        1             0            0              0\n#&gt; psi[000]       0         0        0             0            0              0\n#&gt;          f7[oso:danta:puma]\n#&gt; psi[111]                  1\n#&gt; psi[110]                  0\n#&gt; psi[101]                  0\n#&gt; psi[100]                  0\n#&gt; psi[011]                  0\n#&gt; psi[010]                  0\n#&gt; psi[001]                  0\n#&gt; psi[000]                  0\n\nfit_1 &lt;- occuMulti(detformulas = c('~1', '~1', '~1'),\n                   stateformulas = c('~1', '~1', '~1'),\n                   maxOrder = 1,\n                   data = umf)\n\n# DT::datatable(round(summary(fit_1), 3))\n\nsummary(fit_1)\n#&gt; \n#&gt; Call:\n#&gt; occuMulti(detformulas = c(\"~1\", \"~1\", \"~1\"), stateformulas = c(\"~1\", \n#&gt;     \"~1\", \"~1\"), data = umf, maxOrder = 1)\n#&gt; \n#&gt; Occupancy (logit-scale):\n#&gt;                     Estimate    SE     z  P(&gt;|z|)\n#&gt; [oso] (Intercept)     -1.094 0.225 -4.86 1.18e-06\n#&gt; [danta] (Intercept)   -0.715 0.134 -5.32 1.06e-07\n#&gt; [puma] (Intercept)    -1.789 0.259 -6.89 5.42e-12\n#&gt; \n#&gt; Detection (logit-scale):\n#&gt;                     Estimate    SE     z  P(&gt;|z|)\n#&gt; [oso] (Intercept)     -1.404 0.213 -6.58 4.64e-11\n#&gt; [danta] (Intercept)   -0.332 0.108 -3.06 2.19e-03\n#&gt; [puma] (Intercept)    -1.360 0.274 -4.96 6.95e-07\n#&gt; \n#&gt; AIC: 1825.561 \n#&gt; Number of sites: 287\n#&gt; optim convergence code: 0\n#&gt; optim iterations: 68 \n#&gt; Bootstrap iterations: 0\n\n\nIntercept-only model, assuming dependence\n\nSet maxOrder = 2 to estimate up to 2nd order natural parameters\nPermits dependence between species\nFixes all natural parameters &gt; maxOrder at 0\n\nIn fit_2 The species are interacting, but no covariates are involved.\n\nCode\nfit_2 &lt;- occuMulti(detformulas = c('~1', '~1', '~1'),\n                   stateformulas = c('~1', '~1', '~1',\n                                     '~1', '~1', '~1'),\n                   maxOrder = 2,\n                   data = umf)\n\nsummary(fit_2)\n#&gt; \n#&gt; Call:\n#&gt; occuMulti(detformulas = c(\"~1\", \"~1\", \"~1\"), stateformulas = c(\"~1\", \n#&gt;     \"~1\", \"~1\", \"~1\", \"~1\", \"~1\"), data = umf, maxOrder = 2)\n#&gt; \n#&gt; Occupancy (logit-scale):\n#&gt;                          Estimate    SE      z  P(&gt;|z|)\n#&gt; [oso] (Intercept)          -0.797 0.264 -3.014 2.58e-03\n#&gt; [danta] (Intercept)        -0.720 0.190 -3.795 1.47e-04\n#&gt; [puma] (Intercept)         -2.567 0.458 -5.603 2.10e-08\n#&gt; [oso:danta] (Intercept)    -1.250 0.495 -2.524 1.16e-02\n#&gt; [oso:puma] (Intercept)      0.197 0.716  0.275 7.83e-01\n#&gt; [danta:puma] (Intercept)    1.611 0.519  3.104 1.91e-03\n#&gt; \n#&gt; Detection (logit-scale):\n#&gt;                     Estimate    SE     z  P(&gt;|z|)\n#&gt; [oso] (Intercept)     -1.402 0.213 -6.58 4.58e-11\n#&gt; [danta] (Intercept)   -0.329 0.108 -3.05 2.31e-03\n#&gt; [puma] (Intercept)    -1.362 0.275 -4.95 7.30e-07\n#&gt; \n#&gt; AIC: 1811.834 \n#&gt; Number of sites: 287\n#&gt; optim convergence code: 0\n#&gt; optim iterations: 39 \n#&gt; Bootstrap iterations: 0\n\n\noso y danta occur together more frequently than expected by chance (p&lt;0.01) danta y puma occur together more frequently than expected by chance (p&lt;0.01)\nIncorporating covariates\nAny parameter can be modeled as a function of covariates. The Covariate for each parameter can be unique names of detection covariates corresponding to names provided in named list of the umf object. Names of occupancy covariates correspond to names in the data.frame part of umf. The model below is driven by biology and have the interest in demonstrating that each parameter can be modeled uniquely.\nSo number of days (sampling effort) is the covariate for the detection part. Bear occupancy depends on cattle, tapir occupancy depends on elevation, and puma occupancy depends on elevation as well. The interaction oso:danta depends on cattle, oso:puma depends on per_tree_cov and danta:puma on per_tree_cov as well.\n\nCodefit_3 &lt;- occuMulti(detformulas = c('~effort', '~effort', '~effort'),\n                   stateformulas = c('~cattle', #oso\n                                     '~elevation', #danta\n                                     '~elevation', #puma\n                                     '~cattle', #oso:danta\n                                     '~per_tree_cov', #oso:puma\n                                     '~per_tree_cov' #danta:puma\n                                     ),\n                   maxOrder = 2,\n                   se=TRUE,\n                   penalty=0.5,\n                   data = umf)\n#&gt; Bootstraping covariance matrix\n\nsummary(fit_3)\n#&gt; \n#&gt; Call:\n#&gt; occuMulti(detformulas = c(\"~effort\", \"~effort\", \"~effort\"), stateformulas = c(\"~cattle\", \n#&gt;     \"~elevation\", \"~elevation\", \"~cattle\", \"~per_tree_cov\", \"~per_tree_cov\"), \n#&gt;     data = umf, maxOrder = 2, penalty = 0.5, se = TRUE)\n#&gt; \n#&gt; Occupancy (logit-scale):\n#&gt;                            Estimate       SE         z  P(&gt;|z|)\n#&gt; [oso] (Intercept)         -5.18e-07 2.06e-01 -2.51e-06 1.00e+00\n#&gt; [oso] cattle              -7.89e-04 1.57e-04 -5.03e+00 5.01e-07\n#&gt; [danta] (Intercept)       -6.12e-08 4.81e-01 -1.27e-07 1.00e+00\n#&gt; [danta] elevation         -3.45e-04 2.47e-04 -1.40e+00 1.62e-01\n#&gt; [puma] (Intercept)        -3.71e-07 1.20e-01 -3.08e-06 1.00e+00\n#&gt; [puma] elevation          -1.00e-03 7.69e-05 -1.30e+01 7.08e-39\n#&gt; [oso:danta] (Intercept)   -2.67e-07 1.24e-01 -2.15e-06 1.00e+00\n#&gt; [oso:danta] cattle        -4.04e-04 6.94e-04 -5.82e-01 5.60e-01\n#&gt; [oso:puma] (Intercept)    -2.57e-07 4.84e-01 -5.31e-07 1.00e+00\n#&gt; [oso:puma] per_tree_cov   -7.89e-06 2.49e-03 -3.17e-03 9.97e-01\n#&gt; [danta:puma] (Intercept)  -1.40e-07 5.60e-01 -2.49e-07 1.00e+00\n#&gt; [danta:puma] per_tree_cov -4.20e-06 1.01e-02 -4.16e-04 1.00e+00\n#&gt; \n#&gt; Detection (logit-scale):\n#&gt;                      Estimate     SE         z P(&gt;|z|)\n#&gt; [oso] (Intercept)   -5.28e-07 0.7627 -6.92e-07       1\n#&gt; [oso] effort        -4.95e-06 0.0323 -1.53e-04       1\n#&gt; [danta] (Intercept) -2.76e-07 0.2390 -1.16e-06       1\n#&gt; [danta] effort      -1.79e-06 0.0191 -9.36e-05       1\n#&gt; [puma] (Intercept)  -3.21e-07 0.6453 -4.98e-07       1\n#&gt; [puma] effort       -3.23e-06 0.0147 -2.19e-04       1\n#&gt; \n#&gt; AIC: 1977.895 \n#&gt; Number of sites: 287\n#&gt; optim convergence code: 0\n#&gt; optim iterations: 101 \n#&gt; Bootstrap iterations: 30\n\n\nConditional occupancy probability\nCalculation of conditional and marginal occupancy probabilities is done with the predict function.\nCreate a data.frame for predictions The procedure is equivalent to creating data frames for all other applications of predict Include complete range of observed cattle; hold all other variables at their mean.\n\nCodend_cond &lt;- data.frame(\n  # cattle is the one changing from min to max\n  cattle = seq(min(site_covs$cattle), max(site_covs$cattle), length.out = 100), \n  elevation = rep(mean(site_covs$elevation), 100),\n  roads = rep(mean(site_covs$roads), 100),\n  per_tree_cov = rep(mean(site_covs$per_tree_cov), 100) # max(site_covs$per_tree_cov),\n                 # length.out = 100)\n)\n\n\nPredicting danta occurrence when oso are present\nspecies indicates which species we assume when predicting occupancy cond indicates which species we are assuming is present or absent\n\nCodedanta_oso_1 &lt;- predict(fit_3, type = 'state', species = 'danta',\n                     cond = 'oso', newdata = nd_cond)\n\n\nPredicting danta occurrence when oso are absent\nputting a - in front of oso tells predict you wish to assume oso are absent\n\nCode\ndanta_oso_0 &lt;- predict(fit_3, type = 'state', species = 'danta',\n                     cond = '-oso', newdata = nd_cond)\n\n\ndanta oso marginal occupancy box plot\n\nCode################################## Marginal\ndanta_marginal &lt;- predict(fit_3, type=\"state\", species=\"danta\")\nhead(danta_marginal)\n#&gt;   Predicted         SE     lower     upper\n#&gt; 1 0.3021211 0.08128417 0.2565159 0.4397345\n#&gt; 2 0.2650259 0.09711105 0.2030555 0.4494998\n#&gt; 3 0.3021219 0.08087223 0.2578118 0.4387217\n#&gt; 4 0.3021222 0.08074926 0.2583218 0.4383562\n#&gt; 5 0.3021220 0.08083894 0.2579374 0.4386284\n#&gt; 6 0.2898338 0.08585125 0.2388948 0.4426687\n\noso_marginal &lt;- predict(fit_3, type='state', species=\"oso\") # get coyote\nmarg_plot_dat &lt;- rbind(danta_marginal[1,], oso_marginal[1,])\nmarg_plot_dat$Species &lt;- c(\"Tapir\", \"Bear\")\nmarg_plot_dat\n#&gt;    Predicted         SE      lower     upper Species\n#&gt; 1 0.30212114 0.08128417 0.25651587 0.4397345   Tapir\n#&gt; 2 0.09583095 0.13700921 0.05208936 0.5353914    Bear\n\n\nplot(1:2, marg_plot_dat$Predicted, ylim=c(0,0.9), \n     xlim=c(0.5,2.5), pch=19, cex=1.5, xaxt='n', \n     xlab=\"\", ylab=\"Marginal occupancy\")\naxis(1, at=1:2, labels=marg_plot_dat$Species)\n\n# CIs\ntop &lt;- 0.1\nfor (i in 1:2){\n  segments(i, marg_plot_dat$lower[i], i, marg_plot_dat$upper[i])\n  segments(i-top, marg_plot_dat$lower[i], i+top)\n  segments(i-top, marg_plot_dat$upper[i], i+top)\n}\n\n\n\n\n\n\n\ndanta puma marginal occupancy box plot\n\nCode################################## Marginal\ndanta_marginal &lt;- predict(fit_3, type=\"state\", species=\"danta\")\nhead(danta_marginal)\n#&gt;   Predicted         SE     lower     upper\n#&gt; 1 0.3021211 0.08395486 0.2565297 0.4859036\n#&gt; 2 0.2650259 0.09928923 0.2090361 0.4913584\n#&gt; 3 0.3021219 0.08334700 0.2584128 0.4845884\n#&gt; 4 0.3021222 0.08312611 0.2589106 0.4841209\n#&gt; 5 0.3021220 0.08329045 0.2585376 0.4844686\n#&gt; 6 0.2898338 0.08844256 0.2428272 0.4873957\n\noso_marginal &lt;- predict(fit_3, type='state', species=\"puma\") # get coyote\nmarg_plot_dat &lt;- rbind(danta_marginal[1,], oso_marginal[1,])\nmarg_plot_dat$Species &lt;- c(\"Tapir\", \"Puma\")\nmarg_plot_dat\n#&gt;    Predicted         SE      lower     upper Species\n#&gt; 1 0.30212114 0.08395486 0.25652967 0.4859036   Tapir\n#&gt; 2 0.09927149 0.03690354 0.04093709 0.1944529    Puma\n\n\nplot(1:2, marg_plot_dat$Predicted, ylim=c(0,0.9), \n     xlim=c(0.5,2.5), pch=19, cex=1.5, xaxt='n', \n     xlab=\"\", ylab=\"Marginal occupancy\")\naxis(1, at=1:2, labels=marg_plot_dat$Species)\n\n# CIs\ntop &lt;- 0.1\nfor (i in 1:2){\n  segments(i, marg_plot_dat$lower[i], i, marg_plot_dat$upper[i])\n  segments(i-top, marg_plot_dat$lower[i], i+top)\n  segments(i-top, marg_plot_dat$upper[i], i+top)\n}\n\n\n\n\n\n\n\ndanta oso conditional box plot\n\nCode\n######################### Conditional\ndanta_oso &lt;- predict(fit_3, type=\"state\", species=\"danta\", cond=\"oso\")\nhead(danta_oso)\n#&gt;   Predicted        SE       lower     upper\n#&gt; 1 0.1429898 0.2461383 0.009344876 0.8173717\n#&gt; 2 0.1220171 0.2488071 0.006604323 0.8196394\n#&gt; 3 0.1429903 0.2456877 0.009881261 0.8168746\n#&gt; 4 0.1429905 0.2455080 0.010123259 0.8166972\n#&gt; 5 0.1429904 0.2456428 0.009940192 0.8168291\n#&gt; 6 0.1359140 0.2469085 0.008530747 0.8179675\n\ndanta_No_oso &lt;- predict(fit_3, type=\"state\", species=\"danta\", cond=\"-oso\")\nhead(danta_oso)\n#&gt;   Predicted        SE       lower     upper\n#&gt; 1 0.1429898 0.2461383 0.009344876 0.8173717\n#&gt; 2 0.1220171 0.2488071 0.006604323 0.8196394\n#&gt; 3 0.1429903 0.2456877 0.009881261 0.8168746\n#&gt; 4 0.1429905 0.2455080 0.010123259 0.8166972\n#&gt; 5 0.1429904 0.2456428 0.009940192 0.8168291\n#&gt; 6 0.1359140 0.2469085 0.008530747 0.8179675\n\n\nplot_data &lt;- rbind(danta_oso[1,], danta_No_oso[1,])\nplot_data$Oso_status &lt;- c(\"Present\",\"Absent\")\nhead(plot_data)\n#&gt;   Predicted         SE       lower     upper Oso_status\n#&gt; 1 0.1429898 0.24613826 0.009344876 0.8173717    Present\n#&gt; 2 0.3189871 0.02345546 0.282291906 0.3704988     Absent\n\nplot(1:2, plot_data$Predicted, ylim=c(0, 0.9), \n     xlim=c(0.5,2.5), pch=19, cex=1.5, xaxt='n', \n     xlab=\"Bear status\", ylab=\"Tapir cond. occupancy\")\naxis(1, at=1:2, labels=plot_data$Oso_status)\n\n# CIs\ntop &lt;- 0.1\nfor (i in 1:2){\n  segments(i, plot_data$lower[i], i, plot_data$upper[i])\n  segments(i-top, plot_data$lower[i], i+top)\n  segments(i-top, plot_data$upper[i], i+top)\n}\n\n\n\n\n\n\n\ndanta puma conditional box plot\n\nCode\n######################### Conditional\ndanta_oso &lt;- predict(fit_3, type=\"state\", species=\"danta\", cond=\"puma\")\nhead(danta_oso)\n#&gt;   Predicted         SE     lower     upper\n#&gt; 1 0.3021080 0.05173259 0.2150523 0.4010237\n#&gt; 2 0.2650173 0.04030880 0.2038915 0.3472187\n#&gt; 3 0.3021157 0.06940203 0.1926251 0.4259667\n#&gt; 4 0.3021187 0.07700312 0.1811854 0.4381635\n#&gt; 5 0.3021164 0.07128587 0.1896902 0.4290078\n#&gt; 6 0.2898249 0.05372997 0.2022631 0.3896648\n\ndanta_No_oso &lt;- predict(fit_3, type=\"state\", species=\"danta\", cond=\"-puma\")\nhead(danta_oso)\n#&gt;   Predicted         SE     lower     upper\n#&gt; 1 0.3021080 0.05173259 0.2150523 0.4010237\n#&gt; 2 0.2650173 0.04030880 0.2038915 0.3472187\n#&gt; 3 0.3021157 0.06940203 0.1926251 0.4259667\n#&gt; 4 0.3021187 0.07700312 0.1811854 0.4381635\n#&gt; 5 0.3021164 0.07128587 0.1896902 0.4290078\n#&gt; 6 0.2898249 0.05372997 0.2022631 0.3896648\n\n\nplot_data &lt;- rbind(danta_oso[1,], danta_No_oso[1,])\nplot_data$Oso_status &lt;- c(\"Present\",\"Absent\")\nhead(plot_data)\n#&gt;   Predicted         SE     lower     upper Oso_status\n#&gt; 1 0.3021080 0.05173259 0.2150523 0.4010237    Present\n#&gt; 2 0.3021226 0.06373796 0.2524167 0.4499569     Absent\n\nplot(1:2, plot_data$Predicted, ylim=c(0, 0.9), \n     xlim=c(0.5,2.5), pch=19, cex=1.5, xaxt='n', \n     xlab=\"Puma status\", ylab=\"Tapir cond. occupancy\")\naxis(1, at=1:2, labels=plot_data$Oso_status)\n\n# CIs\ntop &lt;- 0.1\nfor (i in 1:2){\n  segments(i, plot_data$lower[i], i, plot_data$upper[i])\n  segments(i-top, plot_data$lower[i], i+top)\n  segments(i-top, plot_data$upper[i], i+top)\n}\n\n\n\n\n\n\n\npredicting with covariates\n\nCode\ngg_df_cond1 &lt;- data.frame(\n  cattle = rep(nd_cond$cattle, 2),\n  occupancy = c(danta_oso_1$Predicted,\n                danta_oso_0$Predicted),\n  low = c(danta_oso_1$lower,\n          danta_oso_0$lower),\n  high = c(danta_oso_1$upper,\n           danta_oso_0$upper),\n  conditional = rep(c('Bear present', 'Bear absent'),\n                    each = 100)\n)\n\n\ncond_fig1 &lt;- ggplot(gg_df_cond1, aes(x = cattle, y = occupancy,\n                                   group = conditional)) +\n  geom_ribbon(aes(ymin = low, ymax = high, fill = conditional),  alpha=0.5) +\n  geom_line() +\n  ylab('Conditional Tapir\\noccupancy probability') +\n  xlab('cattle') +\n  labs(fill = 'Bear state') +\n  theme(text = element_text(size = 15),\n        legend.position = c(0.75, 0.85))\n\ncond_fig1\n\n\n\n\n\n\n\ndanta puma\n\nCode\ndanta_puma_1 &lt;- predict(fit_3, type = 'state', species = 'danta',\n                     cond = 'puma', newdata = nd_cond)\n\ndanta_puma_0 &lt;- predict(fit_3, type = 'state', species = 'danta',\n                     cond = '-puma', newdata = nd_cond)\n\n\ngg_df_cond2 &lt;- data.frame(\n  cattle = rep(nd_cond$cattle, 2),\n  occupancy = c(danta_puma_1$Predicted,\n                danta_puma_0$Predicted),\n  low = c(danta_puma_1$lower,\n          danta_puma_0$lower),\n  high = c(danta_puma_1$upper,\n           danta_puma_0$upper),\n  conditional = rep(c('Puma present', 'Puma absent'),\n                    each = 100)\n)\n\n\n\ncond_fig2 &lt;- ggplot(gg_df_cond2, aes(x = cattle, y = occupancy,\n                                   group = conditional)) +\n  geom_ribbon(aes(ymin = low, ymax = high, fill = conditional),  alpha=0.5) +\n  geom_line() +\n  ylab('Conditional Tapir\\noccupancy probability') +\n  xlab('per_tree_cov') +\n  labs(fill = 'Puma state') +\n  theme(text = element_text(size = 15),\n        legend.position = c(0.75, 0.85))\n\ncond_fig2\n\n\n\n\n\n\n\nhttps://eesc.usgs.gov/MBR/workshops/ahm2023/04_Multispecies%20_occupancy/multispecies-occupancy.html"
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#package-citation",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#package-citation",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.3.2 (R Core Team 2023) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.32 (Xie, Cheng, and Tan 2024), elevatr v. 0.99.0 (Hollister et al. 2023), ggforce v. 0.4.2 (Pedersen 2024a), glue v. 1.7.0 (Hester and Bryan 2024), kableExtra v. 1.4.0 (Zhu 2024), knitr v. 1.46 (Xie 2014, 2015, 2024), mapview v. 2.11.2 (Appelhans et al. 2023), patchwork v. 1.2.0 (Pedersen 2024b), quarto v. 1.4 (Allaire and Dervieux 2024), rmarkdown v. 2.27 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), sf v. 1.0.15 (Pebesma 2018; Pebesma and Bivand 2023a), stars v. 0.6.4 (Pebesma and Bivand 2023b), styler v. 1.10.3 (Müller and Walthert 2024), terra v. 1.7.71 (Hijmans 2024), tidyverse v. 2.0.0 (Wickham et al. 2019), ubms v. 1.2.6 (Kellner et al. 2021), unmarked v. 1.4.1 (Fiske and Chandler 2011; Kellner et al. 2023)."
  },
  {
    "objectID": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#sesion-info",
    "href": "posts/2024-07-05-multi-species-interacting-occupancy/index.html#sesion-info",
    "title": "A multi-species (species interactions) occupancy model",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.3.2 (2023-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19042)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-07-17\n#&gt;  pandoc   3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version  date (UTC) lib source\n#&gt;    abind             * 1.4-5    2016-07-21 [1] CRAN (R 4.3.1)\n#&gt;    base64enc           0.1-3    2015-07-28 [1] CRAN (R 4.3.1)\n#&gt;    bit                 4.0.5    2022-11-15 [1] CRAN (R 4.3.2)\n#&gt;    bit64               4.0.5    2020-08-30 [1] CRAN (R 4.3.2)\n#&gt;    boot                1.3-28.1 2022-11-22 [2] CRAN (R 4.3.2)\n#&gt;    brew                1.0-10   2023-12-16 [1] CRAN (R 4.3.2)\n#&gt;    cachem              1.0.8    2023-05-01 [1] CRAN (R 4.3.2)\n#&gt;    camtrapR          * 2.3.0    2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;    cellranger          1.1.0    2016-07-27 [1] CRAN (R 4.3.2)\n#&gt;    class               7.3-22   2023-05-03 [2] CRAN (R 4.3.2)\n#&gt;    classInt            0.4-10   2023-09-05 [1] CRAN (R 4.3.2)\n#&gt;    cli                 3.6.2    2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    codetools           0.2-19   2023-02-01 [2] CRAN (R 4.3.2)\n#&gt;    colorspace          2.1-0    2023-01-23 [1] CRAN (R 4.3.2)\n#&gt;    crayon              1.5.2    2022-09-29 [1] CRAN (R 4.3.2)\n#&gt;    crosstalk           1.2.1    2023-11-23 [1] CRAN (R 4.3.2)\n#&gt;    curl                5.2.0    2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    data.table          1.15.0   2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    DBI                 1.2.2    2024-02-16 [1] CRAN (R 4.3.2)\n#&gt;    devtools            2.4.5    2022-10-11 [1] CRAN (R 4.3.2)\n#&gt;    digest              0.6.34   2024-01-11 [1] CRAN (R 4.3.2)\n#&gt;    dplyr             * 1.1.4    2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    DT                * 0.32     2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;    e1071               1.7-14   2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    elevatr           * 0.99.0   2023-09-12 [1] CRAN (R 4.3.2)\n#&gt;    ellipsis            0.3.2    2021-04-29 [1] CRAN (R 4.3.2)\n#&gt;    evaluate            0.23     2023-11-01 [1] CRAN (R 4.3.2)\n#&gt;    fansi               1.0.6    2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    farver              2.1.1    2022-07-06 [1] CRAN (R 4.3.2)\n#&gt;    fastmap             1.1.1    2023-02-24 [1] CRAN (R 4.3.2)\n#&gt;    forcats           * 1.0.0    2023-01-29 [1] CRAN (R 4.3.2)\n#&gt;    fs                  1.6.3    2023-07-20 [1] CRAN (R 4.3.2)\n#&gt;    generics            0.1.3    2022-07-05 [1] CRAN (R 4.3.2)\n#&gt;    ggforce           * 0.4.2    2024-02-19 [1] CRAN (R 4.3.3)\n#&gt;    ggplot2           * 3.5.1    2024-04-23 [1] CRAN (R 4.3.3)\n#&gt;    glue              * 1.7.0    2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    grateful          * 0.2.4    2023-10-22 [1] CRAN (R 4.3.3)\n#&gt;    gridExtra           2.3      2017-09-09 [1] CRAN (R 4.3.2)\n#&gt;    gtable              0.3.4    2023-08-21 [1] CRAN (R 4.3.2)\n#&gt;    hms                 1.1.3    2023-03-21 [1] CRAN (R 4.3.2)\n#&gt;    htmltools           0.5.7    2023-11-03 [1] CRAN (R 4.3.2)\n#&gt;    htmlwidgets         1.6.4    2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    httpuv              1.6.14   2024-01-26 [1] CRAN (R 4.3.2)\n#&gt;    httr                1.4.7    2023-08-15 [1] CRAN (R 4.3.2)\n#&gt;    inline              0.3.19   2021-05-31 [1] CRAN (R 4.3.2)\n#&gt;    jquerylib           0.1.4    2021-04-26 [1] CRAN (R 4.3.2)\n#&gt;    jsonlite            1.8.8    2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    kableExtra        * 1.4.0    2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;    KernSmooth          2.23-22  2023-07-10 [2] CRAN (R 4.3.2)\n#&gt;    knitr             * 1.46     2024-04-06 [1] CRAN (R 4.3.3)\n#&gt;    labeling            0.4.3    2023-08-29 [1] CRAN (R 4.3.1)\n#&gt;    later               1.3.2    2023-12-06 [1] CRAN (R 4.3.2)\n#&gt;    lattice             0.22-5   2023-10-24 [1] CRAN (R 4.3.2)\n#&gt;    leafem              0.2.3    2023-09-17 [1] CRAN (R 4.3.2)\n#&gt;    leaflet             2.2.1    2023-11-13 [1] CRAN (R 4.3.2)\n#&gt;    leaflet.providers   2.0.0    2023-10-17 [1] CRAN (R 4.3.2)\n#&gt;    leafpop             0.1.0    2021-05-22 [1] CRAN (R 4.3.2)\n#&gt;    lifecycle           1.0.4    2023-11-07 [1] CRAN (R 4.3.2)\n#&gt;    lme4                1.1-35.3 2024-04-16 [1] CRAN (R 4.3.2)\n#&gt;    loo                 2.7.0    2024-02-24 [1] CRAN (R 4.3.2)\n#&gt;    lubridate         * 1.9.3    2023-09-27 [1] CRAN (R 4.3.2)\n#&gt;    magrittr            2.0.3    2022-03-30 [1] CRAN (R 4.3.2)\n#&gt;    mapview           * 2.11.2   2023-10-13 [1] CRAN (R 4.3.2)\n#&gt;    MASS                7.3-60   2023-05-04 [2] CRAN (R 4.3.2)\n#&gt;    Matrix              1.6-1.1  2023-09-18 [2] CRAN (R 4.3.2)\n#&gt;    matrixStats         1.2.0    2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    memoise             2.0.1    2021-11-26 [1] CRAN (R 4.3.2)\n#&gt;    mgcv                1.9-1    2023-12-21 [1] CRAN (R 4.3.3)\n#&gt;    mime                0.12     2021-09-28 [1] CRAN (R 4.3.1)\n#&gt;    miniUI              0.1.1.1  2018-05-18 [1] CRAN (R 4.3.2)\n#&gt;    minqa               1.2.6    2023-09-11 [1] CRAN (R 4.3.2)\n#&gt;    munsell             0.5.0    2018-06-12 [1] CRAN (R 4.3.2)\n#&gt;    nlme                3.1-163  2023-08-09 [2] CRAN (R 4.3.2)\n#&gt;    nloptr              2.0.3    2022-05-26 [1] CRAN (R 4.3.2)\n#&gt;    patchwork         * 1.2.0    2024-01-08 [1] CRAN (R 4.3.3)\n#&gt;    pbapply             1.7-2    2023-06-27 [1] CRAN (R 4.3.2)\n#&gt;    pillar              1.9.0    2023-03-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgbuild            1.4.4    2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    pkgconfig           2.0.3    2019-09-22 [1] CRAN (R 4.3.2)\n#&gt;    pkgload             1.3.4    2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    png                 0.1-8    2022-11-29 [1] CRAN (R 4.3.1)\n#&gt;    polyclip            1.10-6   2023-09-27 [1] CRAN (R 4.3.1)\n#&gt;    prettyunits         1.2.0    2023-09-24 [1] CRAN (R 4.3.2)\n#&gt;    processx            3.8.3    2023-12-10 [1] CRAN (R 4.3.2)\n#&gt;    profvis             0.3.8    2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    progress            1.2.3    2023-12-06 [1] CRAN (R 4.3.3)\n#&gt;    progressr           0.14.0   2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    promises            1.2.1    2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    proxy               0.4-27   2022-06-09 [1] CRAN (R 4.3.2)\n#&gt;    ps                  1.7.6    2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;    purrr             * 1.0.2    2023-08-10 [1] CRAN (R 4.3.2)\n#&gt;    quarto            * 1.4      2024-03-06 [1] CRAN (R 4.3.3)\n#&gt;    QuickJSR            1.1.3    2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    R.cache             0.16.0   2022-07-21 [1] CRAN (R 4.3.3)\n#&gt;    R.methodsS3         1.8.2    2022-06-13 [1] CRAN (R 4.3.3)\n#&gt;    R.oo                1.26.0   2024-01-24 [1] CRAN (R 4.3.3)\n#&gt;    R.utils             2.12.3   2023-11-18 [1] CRAN (R 4.3.3)\n#&gt;    R6                  2.5.1    2021-08-19 [1] CRAN (R 4.3.2)\n#&gt;    raster              3.6-26   2023-10-14 [1] CRAN (R 4.3.2)\n#&gt;    Rcpp                1.0.12   2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    RcppNumerical       0.6-0    2023-09-06 [1] CRAN (R 4.3.3)\n#&gt;  D RcppParallel        5.1.7    2023-02-27 [1] CRAN (R 4.3.2)\n#&gt;    readr             * 2.1.5    2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    readxl            * 1.4.3    2023-07-06 [1] CRAN (R 4.3.2)\n#&gt;    remotes             2.5.0    2024-03-17 [1] CRAN (R 4.3.3)\n#&gt;    renv                1.0.7    2024-04-11 [1] CRAN (R 4.3.3)\n#&gt;    rlang               1.1.3    2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    rmarkdown           2.27     2024-05-17 [1] CRAN (R 4.3.3)\n#&gt;    RSpectra            0.16-1   2022-04-24 [1] CRAN (R 4.3.2)\n#&gt;    rstan               2.32.6   2024-03-05 [1] CRAN (R 4.3.3)\n#&gt;    rstantools          2.4.0    2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    rstudioapi          0.16.0   2024-03-24 [1] CRAN (R 4.3.3)\n#&gt;    satellite           1.0.5    2024-02-10 [1] CRAN (R 4.3.2)\n#&gt;    scales              1.3.0    2023-11-28 [1] CRAN (R 4.3.3)\n#&gt;    secr                4.6.6    2024-02-29 [1] CRAN (R 4.3.3)\n#&gt;    sessioninfo         1.2.2    2021-12-06 [1] CRAN (R 4.3.2)\n#&gt;    sf                * 1.0-15   2023-12-18 [1] CRAN (R 4.3.2)\n#&gt;    shiny               1.8.0    2023-11-17 [1] CRAN (R 4.3.2)\n#&gt;    slippymath          0.3.1    2019-06-28 [1] CRAN (R 4.3.2)\n#&gt;    sp                  2.1-3    2024-01-30 [1] CRAN (R 4.3.2)\n#&gt;    StanHeaders         2.32.5   2024-01-10 [1] CRAN (R 4.3.2)\n#&gt;    stars             * 0.6-4    2023-09-11 [1] CRAN (R 4.3.2)\n#&gt;    stringi             1.8.3    2023-12-11 [1] CRAN (R 4.3.2)\n#&gt;    stringr           * 1.5.1    2023-11-14 [1] CRAN (R 4.3.2)\n#&gt;    styler            * 1.10.3   2024-04-07 [1] CRAN (R 4.3.3)\n#&gt;    svglite             2.1.3    2023-12-08 [1] CRAN (R 4.3.2)\n#&gt;    systemfonts         1.0.5    2023-10-09 [1] CRAN (R 4.3.2)\n#&gt;    terra             * 1.7-71   2024-01-31 [1] CRAN (R 4.3.2)\n#&gt;    tibble            * 3.2.1    2023-03-20 [1] CRAN (R 4.3.2)\n#&gt;    tidyr             * 1.3.1    2024-01-24 [1] CRAN (R 4.3.2)\n#&gt;    tidyselect          1.2.1    2024-03-11 [1] CRAN (R 4.3.3)\n#&gt;    tidyverse         * 2.0.0    2023-02-22 [1] CRAN (R 4.3.2)\n#&gt;    timechange          0.3.0    2024-01-18 [1] CRAN (R 4.3.2)\n#&gt;    tweenr              2.0.3    2024-02-26 [1] CRAN (R 4.3.3)\n#&gt;    tzdb                0.4.0    2023-05-12 [1] CRAN (R 4.3.2)\n#&gt;    ubms              * 1.2.6    2023-09-11 [1] CRAN (R 4.3.2)\n#&gt;    units               0.8-5    2023-11-28 [1] CRAN (R 4.3.2)\n#&gt;    unmarked          * 1.4.1    2024-01-09 [1] CRAN (R 4.3.2)\n#&gt;    urlchecker          1.0.1    2021-11-30 [1] CRAN (R 4.3.2)\n#&gt;    usethis             2.2.3    2024-02-19 [1] CRAN (R 4.3.2)\n#&gt;    utf8                1.2.4    2023-10-22 [1] CRAN (R 4.3.2)\n#&gt;    uuid                1.2-0    2024-01-14 [1] CRAN (R 4.3.2)\n#&gt;    V8                  4.4.2    2024-02-15 [1] CRAN (R 4.3.3)\n#&gt;    vctrs               0.6.5    2023-12-01 [1] CRAN (R 4.3.2)\n#&gt;    viridisLite         0.4.2    2023-05-02 [1] CRAN (R 4.3.2)\n#&gt;    vroom               1.6.5    2023-12-05 [1] CRAN (R 4.3.2)\n#&gt;    withr               3.0.0    2024-01-16 [1] CRAN (R 4.3.2)\n#&gt;    xfun                0.44     2024-05-15 [1] CRAN (R 4.3.3)\n#&gt;    xml2                1.3.6    2023-12-04 [1] CRAN (R 4.3.2)\n#&gt;    xtable              1.8-4    2019-04-21 [1] CRAN (R 4.3.2)\n#&gt;    yaml                2.3.8    2023-12-11 [1] CRAN (R 4.3.2)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.3\n#&gt;  [2] C:/Program Files/R/R-4.3.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  }
]