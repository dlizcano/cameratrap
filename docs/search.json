[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Camera Trap Blog",
    "section": "",
    "text": "Esfuerzo de muestreo y RAI\n\n\n\nR\n\n\ncameratrap\n\n\ncurso\n\n\n\nParte del Curso Introducción al Fototrampeo\n\n\n\nDiego J. Lizcano, Lain E. Pardo, Angélica Diaz-Pulido\n\n\nDec 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSingle Season Occupancy Model\n\n\n\nR\n\n\noccupancy\n\n\nubms\n\n\nunmarked\n\n\n\nFits the single season occupancy model of MacKenzie et al (2002) using camera trap data, unmarked and ubms\n\n\n\nDiego J. Lizcano\n\n\nJul 27, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Stacked” Models\n\n\n\nR\n\n\noccupancy\n\n\nubms\n\n\n\nSuppose you have a dataset of repeated detections/non detections or counts that are collected over several years, but do not want to fit a dynamic model.\n\n\n\nDiego J. Lizcano, José F. González-Maya\n\n\nJul 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Stacked” Models\n\n\n\nR\n\n\noccupancy\n\n\nubms\n\n\n\nSuppose you have a dataset of repeated detections/non detections or counts that are collected over several years, but do not want to fit a dynamic model.\n\n\n\nDiego J. Lizcano, José F. González-Maya\n\n\nJul 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA multi-species (species interactions) occupancy model\n\n\n\nR\n\n\noccupancy\n\n\ntapir\n\n\n\nA mountain tapir, puma and andean bear interacting model\n\n\n\nDiego J. Lizcano\n\n\nJul 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies diversity\n\n\n\nR\n\n\ndiversity\n\n\naccumulation\n\n\neffort\n\n\n\nusing packages vegan and iNext to analyze diversity on camera trap data\n\n\n\nDiego J. Lizcano\n\n\nJun 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRiqueza de especies\n\n\n\nR\n\n\ndiversity\n\n\naccumulation\n\n\neffort\n\n\n\nusing packages vegan and iNext to analyze diversity on camera trap data\n\n\n\nDiego J. Lizcano\n\n\nJun 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultispecies occupancy model\n\n\n\nR\n\n\noccupancy\n\n\nJAGS\n\n\ncamtrapR\n\n\n\nMultispecies occupancy models combines information from multiple species to estimate both individual and community-level responses to environmental variables\n\n\n\nDiego J. Lizcano\n\n\nJun 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA calendar to visualize camera trap data\n\n\n\nR\n\n\ncalendar\n\n\nmap\n\n\n\nUsing several camera trap data campaingns from Galictis Biodiversidad\n\n\n\nDiego J. Lizcano\n\n\nJun 15, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html",
    "href": "posts/2024-12-15-riqueza/index.html",
    "title": "Riqueza de especies",
    "section": "",
    "text": "Hay dos formas de uso común para tener en cuenta el esfuerzo de muestreo al estimar la riqueza de especies mediante cámaras trampa:\nutilizando la rarefacción de la riqueza observada.\nutilizando modelos de ocupación multiespecie para tener en cuenta las especies presentes pero no observadas (modelo de ocupación).\nEn este post podemos ver un ejemplo del número 1 utilizando el enfoque clásico de la ecología de comunidades utilizando el paquete vegan. El paquete vegan (https://cran.r-project.org/package=vegan) proporciona herramientas para la ecología descriptiva de comunidades. Tiene funciones básicas de análisis de diversidad, ordenación de comunidades y análisis de disimilitud. El paquete vegan proporciona la mayoría de las herramientas estándar de análisis descriptivo de comunidades. Más adelante en el artículo realizamos otro análisis de diversidad utilizando funciones del paquete iNEXT.\nEl enfoque moderno para medir la diversidad de especies incluye los “numeros de Hill”. La rarefacción y la extrapolación con números de Hill han ganado popularidad en la última década y se pueden calcular utilizando la función renyi en el paquete R vegan (Oksanen 2016) y la función rarity en el paquete R MeanRarity (Roswell y Dushoff 2020), y las diversidades de Hill de muestras de igual tamaño o igual cobertura se pueden comparar utilizando las funciones iNEXT y estimateD en el paquete R iNEXT (Hsieh et al. 2016). Las estimaciones para valores asintóticos de diversidad de Hill están disponibles en SpadeR (Chao y Jost 2015, Chao et al. 2015)."
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#riqueza-de-especies-y-esfuerzo-de-muestreo",
    "href": "posts/2024-12-15-riqueza/index.html#riqueza-de-especies-y-esfuerzo-de-muestreo",
    "title": "Riqueza de especies",
    "section": "",
    "text": "Hay dos formas de uso común para tener en cuenta el esfuerzo de muestreo al estimar la riqueza de especies mediante cámaras trampa:\nutilizando la rarefacción de la riqueza observada.\nutilizando modelos de ocupación multiespecie para tener en cuenta las especies presentes pero no observadas (modelo de ocupación).\nEn este post podemos ver un ejemplo del número 1 utilizando el enfoque clásico de la ecología de comunidades utilizando el paquete vegan. El paquete vegan (https://cran.r-project.org/package=vegan) proporciona herramientas para la ecología descriptiva de comunidades. Tiene funciones básicas de análisis de diversidad, ordenación de comunidades y análisis de disimilitud. El paquete vegan proporciona la mayoría de las herramientas estándar de análisis descriptivo de comunidades. Más adelante en el artículo realizamos otro análisis de diversidad utilizando funciones del paquete iNEXT.\nEl enfoque moderno para medir la diversidad de especies incluye los “numeros de Hill”. La rarefacción y la extrapolación con números de Hill han ganado popularidad en la última década y se pueden calcular utilizando la función renyi en el paquete R vegan (Oksanen 2016) y la función rarity en el paquete R MeanRarity (Roswell y Dushoff 2020), y las diversidades de Hill de muestras de igual tamaño o igual cobertura se pueden comparar utilizando las funciones iNEXT y estimateD en el paquete R iNEXT (Hsieh et al. 2016). Las estimaciones para valores asintóticos de diversidad de Hill están disponibles en SpadeR (Chao y Jost 2015, Chao et al. 2015)."
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#load-packages",
    "href": "posts/2024-12-15-riqueza/index.html#load-packages",
    "title": "Riqueza de especies",
    "section": "Load packages",
    "text": "Load packages\n\nCode\n\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(elevatr) # Access Elevation Data from Various APIs\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(tmap)\nlibrary(eks) # make countours\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses\nlibrary(vegan) # Community Ecology Package \nlibrary(ggvegan)\n# library(BiodiversityR) # cause error!\nlibrary(ggordiplots)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(DT)\nlibrary(MeanRarity)\nlibrary(SpadeR)\nlibrary(iNEXT) # Interpolation and Extrapolation for Species Diversity\nlibrary(knitr) # A General-Purpose Package for Dynamic Report Generation in R\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(ggforce) # Accelerating 'ggplot2'\nlibrary(plotly)"
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#load-data",
    "href": "posts/2024-12-15-riqueza/index.html#load-data",
    "title": "Riqueza de especies",
    "section": "Load data",
    "text": "Load data\n\nCode\ndatos &lt;- read_excel(\"C:/CodigoR/CameraTrapCesar/data/CT_Cesar.xlsx\")\n\n# habitat types extracted from Copernicus\nhabs &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")"
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#agrupación-de-varios-sitios",
    "href": "posts/2024-12-15-riqueza/index.html#agrupación-de-varios-sitios",
    "title": "Riqueza de especies",
    "section": "Agrupación de varios sitios",
    "text": "Agrupación de varios sitios\nPara este ejemplo, seleccioné un año para los sitios: Becerril 2021, LaPaz_Manaure 2019, MLJ, CL1, CL2 y PCF. A veces, necesitamos crear códigos únicos por cámara y tabla cameraOperation. Este no fue el caso.\nPara este ejemplo, usamos el tipo de hábitat donde se instaló la cámara como una forma de ver el esfuerzo de muestreo (número de cámaras) por tipo de hábitat. El tipo de hábitat se extrajo superponiendo los puntos de la cámara sobre el conjunto de datos global de cobertura terrestre de 100 m de COPERNICUS utilizando el motor de Google Earth conectado a R. Cómo hacer esto se explicará en otra publicación.\n\nCode# make a new column Station\n# datos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"CT_LaPaz_Manaure\") |&gt; unite (\"Station\", ProyectoEtapa:Salida:CT, sep = \"-\")\n\n# fix dates\ndatos$Start &lt;- as.Date(datos$Start, \"%d/%m/%Y\")\ndatos$End &lt;- as.Date(datos$End, \"%d/%m/%Y\")\ndatos$eventDate &lt;- as.Date(datos$eventDate, \"%d/%m/%Y\")\ndatos$eventDateTime &lt;- ymd_hms(paste(datos$eventDate, \" \",\n                              datos$eventTime, \":00\", sep=\"\"))\n\n# filter Becerril\ndatos_Becerril &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_Becerril\") |&gt; mutate (Station=IdGeo) |&gt; filter(Year==2021)\n\n# filter LaPaz_Manaure\ndatos_LaPaz_Manaure&lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_LaPaz_Manaure\") |&gt; mutate (Station=IdGeo) |&gt; filter(Year==2019)\n\n# filter MLJ\ndatos_MLJ &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"MLJ_TH_TS_2021\") |&gt; mutate (Station=IdGeo)\n\n# filter CL\ndatos_CL1 &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CL-TH2022\") |&gt; mutate (Station=IdGeo)\n# filter CL\ndatos_CL2 &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CL-TS2022\") |&gt; mutate (Station=IdGeo)\n\n# filter PCF\ndatos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"PCF\") |&gt; mutate (Station=IdGeo)\n\ndata_south &lt;- rbind(datos_LaPaz_Manaure, datos_Becerril, datos_MLJ,datos_CL1, datos_CL2,datos_PCF)\n\n# filter 2021 and make uniques\nCToperation  &lt;- data_south |&gt; \n              # filter(Year==2021) |&gt; \n              group_by(Station) |&gt; \n              mutate(minStart=min(Start), maxEnd=max(End)) |&gt;  distinct(Longitude, Latitude, minStart, maxEnd, Year) |&gt; \n  ungroup()"
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#generar-la-tabla-cameraoperation-y-realizar-los-históricos-de-detección-para-todas-las-especies.",
    "href": "posts/2024-12-15-riqueza/index.html#generar-la-tabla-cameraoperation-y-realizar-los-históricos-de-detección-para-todas-las-especies.",
    "title": "Riqueza de especies",
    "section": "Generar la tabla cameraOperation y realizar los históricos de detección para todas las especies.",
    "text": "Generar la tabla cameraOperation y realizar los históricos de detección para todas las especies.\nEl paquete CamtrapR tiene la función ‘cameraOperation’ que realiza una tabla de cámaras (estaciones) y fechas (setup, puck-up), esta tabla es clave para generar los históricos de detección utilizando la función ‘detectionHistory’ en el siguiente paso.\n\nCode# Generamos la matríz de operación de las cámaras\n\ncamop &lt;- cameraOperation(CTtable= CToperation, # Tabla de operación\n                         stationCol= \"Station\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\") #, # Formato de las fechas\n                         #cameraCol=\"CT\")\n                         # sessionCol= \"Year\")\n\n# Generar las historias de detección ---------------------------------------\n## remove plroblem species\n# ind &lt;- which(datos_PCF$Species==\"Marmosa sp.\")\n# datos_PCF &lt;- datos_PCF[-ind,]\n\nDetHist_list &lt;- lapply(unique(data_south$Species), FUN = function(x) {\n  detectionHistory(\n    recordTable         = data_south, # Tabla de registros\n    camOp                = camop, # Matriz de operación de cámaras\n    stationCol           = \"Station\",\n    speciesCol           = \"Species\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 7, # Colapso de las historias a 10 días\n    day1                 = \"station\", # (\"survey\"),or #inicia en la fecha de cada station\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    output               = (\"binary\"), # (\"binary\") or (\"count\")\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# put names to the species \nnames(DetHist_list) &lt;- unique(data_south$Species)\n\n# Finally we make a new list to put all the detection histories.\nylist &lt;- lapply(DetHist_list, FUN = function(x) x$detection_history)"
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#use-the-detection-histories-to-make-the-a-matrix-for-vegan-and-the-incidence-for-inext.",
    "href": "posts/2024-12-15-riqueza/index.html#use-the-detection-histories-to-make-the-a-matrix-for-vegan-and-the-incidence-for-inext.",
    "title": "Riqueza de especies",
    "section": "Use the detection histories to make the a matrix for vegan and the incidence for iNEXT.",
    "text": "Use the detection histories to make the a matrix for vegan and the incidence for iNEXT.\nSpecies accumulation curves made using the package vegan, plot the increase in species richness as we add survey units. If the curve plateaus (flattens), then that suggests you have sampled the majority of the species in your survey site (camera or habitat type).\n\nCode# loop to make vegan matrix\nmat_vegan &lt;- matrix(NA, dim(ylist[[1]])[1], length(unique(data_south$Species)))\nfor(i in 1:length(unique(data_south$Species))){\n  mat_vegan[,i] &lt;- apply(ylist[[i]], 1, sum, na.rm=TRUE)\n  mat_vegan[,i] &lt;- tidyr::replace_na(mat_vegan[,i], 0) # replace na with 0\n}\n\ncolnames(mat_vegan)  &lt;- unique(data_south$Species)\nrownames(mat_vegan) &lt;- rownames(ylist[[1]])\n\nmat_vegan2 &lt;- as.data.frame(mat_vegan)\nmat_vegan2$hab &lt;- habs$hab_code\n# mat_vegan3 &lt;-  mat_vegan2 |&gt; \n  \n# Select specific rows by row numbers\nclosed_forest_rows &lt;- which(mat_vegan2$hab==\"closed_forest_evergreen_broad\")\nherbaceous_rows &lt;- which(mat_vegan2$hab==\"herbaceous_wetland\")\nherbs_rows &lt;- which(mat_vegan2$hab==\"herbs\")\nopen_forest_rows &lt;- which(mat_vegan2$hab==\"open_forest_evergreen_broad\")\nopen_forest2_rows &lt;- which(mat_vegan2$hab==\"open_forest_other\")\n\n\nclosed_forest &lt;- apply(mat_vegan2[closed_forest_rows,1:22], MARGIN = 2, sum)\nherbaceous_wetland &lt;- apply(mat_vegan2[herbaceous_rows,1:22], MARGIN = 2, sum)\nherbs  &lt;- apply(mat_vegan2[herbs_rows,1:22], MARGIN = 2, sum)\nopen_forest_evergreen &lt;- apply(mat_vegan2[open_forest_rows,1:22], MARGIN = 2, sum)\nopen_forest_other &lt;- apply(mat_vegan2[open_forest2_rows,1:22], MARGIN = 2, sum)\n\n# tb_sp &lt;- mat_vegan2 |&gt; group_by(hab)\n# hab_list &lt;- group_split(tb_sp)\n\n# make list of dataframe per habitat\nsp_by_hab &lt;- mat_vegan2 |&gt; dplyr::group_by(hab) %&gt;% split (.$hab)\n# arrange abundance (detection frecuency) mat for INEXT \ncesar_sp &lt;- t(rbind(\nt(colSums(sp_by_hab[[1]][,1:33])),\nt(colSums(sp_by_hab[[2]][,1:33])),\nt(colSums(sp_by_hab[[3]][,1:33])),\nt(colSums(sp_by_hab[[4]][,1:33])),\nt(colSums(sp_by_hab[[5]][,1:33]))\n))\n \ncolnames(cesar_sp) &lt;- names(sp_by_hab)\n\n\n\n# function to Format data to incidence and use iNext\nf_incidences &lt;- function(habitat_rows=closed_forest_rows){ylist %&gt;%  # historias de detection\n  map(~rowSums(.,na.rm = T)) %&gt;% # sumo las detecciones en cada sitio\n  reduce(cbind) %&gt;% # unimos las listas\n  as_data_frame() %&gt;% #formato dataframe\n  filter(row_number() %in% habitat_rows) |&gt; \n  t() %&gt;% # trasponer la tabla\n  as_tibble() %&gt;% #formato tibble\n  mutate_if(is.numeric,~(.&gt;=1)*1) %&gt;%  #como es incidencia, formateo a 1 y 0\n  rowSums() %&gt;%  # ahora si la suma de las incidencias en cada sitio\n  sort(decreasing=T) |&gt; \n  as_tibble() %&gt;% \n  add_row(value= length(habitat_rows), .before = 1) %&gt;%  # requiere que el primer valor sea el número de sitios\n  filter(!if_any()==0) |&gt;  # filter ceros\n  as.matrix() # Requiere formato de matriz\n}\n\n# Make incidence frequency table (is a list whit 5 habitats)\n# Make an empty list to store our data\nincidence_cesar &lt;- list() \nincidence_cesar[[1]] &lt;- f_incidences(closed_forest_rows)\nincidence_cesar[[2]] &lt;- f_incidences(herbaceous_rows)\nincidence_cesar[[3]] &lt;- f_incidences(herbs_rows)\nincidence_cesar[[4]] &lt;- f_incidences(open_forest_rows)\nincidence_cesar[[5]] &lt;- f_incidences(open_forest_other)\n\n# put names\nnames(incidence_cesar) &lt;- names(sp_by_hab)\n\n# we deleted this habitat type for making error\nincidence_cesar &lt;- within(incidence_cesar, rm(\"herbaceous_wetland\"))"
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#para-comenzar-graficaremos-las-especies-versus-los-sitios.",
    "href": "posts/2024-12-15-riqueza/index.html#para-comenzar-graficaremos-las-especies-versus-los-sitios.",
    "title": "Riqueza de especies",
    "section": "Para comenzar, graficaremos las especies versus los sitios.",
    "text": "Para comenzar, graficaremos las especies versus los sitios.\n\nCode# Transpose if needed to have sample site names on rows\nabund_table&lt;-mat_vegan\n# Convert to relative frequencies\nabund_table &lt;- abund_table/rowSums(abund_table)\nlibrary(reshape2)\ndf&lt;-melt(abund_table)\ncolnames(df)&lt;-c(\"Sampled_site\",\"Species\",\"Value\")\nlibrary(plyr)\nlibrary(scales)\n \n# We are going to apply transformation to our data to make it\n# easier on eyes \n \n#df&lt;-ddply(df,.(Samples),transform,rescale=scale(Value))\ndf&lt;-ddply(df,.(Sampled_site),transform,rescale=sqrt(Value))\n \n# Plot heatmap\np &lt;- ggplot(df, aes(Species, Sampled_site)) + \n  geom_tile(aes(fill = rescale),colour = \"white\") + \n  scale_fill_gradient(low = \"white\",high = \"#1E5A8C\")+\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + theme(legend.position = \"none\",axis.ticks = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1,size=6),axis.text.y = element_text(size=4))\n\n# ggplotly(p) # see interactive\n# View the plot\np\n\n\n\n\n\n\n\n\nObserve cómo algunas cámaras no registraron ninguna especie. Aquí se muestra como la línea horizontal gay. Tal vez debamos eliminar esas cámaras."
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#rarefaction-usando-vegan",
    "href": "posts/2024-12-15-riqueza/index.html#rarefaction-usando-vegan",
    "title": "Riqueza de especies",
    "section": "Rarefaction usando vegan\n",
    "text": "Rarefaction usando vegan\n\n\nTenga en cuenta que los sitios son cámaras y la acumulación es de especies por cámara, no de tiempo.\n\nLa rarefacción es una técnica para evaluar la riqueza de especies esperada. La rarefacción permite calcular la riqueza de especies para un número determinado de muestras individuales, basándose en la construcción de curvas de rarefacción.\nEl problema que se produce al muestrear varias especies en una comunidad es que cuanto mayor sea el número de individuos muestreados, más especies se encontrarán. Las curvas de rarefacción se crean muestreando aleatoriamente el conjunto de N muestras varias veces y luego trazando el número promedio de especies encontradas en cada muestra (1,2, … N). “Por lo tanto, la rarefacción genera el número esperado de especies en una pequeña colección de n individuos (o n muestras) extraídos al azar del gran conjunto de N muestras”. Las curvas de rarefacción generalmente crecen rápidamente al principio, a medida que se encuentran las especies más comunes, pero las curvas se estabilizan a medida que solo quedan por muestrear las especies más raras.\n\nCode\nrarecurve(mat_vegan, col = \"blue\") \n\n\n\n\n\n\nCoderarecurve(t(cesar_sp), col = \"blue\") \n\n\n\n\n\n\nCode\nsp1 &lt;- specaccum(mat_vegan)\nsp2 &lt;- specaccum(mat_vegan, \"random\")\n# sp2\n# summary(sp2)\nplot(sp1, ci.type=\"poly\", col=\"blue\", lwd=2, ci.lty=0, ci.col=\"lightblue\")\n\n\n\n\n\n\nCode# boxplot(sp2, col=\"yellow\", add=TRUE, pch=\"+\")\n\n\nmods &lt;- fitspecaccum(sp1, \"gleason\")\nplot(mods, col=\"hotpink\")\nboxplot(sp2, col = \"yellow\", border = \"blue\", lty=1, cex=0.3, add= TRUE)\n\n\n\n\n\n\nCode\n\n## Accumulation model\npool &lt;- poolaccum(mat_vegan)\n# summary(pool, display = \"chao\")\nplot(pool)\n\n\n\n\n\n\n\nDistribución de abundancia clasificada\nUn enfoque alternativo para la distribución de la abundancia de especies es representar gráficamente las abundancias logarítmicas en orden decreciente o en función de los rangos de especies.\n\nCodek &lt;- sample(nrow(mat_vegan), 1)\nrad &lt;- radfit(mat_vegan[22,]) # species 22\n# plot(rad)\nradlattice(rad)\n\n\n\n\n\n\n\nHill Diversities using vegan\n\nCode# data(BCI)\ni &lt;- sample(nrow(mat_vegan), 20)\nmod &lt;- renyi(mat_vegan) #selecting sites with more than one record\nplot(mod)\n\n\n\n\n\n\nCodemod &lt;- renyiaccum(mat_vegan[55:89,])\nplot(mod, as.table=TRUE, col = c(1, 2, 2))\n\n\n\n\n\n\nCodepersp(mod)\n\n\n\n\n\n\n\nTotal number of species\n\nCodeDT::datatable(round(specpool(mat_vegan),3))\n\n\n\n\n\nNumber of unseen species per camera\nLook at S.chao1\n\nCodeDT::datatable(\nt(round(as.data.frame(estimateR(mat_vegan[,])),3))\n)\n\n\n\n\nCode\n# save as dataframe\nS_per_site &lt;- as.data.frame(t(round(as.data.frame(estimateR(mat_vegan[,])),3)))\n# add sites\nS_per_site$Station &lt;- rownames(S_per_site)\n\n\nIt is weird to have .5 species in some sites."
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#mapa-que-convierte-la-operación-de-la-cámara-trampa-a-sf",
    "href": "posts/2024-12-15-riqueza/index.html#mapa-que-convierte-la-operación-de-la-cámara-trampa-a-sf",
    "title": "Riqueza de especies",
    "section": "Mapa que convierte la operación de la cámara trampa a sf",
    "text": "Mapa que convierte la operación de la cámara trampa a sf\nEn este paso, convertimos la tabla de operación de la cámara trampa a sf, agregamos la elevación de AWS, el tipo de hábitat y las especies por sitio (S.chao1) para finalmente visualizar el mapa que muestra la cantidad de especies como el tamaño del punto.\n\nCode\n# datos_distinct &lt;- datos |&gt; distinct(Longitude, Latitude, CT, Proyecto)\n\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\nCToperation_sf &lt;-  st_as_sf(x = CToperation,\n                         coords = c(\"Longitude\", \n                                    \"Latitude\"),\n                         crs = projlatlon)\n\n# write.csv(habs, \"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")\nhabs &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")\n\nCToperation_elev_sf &lt;- get_elev_point(CToperation_sf, src = \"aws\") # get elevation from AWS\n\nCToperation_elev_sf &lt;- CToperation_elev_sf |&gt; left_join(habs, by='Station') |&gt; left_join(S_per_site, by='Station') |&gt; select(\"Station\", \"elevation\", \"minStart.x\",\"maxEnd.x\", \"Year.x\", \"hab_code\" , \"S.obs\", \"S.chao1\")\n\n# add habitat \n# CToperation_elev_sf$habs &lt;- habs$hab_code\n# see the map\nmapview(CToperation_elev_sf, zcol=\"hab_code\", cex = \"S.chao1\", alpha = 0)"
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#tal-vez-sea-más-fácil-representar-gráficamente-el-número-de-especies-como-un-mapa-de-contornos",
    "href": "posts/2024-12-15-riqueza/index.html#tal-vez-sea-más-fácil-representar-gráficamente-el-número-de-especies-como-un-mapa-de-contornos",
    "title": "Riqueza de especies",
    "section": "Tal vez sea más fácil representar gráficamente el número de especies como un mapa de contornos",
    "text": "Tal vez sea más fácil representar gráficamente el número de especies como un mapa de contornos\nUna ventaja de utilizar la estimación de densidad de eks es que resulta más claro lo que significa el resultado. El contorno del 20 % significa que “el 20 % de las mediciones se encuentran dentro de este contorno”. La documentación de eks no está de acuerdo con la forma en que stat_density_2d realiza su cálculo. No sé quién tiene razón porque el valor estimado es la especie.\n\nCode# select chao\nspecies &lt;- dplyr::select(CToperation_elev_sf, \"S.chao1\")\n# hakeoides_coord &lt;- data.frame(sf::st_coordinates(hakeoides))\nSta_den &lt;- eks::st_kde(species) # calculate density\n\n# VERY conveniently, eks can generate an sf file of contour lines\ncontours &lt;- eks::st_get_contour(Sta_den, cont=c( 10,20,30,40,50,60,70,80, 90)) %&gt;% \n  mutate(value=as.numeric(levels(contlabel)))\n\n\n# pal_fun &lt;- leaflet::colorQuantile(\"YlOrRd\", NULL, n = 5)\n\np_popup &lt;- paste(\"Species\", as.numeric(levels(contours$estimate)), \"number\")\n\n\ntmap::tmap_mode(\"view\") # set mode to interactive plots\n\ntmap::tm_shape(species) + \n    tmap::tm_sf(col=\"black\", size=0.2) +\n  #   contours from eks\n  tmap::tm_shape(contours) +\n    tmap::tm_polygons(\"estimate\",\n                      palette=\"Reds\",\n                      alpha=0.5 )\n\n\n\n\nCode\n\n## geom_sf plot\n# ## suitable smoothing matrix gives optimally smoothed contours\n# gs1 &lt;- ggplot(Sta_den) + geom_sf(data=CToperation_elev_sf, fill=NA) + ggthemes::theme_map() +\n#     colorspace::scale_fill_discrete_sequential(palette=\"Heat2\") \n# gs1 + geom_sf(data=st_get_contour(Sta_den), aes(fill=label_percent(contlabel))) +\n#     coord_sf(xlim=xlim, ylim=ylim) \n\n\n\nEn términos generales, la estimación de especies por sitio parece ser mayor cerca de la mina y disminuye con la distancia a la mina. Observe también que las estimaciones de densidad de núcleo son mayores que las de s.chao1."
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#escalamiento-multidimensional-no-métrico-nmds",
    "href": "posts/2024-12-15-riqueza/index.html#escalamiento-multidimensional-no-métrico-nmds",
    "title": "Riqueza de especies",
    "section": "Escalamiento multidimensional no métrico (NMDS)",
    "text": "Escalamiento multidimensional no métrico (NMDS)\nEn la investigación ecológica, a menudo nos interesa no solo comparar descriptores univariados de comunidades, como la diversidad, sino también cómo las especies constituyentes (o la composición de especies) cambian de una comunidad a la siguiente. Una herramienta común para hacer esto es el escalamiento multidimensional no métrico, o NMDS. El objetivo del NMDS es agrupar la información de múltiples dimensiones (por ejemplo, de múltiples comunidades, sitios donde se instaló la cámara trampa, etc.) en solo unas pocas, de modo que se puedan visualizar e interpretar. A diferencia de otras técnicas de ordenación que se basan en distancias (principalmente euclidianas), como el análisis de coordenadas principales, el NMDS utiliza órdenes de rango y, por lo tanto, es una técnica extremadamente flexible que puede adaptarse a una variedad de diferentes tipos de datos.\nSi el tratamiento es continuo, como un gradiente ambiental, entonces puede ser útil trazar líneas de contorno en lugar de envolturas convexas. Podemos obtener algunos datos de elevación para nuestra matriz comunitaria original y superponerlos en el gráfico NMDS usando “ordisurf”.\n\nCode\nexample_NMDS=metaMDS(as.data.frame(mat_vegan), \n                     distance=\"euclidean\",\n                     zerodist = \"ignore\",\n                     trymax=300,\n                     k=5) # T\n#&gt; Wisconsin double standardization\n#&gt; Run 0 stress 0.1177774 \n#&gt; Run 1 stress 0.1211582 \n#&gt; Run 2 stress 0.1212973 \n#&gt; Run 3 stress 0.1191625 \n#&gt; Run 4 stress 0.117699 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.05334456  max resid 0.2986997 \n#&gt; Run 5 stress 0.1218946 \n#&gt; Run 6 stress 0.119396 \n#&gt; Run 7 stress 0.1184204 \n#&gt; Run 8 stress 0.1194898 \n#&gt; Run 9 stress 0.1190681 \n#&gt; Run 10 stress 0.1178003 \n#&gt; ... Procrustes: rmse 0.07086938  max resid 0.2576866 \n#&gt; Run 11 stress 0.1199537 \n#&gt; Run 12 stress 0.1203993 \n#&gt; Run 13 stress 0.118161 \n#&gt; ... Procrustes: rmse 0.0459295  max resid 0.1785734 \n#&gt; Run 14 stress 0.1178142 \n#&gt; ... Procrustes: rmse 0.06706333  max resid 0.3403826 \n#&gt; Run 15 stress 0.1211165 \n#&gt; Run 16 stress 0.1207702 \n#&gt; Run 17 stress 0.1190289 \n#&gt; Run 18 stress 0.1197535 \n#&gt; Run 19 stress 0.1187253 \n#&gt; Run 20 stress 0.1198963 \n#&gt; Run 21 stress 0.1180226 \n#&gt; ... Procrustes: rmse 0.05507927  max resid 0.2000862 \n#&gt; Run 22 stress 0.1179596 \n#&gt; ... Procrustes: rmse 0.0751764  max resid 0.3065298 \n#&gt; Run 23 stress 0.1192157 \n#&gt; Run 24 stress 0.1197584 \n#&gt; Run 25 stress 0.1187964 \n#&gt; Run 26 stress 0.1191531 \n#&gt; Run 27 stress 0.1195885 \n#&gt; Run 28 stress 0.1199824 \n#&gt; Run 29 stress 0.1180602 \n#&gt; ... Procrustes: rmse 0.06506573  max resid 0.208996 \n#&gt; Run 30 stress 0.1176216 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.05648714  max resid 0.190632 \n#&gt; Run 31 stress 0.1181766 \n#&gt; Run 32 stress 0.1204855 \n#&gt; Run 33 stress 0.1188313 \n#&gt; Run 34 stress 0.1195703 \n#&gt; Run 35 stress 0.1210658 \n#&gt; Run 36 stress 0.1196305 \n#&gt; Run 37 stress 0.1177478 \n#&gt; ... Procrustes: rmse 0.06485224  max resid 0.3011637 \n#&gt; Run 38 stress 0.1205858 \n#&gt; Run 39 stress 0.1168856 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.04955251  max resid 0.2818473 \n#&gt; Run 40 stress 0.1186349 \n#&gt; Run 41 stress 0.1183233 \n#&gt; Run 42 stress 0.1188144 \n#&gt; Run 43 stress 0.1194731 \n#&gt; Run 44 stress 0.1200207 \n#&gt; Run 45 stress 0.1186039 \n#&gt; Run 46 stress 0.1180974 \n#&gt; Run 47 stress 0.1206428 \n#&gt; Run 48 stress 0.1182294 \n#&gt; Run 49 stress 0.1184835 \n#&gt; Run 50 stress 0.1202381 \n#&gt; Run 51 stress 0.1191361 \n#&gt; Run 52 stress 0.1186928 \n#&gt; Run 53 stress 0.1196786 \n#&gt; Run 54 stress 0.1188905 \n#&gt; Run 55 stress 0.1201879 \n#&gt; Run 56 stress 0.1195397 \n#&gt; Run 57 stress 0.1194922 \n#&gt; Run 58 stress 0.1180469 \n#&gt; Run 59 stress 0.1193363 \n#&gt; Run 60 stress 0.1190413 \n#&gt; Run 61 stress 0.1187071 \n#&gt; Run 62 stress 0.1200085 \n#&gt; Run 63 stress 0.1185079 \n#&gt; Run 64 stress 0.1190033 \n#&gt; Run 65 stress 0.1195173 \n#&gt; Run 66 stress 0.118546 \n#&gt; Run 67 stress 0.1194079 \n#&gt; Run 68 stress 0.1183561 \n#&gt; Run 69 stress 0.1185949 \n#&gt; Run 70 stress 0.1210041 \n#&gt; Run 71 stress 0.1204828 \n#&gt; Run 72 stress 0.1180284 \n#&gt; Run 73 stress 0.1190941 \n#&gt; Run 74 stress 0.1196239 \n#&gt; Run 75 stress 0.1211473 \n#&gt; Run 76 stress 0.1204393 \n#&gt; Run 77 stress 0.1187643 \n#&gt; Run 78 stress 0.1197731 \n#&gt; Run 79 stress 0.1188496 \n#&gt; Run 80 stress 0.1209728 \n#&gt; Run 81 stress 0.1190095 \n#&gt; Run 82 stress 0.1200579 \n#&gt; Run 83 stress 0.1175591 \n#&gt; Run 84 stress 0.116869 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.0376579  max resid 0.1585361 \n#&gt; Run 85 stress 0.117761 \n#&gt; Run 86 stress 0.1182156 \n#&gt; Run 87 stress 0.1204913 \n#&gt; Run 88 stress 0.1196952 \n#&gt; Run 89 stress 0.1184089 \n#&gt; Run 90 stress 0.1188361 \n#&gt; Run 91 stress 0.1201588 \n#&gt; Run 92 stress 0.1183023 \n#&gt; Run 93 stress 0.119133 \n#&gt; Run 94 stress 0.1183862 \n#&gt; Run 95 stress 0.1180582 \n#&gt; Run 96 stress 0.1208255 \n#&gt; Run 97 stress 0.1196153 \n#&gt; Run 98 stress 0.1198022 \n#&gt; Run 99 stress 0.1201732 \n#&gt; Run 100 stress 0.1186273 \n#&gt; Run 101 stress 0.1191146 \n#&gt; Run 102 stress 0.1198233 \n#&gt; Run 103 stress 0.1200847 \n#&gt; Run 104 stress 0.1194222 \n#&gt; Run 105 stress 0.1199835 \n#&gt; Run 106 stress 0.1195893 \n#&gt; Run 107 stress 0.1193433 \n#&gt; Run 108 stress 0.1191023 \n#&gt; Run 109 stress 0.1172886 \n#&gt; ... Procrustes: rmse 0.0671454  max resid 0.2649203 \n#&gt; Run 110 stress 0.1206771 \n#&gt; Run 111 stress 0.1210343 \n#&gt; Run 112 stress 0.1202096 \n#&gt; Run 113 stress 0.1189394 \n#&gt; Run 114 stress 0.1179109 \n#&gt; Run 115 stress 0.1188948 \n#&gt; Run 116 stress 0.1207775 \n#&gt; Run 117 stress 0.119568 \n#&gt; Run 118 stress 0.1196652 \n#&gt; Run 119 stress 0.1189281 \n#&gt; Run 120 stress 0.1200464 \n#&gt; Run 121 stress 0.1181344 \n#&gt; Run 122 stress 0.1218319 \n#&gt; Run 123 stress 0.1196155 \n#&gt; Run 124 stress 0.1186135 \n#&gt; Run 125 stress 0.1196418 \n#&gt; Run 126 stress 0.1203043 \n#&gt; Run 127 stress 0.11773 \n#&gt; Run 128 stress 0.1202728 \n#&gt; Run 129 stress 0.1188226 \n#&gt; Run 130 stress 0.1204618 \n#&gt; Run 131 stress 0.1198807 \n#&gt; Run 132 stress 0.1186841 \n#&gt; Run 133 stress 0.1178397 \n#&gt; Run 134 stress 0.1191831 \n#&gt; Run 135 stress 0.1192987 \n#&gt; Run 136 stress 0.118177 \n#&gt; Run 137 stress 0.1191548 \n#&gt; Run 138 stress 0.1213243 \n#&gt; Run 139 stress 0.1180362 \n#&gt; Run 140 stress 0.1196696 \n#&gt; Run 141 stress 0.1188839 \n#&gt; Run 142 stress 0.1216302 \n#&gt; Run 143 stress 0.1192539 \n#&gt; Run 144 stress 0.1198361 \n#&gt; Run 145 stress 0.1179701 \n#&gt; Run 146 stress 0.1192952 \n#&gt; Run 147 stress 0.1185629 \n#&gt; Run 148 stress 0.1177968 \n#&gt; Run 149 stress 0.117655 \n#&gt; Run 150 stress 0.1192496 \n#&gt; Run 151 stress 0.119373 \n#&gt; Run 152 stress 0.1191413 \n#&gt; Run 153 stress 0.1168278 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.03019843  max resid 0.1677703 \n#&gt; Run 154 stress 0.1203182 \n#&gt; Run 155 stress 0.1181074 \n#&gt; Run 156 stress 0.1179864 \n#&gt; Run 157 stress 0.1198395 \n#&gt; Run 158 stress 0.1189867 \n#&gt; Run 159 stress 0.1181673 \n#&gt; Run 160 stress 0.1199229 \n#&gt; Run 161 stress 0.1192644 \n#&gt; Run 162 stress 0.1179292 \n#&gt; Run 163 stress 0.1198977 \n#&gt; Run 164 stress 0.1200704 \n#&gt; Run 165 stress 0.1202001 \n#&gt; Run 166 stress 0.1209971 \n#&gt; Run 167 stress 0.1189265 \n#&gt; Run 168 stress 0.1185002 \n#&gt; Run 169 stress 0.120098 \n#&gt; Run 170 stress 0.119822 \n#&gt; Run 171 stress 0.1190084 \n#&gt; Run 172 stress 0.1197402 \n#&gt; Run 173 stress 0.1192796 \n#&gt; Run 174 stress 0.1193162 \n#&gt; Run 175 stress 0.1188664 \n#&gt; Run 176 stress 0.1209573 \n#&gt; Run 177 stress 0.1179904 \n#&gt; Run 178 stress 0.1191293 \n#&gt; Run 179 stress 0.1202595 \n#&gt; Run 180 stress 0.1197796 \n#&gt; Run 181 stress 0.1177875 \n#&gt; Run 182 stress 0.1180694 \n#&gt; Run 183 stress 0.1176092 \n#&gt; Run 184 stress 0.1198626 \n#&gt; Run 185 stress 0.119073 \n#&gt; Run 186 stress 0.1195468 \n#&gt; Run 187 stress 0.1207633 \n#&gt; Run 188 stress 0.1190306 \n#&gt; Run 189 stress 0.1210146 \n#&gt; Run 190 stress 0.1190707 \n#&gt; Run 191 stress 0.1195641 \n#&gt; Run 192 stress 0.1185847 \n#&gt; Run 193 stress 0.1189139 \n#&gt; Run 194 stress 0.1178703 \n#&gt; Run 195 stress 0.1182162 \n#&gt; Run 196 stress 0.1218095 \n#&gt; Run 197 stress 0.1175066 \n#&gt; Run 198 stress 0.119619 \n#&gt; Run 199 stress 0.1191894 \n#&gt; Run 200 stress 0.1192808 \n#&gt; Run 201 stress 0.1199891 \n#&gt; Run 202 stress 0.120028 \n#&gt; Run 203 stress 0.1175908 \n#&gt; Run 204 stress 0.118203 \n#&gt; Run 205 stress 0.1194049 \n#&gt; Run 206 stress 0.1197837 \n#&gt; Run 207 stress 0.1202254 \n#&gt; Run 208 stress 0.1201398 \n#&gt; Run 209 stress 0.1181564 \n#&gt; Run 210 stress 0.1198362 \n#&gt; Run 211 stress 0.1190425 \n#&gt; Run 212 stress 0.1190272 \n#&gt; Run 213 stress 0.1190913 \n#&gt; Run 214 stress 0.1192191 \n#&gt; Run 215 stress 0.1183133 \n#&gt; Run 216 stress 0.1199784 \n#&gt; Run 217 stress 0.1188057 \n#&gt; Run 218 stress 0.120127 \n#&gt; Run 219 stress 0.1180508 \n#&gt; Run 220 stress 0.1197585 \n#&gt; Run 221 stress 0.1200253 \n#&gt; Run 222 stress 0.1190509 \n#&gt; Run 223 stress 0.1184969 \n#&gt; Run 224 stress 0.1193851 \n#&gt; Run 225 stress 0.1196846 \n#&gt; Run 226 stress 0.1192098 \n#&gt; Run 227 stress 0.1201206 \n#&gt; Run 228 stress 0.1185686 \n#&gt; Run 229 stress 0.1199617 \n#&gt; Run 230 stress 0.1189983 \n#&gt; Run 231 stress 0.1190767 \n#&gt; Run 232 stress 0.1199342 \n#&gt; Run 233 stress 0.1187167 \n#&gt; Run 234 stress 0.1206304 \n#&gt; Run 235 stress 0.1187739 \n#&gt; Run 236 stress 0.1187816 \n#&gt; Run 237 stress 0.1196961 \n#&gt; Run 238 stress 0.1200113 \n#&gt; Run 239 stress 0.117875 \n#&gt; Run 240 stress 0.1180518 \n#&gt; Run 241 stress 0.1181188 \n#&gt; Run 242 stress 0.1182886 \n#&gt; Run 243 stress 0.1195173 \n#&gt; Run 244 stress 0.1179139 \n#&gt; Run 245 stress 0.1179677 \n#&gt; Run 246 stress 0.1175461 \n#&gt; Run 247 stress 0.1184389 \n#&gt; Run 248 stress 0.1180015 \n#&gt; Run 249 stress 0.1207187 \n#&gt; Run 250 stress 0.1190768 \n#&gt; Run 251 stress 0.1195012 \n#&gt; Run 252 stress 0.1200513 \n#&gt; Run 253 stress 0.1186996 \n#&gt; Run 254 stress 0.1176741 \n#&gt; Run 255 stress 0.1184409 \n#&gt; Run 256 stress 0.1200844 \n#&gt; Run 257 stress 0.1194721 \n#&gt; Run 258 stress 0.1210275 \n#&gt; Run 259 stress 0.1192189 \n#&gt; Run 260 stress 0.1182547 \n#&gt; Run 261 stress 0.1198083 \n#&gt; Run 262 stress 0.1171739 \n#&gt; ... Procrustes: rmse 0.03440154  max resid 0.1411531 \n#&gt; Run 263 stress 0.1198517 \n#&gt; Run 264 stress 0.1180458 \n#&gt; Run 265 stress 0.118906 \n#&gt; Run 266 stress 0.1186349 \n#&gt; Run 267 stress 0.1207902 \n#&gt; Run 268 stress 0.1214568 \n#&gt; Run 269 stress 0.1195704 \n#&gt; Run 270 stress 0.1181102 \n#&gt; Run 271 stress 0.1192847 \n#&gt; Run 272 stress 0.1198753 \n#&gt; Run 273 stress 0.1187425 \n#&gt; Run 274 stress 0.1193056 \n#&gt; Run 275 stress 0.1204123 \n#&gt; Run 276 stress 0.1199086 \n#&gt; Run 277 stress 0.1200055 \n#&gt; Run 278 stress 0.1190225 \n#&gt; Run 279 stress 0.1203536 \n#&gt; Run 280 stress 0.1195998 \n#&gt; Run 281 stress 0.1168231 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.01973719  max resid 0.07936257 \n#&gt; Run 282 stress 0.1178182 \n#&gt; Run 283 stress 0.1199405 \n#&gt; Run 284 stress 0.1191517 \n#&gt; Run 285 stress 0.1194614 \n#&gt; Run 286 stress 0.1184141 \n#&gt; Run 287 stress 0.117876 \n#&gt; Run 288 stress 0.1195383 \n#&gt; Run 289 stress 0.1199813 \n#&gt; Run 290 stress 0.1196048 \n#&gt; Run 291 stress 0.1199466 \n#&gt; Run 292 stress 0.1186127 \n#&gt; Run 293 stress 0.1187504 \n#&gt; Run 294 stress 0.1193074 \n#&gt; Run 295 stress 0.120654 \n#&gt; Run 296 stress 0.1195552 \n#&gt; Run 297 stress 0.1202316 \n#&gt; Run 298 stress 0.1187314 \n#&gt; Run 299 stress 0.1181165 \n#&gt; Run 300 stress 0.1187011 \n#&gt; *** Best solution was not repeated -- monoMDS stopping criteria:\n#&gt;    300: no. of iterations &gt;= maxit\n\n# plot the graph\nvegan::ordisurf((example_NMDS),CToperation_elev_sf$elevation,main=\"\",col=\"forestgreen\", trymax=100) # bubble = 2\n#&gt; \n#&gt; Family: gaussian \n#&gt; Link function: identity \n#&gt; \n#&gt; Formula:\n#&gt; y ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n#&gt; \n#&gt; Estimated degrees of freedom:\n#&gt; 6.06  total = 7.06 \n#&gt; \n#&gt; REML score: 714.7977\nvegan::orditorp(example_NMDS,display=\"species\",col=\"blue\",air=0.1,\n   cex=0.5)\n\n\n\n\n\n\n\nPodemos hacer una gráfica similar usando gg_ordisurf del paquete ggordiplots pero incorporando también el tipo de hábitat.\n\nCode# ggordiplots::gg_ordisurf()\n# To fit a surface with ggordiplots:\n\n \nordiplot &lt;- gg_ordisurf(ord = example_NMDS, \n                        env.var = CToperation_elev_sf$elevation,\n                        var.label = \"Elevation\",\n                        pt.size = 2,\n                        groups = CToperation_elev_sf$hab_code,\n                        binwidth = 50)\n\n\n\n\n\n\nCode\n# ggplotly(ordiplot$plot) # see interactive\n\n# # alternative using biodiversityR\n# \n# A1.surface &lt;- ordisurf( y=example_NMDS)\n# A1.grid &lt;- ordisurfgrid.long(A1.surface)\n# # Preparing the plot\n# \n# plotgg4 &lt;- ggplot() + \n#     geom_contour_filled(data=A1.grid, \n#                         aes(x=x, y=y, z=z)) +\n#     geom_vline(xintercept = c(0), color = \"grey70\", linetype = 2) +\n#     geom_hline(yintercept = c(0), color = \"grey70\", linetype = 2) +  \n#     xlab(axis.long2[1, \"label\"]) +\n#     ylab(axis.long2[2, \"label\"]) +  \n#     scale_x_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +\n#     scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +\n#     geom_point(data=sites.long2, \n#                aes(x=axis1, y=axis2, shape=Management), \n#                colour=\"red\", size=4) +\n#     BioR.theme +\n#     scale_fill_viridis_d() +\n#     labs(fill=\"A1\") +\n#     coord_fixed(ratio=1)\n# # and seeing the plot.\n# \n# plotgg4\n\n\nLos contornos conectan especies en el espacio de ordenación que se predice que tendrán la misma elevación."
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#rarefaction-using-inext",
    "href": "posts/2024-12-15-riqueza/index.html#rarefaction-using-inext",
    "title": "Riqueza de especies",
    "section": "Rarefaction using iNEXT\n",
    "text": "Rarefaction using iNEXT\n\n\nCode\n\n\nout &lt;- iNEXT(incidence_cesar, # The data frame\n             q=0,# The type of diversity estimator \n             datatype=\"incidence_freq\",   # The type of analysis\n             knots=40,                    # The number of data points \n             se=TRUE,                     # confidence intervals\n             conf=0.95,                   # The level of confidence intervals\n             nboot=100)                    # The number of bootstraps \n\nggiNEXT(out, type=1)\n\n\n\n\n\n\nCodeggiNEXT(out, type=2)\n\n\n\n\n\n\nCodeggiNEXT(out, type=3)\n\n\n\n\n\n\nCode\np1 &lt;- ggiNEXT(out, type=1)+ theme_classic() +   #  type 1 = the diversity estimator\n        labs(x = \"Survey sites\", y = \"Richness\")\n  \np2 &lt;- ggiNEXT(out, type=2)+ theme_classic() +    #  type 2 = the survey coverage\n        labs(x = \"Survey sites\")\n    \ngrid.arrange(p1, p2, nrow = 2)\n\n\n\n\n\n\nCode##############\nout2 &lt;- iNEXT(incidence_cesar, q=c(0,1,2) ,datatype=\"incidence_freq\" )\n\nggiNEXT(out2, type=1, facet.var=\"Order.q\", color.var=\"Assemblage\") + theme_classic() \n\n\n\n\n\n\n\nEl paquete iNEXT es adecuado para comparaciones de índices de diversidad mediante el uso de números de Hill, de los cuales el valor q = 1 representa los índices de diversidad tradicionales: La riqueza de especies es q = 0. El índice de Shannon es (q=1) y el de Simpson es (q=2). Nota: el aumento de los valores de q reduce la influencia de las especies raras en nuestra estimación de la diversidad de la comunidad."
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#package-citation",
    "href": "posts/2024-12-15-riqueza/index.html#package-citation",
    "title": "Riqueza de especies",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.4.2 (R Core Team 2024) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.33 (Xie, Cheng, and Tan 2024), eks v. 1.0.5 (Duong 2024), elevatr v. 0.99.0 (Hollister et al. 2023), ggforce v. 0.4.2 (Pedersen 2024a), ggordiplots v. 0.4.3 (Quensen, Simpson, and Oksanen 2024), ggvegan v. 0.1.999 (Simpson and Oksanen 2023), gridExtra v. 2.3 (Auguie 2017), iNEXT v. 3.0.1 (Chao et al. 2014; Hsieh, Ma, and Chao 2024), kableExtra v. 1.4.0 (Zhu 2024), knitr v. 1.49 (Xie 2014, 2015, 2024), mapview v. 2.11.2 (Appelhans et al. 2023), MeanRarity v. 0.0.1.5 (Roswell and Dushoff 2023), patchwork v. 1.3.0 (Pedersen 2024b), plotly v. 4.10.4 (Sievert 2020), plyr v. 1.8.9 (Wickham 2011), reshape2 v. 1.4.4 (Wickham 2007), rmarkdown v. 2.29 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), scales v. 1.3.0 (Wickham, Pedersen, and Seidel 2023), sf v. 1.0.19 (Pebesma 2018; Pebesma and Bivand 2023), SpadeR v. 0.1.1 (Chao et al. 2016), tidyverse v. 2.0.0 (Wickham et al. 2019), tmap v. 3.3.4 (Tennekes 2018), vegan v. 2.6.8 (Oksanen et al. 2024)."
  },
  {
    "objectID": "posts/2024-12-15-riqueza/index.html#sesion-info",
    "href": "posts/2024-12-15-riqueza/index.html#sesion-info",
    "title": "Riqueza de especies",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.4.2 (2024-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-12-15\n#&gt;  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version    date (UTC) lib source\n#&gt;    abind               1.4-8      2024-09-12 [1] CRAN (R 4.4.1)\n#&gt;    base64enc           0.1-3      2015-07-28 [1] CRAN (R 4.4.0)\n#&gt;    brew                1.0-10     2023-12-16 [1] CRAN (R 4.4.2)\n#&gt;    bslib               0.8.0      2024-07-29 [1] CRAN (R 4.4.2)\n#&gt;    cachem              1.1.0      2024-05-16 [1] CRAN (R 4.4.2)\n#&gt;    camtrapR          * 2.3.0      2024-02-26 [1] CRAN (R 4.4.2)\n#&gt;    cellranger          1.1.0      2016-07-27 [1] CRAN (R 4.4.2)\n#&gt;    class               7.3-22     2023-05-03 [2] CRAN (R 4.4.2)\n#&gt;    classInt            0.4-10     2023-09-05 [1] CRAN (R 4.4.2)\n#&gt;    cli                 3.6.3      2024-06-21 [1] CRAN (R 4.4.2)\n#&gt;    cluster             2.1.6      2023-12-01 [2] CRAN (R 4.4.2)\n#&gt;    codetools           0.2-20     2024-03-31 [2] CRAN (R 4.4.2)\n#&gt;    colorspace          2.1-1      2024-07-26 [1] CRAN (R 4.4.2)\n#&gt;    crayon              1.5.3      2024-06-20 [1] CRAN (R 4.4.2)\n#&gt;    crosstalk           1.2.1      2023-11-23 [1] CRAN (R 4.4.2)\n#&gt;    curl                6.0.0      2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    data.table          1.16.4     2024-12-06 [1] CRAN (R 4.4.2)\n#&gt;    DBI                 1.2.3      2024-06-02 [1] CRAN (R 4.4.2)\n#&gt;    devtools            2.4.5      2022-10-11 [1] CRAN (R 4.4.2)\n#&gt;    dichromat           2.0-0.1    2022-05-02 [1] CRAN (R 4.4.0)\n#&gt;    digest              0.6.37     2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    dplyr             * 1.1.4      2023-11-17 [1] CRAN (R 4.4.2)\n#&gt;    DT                * 0.33       2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    e1071               1.7-16     2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    eks               * 1.0.5      2024-05-01 [1] CRAN (R 4.4.2)\n#&gt;    elevatr           * 0.99.0     2023-09-12 [1] CRAN (R 4.4.2)\n#&gt;    ellipsis            0.3.2      2021-04-29 [1] CRAN (R 4.4.2)\n#&gt;    evaluate            1.0.1      2024-10-10 [1] CRAN (R 4.4.2)\n#&gt;    fansi               1.0.6      2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    farver              2.1.2      2024-05-13 [1] CRAN (R 4.4.2)\n#&gt;    fastmap             1.2.0      2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    forcats           * 1.0.0      2023-01-29 [1] CRAN (R 4.4.2)\n#&gt;    fs                  1.6.5      2024-10-30 [1] CRAN (R 4.4.2)\n#&gt;    generics            0.1.3      2022-07-05 [1] CRAN (R 4.4.2)\n#&gt;    ggforce           * 0.4.2      2024-02-19 [1] CRAN (R 4.4.2)\n#&gt;    ggordiplots       * 0.4.3      2024-01-14 [1] CRAN (R 4.4.2)\n#&gt;    ggplot2           * 3.5.1      2024-04-23 [1] CRAN (R 4.4.2)\n#&gt;    ggrepel             0.9.6      2024-09-07 [1] CRAN (R 4.4.2)\n#&gt;    ggvegan           * 0.1.999    2024-12-15 [1] Github (gavinsimpson/ggvegan@058c08c)\n#&gt;    glue              * 1.8.0      2024-09-30 [1] CRAN (R 4.4.2)\n#&gt;    grateful          * 0.2.10     2024-09-04 [1] CRAN (R 4.4.2)\n#&gt;    gridExtra         * 2.3        2017-09-09 [1] CRAN (R 4.4.2)\n#&gt;    gtable              0.3.6      2024-10-25 [1] CRAN (R 4.4.2)\n#&gt;    hms                 1.1.3      2023-03-21 [1] CRAN (R 4.4.2)\n#&gt;    htmltools           0.5.8.1    2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    htmlwidgets         1.6.4      2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    httpuv              1.6.15     2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    httr                1.4.7      2023-08-15 [1] CRAN (R 4.4.2)\n#&gt;    iNEXT             * 3.0.1      2024-03-24 [1] CRAN (R 4.4.2)\n#&gt;    isoband             0.2.7      2022-12-20 [1] CRAN (R 4.4.2)\n#&gt;    jquerylib           0.1.4      2021-04-26 [1] CRAN (R 4.4.2)\n#&gt;    jsonlite            1.8.9      2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    kableExtra        * 1.4.0      2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    KernSmooth          2.23-24    2024-05-17 [2] CRAN (R 4.4.2)\n#&gt;    knitr             * 1.49       2024-11-08 [1] CRAN (R 4.4.2)\n#&gt;    ks                  1.14.3     2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    labeling            0.4.3      2023-08-29 [1] CRAN (R 4.4.0)\n#&gt;    later               1.3.2      2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    lattice           * 0.22-6     2024-03-20 [2] CRAN (R 4.4.2)\n#&gt;    lazyeval            0.2.2      2019-03-15 [1] CRAN (R 4.4.2)\n#&gt;    leafem              0.2.3      2023-09-17 [1] CRAN (R 4.4.2)\n#&gt;    leaflet             2.2.2      2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    leaflet.providers   2.0.0      2023-10-17 [1] CRAN (R 4.4.2)\n#&gt;    leafpop             0.1.0      2021-05-22 [1] CRAN (R 4.4.2)\n#&gt;    leafsync            0.1.0      2019-03-05 [1] CRAN (R 4.4.2)\n#&gt;    lifecycle           1.0.4      2023-11-07 [1] CRAN (R 4.4.2)\n#&gt;    lubridate         * 1.9.4      2024-12-08 [1] CRAN (R 4.4.2)\n#&gt;    lwgeom              0.2-14     2024-02-21 [1] CRAN (R 4.4.2)\n#&gt;    magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.4.2)\n#&gt;    maplegend           0.2.0      2024-11-12 [1] CRAN (R 4.4.2)\n#&gt;    mapsf               0.12.0     2024-10-22 [1] CRAN (R 4.4.2)\n#&gt;    mapview           * 2.11.2     2023-10-13 [1] CRAN (R 4.4.2)\n#&gt;    MASS                7.3-61     2024-06-13 [2] CRAN (R 4.4.2)\n#&gt;    Matrix              1.7-1      2024-10-18 [2] CRAN (R 4.4.2)\n#&gt;    mclust              6.1.1      2024-04-29 [1] CRAN (R 4.4.2)\n#&gt;    MeanRarity        * 0.0.1.0005 2024-12-15 [1] Github (mikeroswell/MeanRarity@a8b518d)\n#&gt;    memoise             2.0.1      2021-11-26 [1] CRAN (R 4.4.2)\n#&gt;    mgcv                1.9-1      2023-12-21 [2] CRAN (R 4.4.2)\n#&gt;    mime                0.12       2021-09-28 [1] CRAN (R 4.4.0)\n#&gt;    miniUI              0.1.1.1    2018-05-18 [1] CRAN (R 4.4.2)\n#&gt;    munsell             0.5.1      2024-04-01 [1] CRAN (R 4.4.2)\n#&gt;    mvtnorm             1.3-2      2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    nlme                3.1-166    2024-08-14 [2] CRAN (R 4.4.2)\n#&gt;    patchwork         * 1.3.0      2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    permute           * 0.9-7      2022-01-27 [1] CRAN (R 4.4.2)\n#&gt;    pillar              1.9.0      2023-03-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgbuild            1.4.5      2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgload             1.4.0      2024-06-28 [1] CRAN (R 4.4.2)\n#&gt;    plotly            * 4.10.4     2024-01-13 [1] CRAN (R 4.4.2)\n#&gt;    plyr              * 1.8.9      2023-10-02 [1] CRAN (R 4.4.2)\n#&gt;    png                 0.1-8      2022-11-29 [1] CRAN (R 4.4.0)\n#&gt;    polyclip            1.10-7     2024-07-23 [1] CRAN (R 4.4.1)\n#&gt;    pracma              2.4.4      2023-11-10 [1] CRAN (R 4.4.2)\n#&gt;    prettyunits         1.2.0      2023-09-24 [1] CRAN (R 4.4.2)\n#&gt;    profvis             0.4.0      2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    progress            1.2.3      2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    progressr           0.15.0     2024-10-29 [1] CRAN (R 4.4.2)\n#&gt;    promises            1.3.0      2024-04-05 [1] CRAN (R 4.4.2)\n#&gt;    proxy               0.4-27     2022-06-09 [1] CRAN (R 4.4.2)\n#&gt;    purrr             * 1.0.2      2023-08-10 [1] CRAN (R 4.4.2)\n#&gt;    R6                  2.5.1      2021-08-19 [1] CRAN (R 4.4.2)\n#&gt;    raster              3.6-30     2024-10-02 [1] CRAN (R 4.4.2)\n#&gt;    rbibutils           2.3        2024-10-04 [1] CRAN (R 4.4.2)\n#&gt;    RColorBrewer        1.1-3      2022-04-03 [1] CRAN (R 4.4.0)\n#&gt;    Rcpp                1.0.13-1   2024-11-02 [1] CRAN (R 4.4.2)\n#&gt;    RcppNumerical       0.6-0      2023-09-06 [1] CRAN (R 4.4.2)\n#&gt;  D RcppParallel        5.1.9      2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    Rdpack              2.6.2      2024-11-15 [1] CRAN (R 4.4.2)\n#&gt;    readr             * 2.1.5      2024-01-10 [1] CRAN (R 4.4.2)\n#&gt;    readxl            * 1.4.3      2023-07-06 [1] CRAN (R 4.4.2)\n#&gt;    remotes             2.5.0      2024-03-17 [1] CRAN (R 4.4.2)\n#&gt;    renv                1.0.11     2024-10-12 [1] CRAN (R 4.4.2)\n#&gt;    reshape2          * 1.4.4      2020-04-09 [1] CRAN (R 4.4.2)\n#&gt;    rlang               1.1.4      2024-06-04 [1] CRAN (R 4.4.2)\n#&gt;    rmarkdown           2.29       2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    rstudioapi          0.17.1     2024-10-22 [1] CRAN (R 4.4.2)\n#&gt;    s2                  1.1.7      2024-07-17 [1] CRAN (R 4.4.2)\n#&gt;    sass                0.4.9      2024-03-15 [1] CRAN (R 4.4.2)\n#&gt;    satellite           1.0.5      2024-02-10 [1] CRAN (R 4.4.2)\n#&gt;    scales            * 1.3.0      2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    secr                5.1.0      2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    sessioninfo         1.2.2      2021-12-06 [1] CRAN (R 4.4.2)\n#&gt;    sf                * 1.0-19     2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    shiny               1.9.1      2024-08-01 [1] CRAN (R 4.4.2)\n#&gt;    slippymath          0.3.1      2019-06-28 [1] CRAN (R 4.4.2)\n#&gt;    sp                  2.1-4      2024-04-30 [1] CRAN (R 4.4.2)\n#&gt;    SpadeR            * 0.1.1      2016-09-06 [1] CRAN (R 4.4.0)\n#&gt;    stars               0.6-7      2024-11-07 [1] CRAN (R 4.4.2)\n#&gt;    stringi             1.8.4      2024-05-06 [1] CRAN (R 4.4.0)\n#&gt;    stringr           * 1.5.1      2023-11-14 [1] CRAN (R 4.4.2)\n#&gt;    svglite             2.1.3      2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    systemfonts         1.1.0      2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    terra               1.8-5      2024-12-12 [1] CRAN (R 4.4.2)\n#&gt;    tibble            * 3.2.1      2023-03-20 [1] CRAN (R 4.4.2)\n#&gt;    tidyr             * 1.3.1      2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    tidyselect          1.2.1      2024-03-11 [1] CRAN (R 4.4.2)\n#&gt;    tidyverse         * 2.0.0      2023-02-22 [1] CRAN (R 4.4.2)\n#&gt;    timechange          0.3.0      2024-01-18 [1] CRAN (R 4.4.2)\n#&gt;    tmap              * 3.3-4      2023-09-12 [1] CRAN (R 4.4.2)\n#&gt;    tmaptools           3.1-1      2021-01-19 [1] CRAN (R 4.4.2)\n#&gt;    tweenr              2.0.3      2024-02-26 [1] CRAN (R 4.4.2)\n#&gt;    tzdb                0.4.0      2023-05-12 [1] CRAN (R 4.4.2)\n#&gt;    units               0.8-5      2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    urlchecker          1.0.1      2021-11-30 [1] CRAN (R 4.4.2)\n#&gt;    usethis             3.0.0      2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    utf8                1.2.4      2023-10-22 [1] CRAN (R 4.4.2)\n#&gt;    uuid                1.2-1      2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    vctrs               0.6.5      2023-12-01 [1] CRAN (R 4.4.2)\n#&gt;    vegan             * 2.6-8      2024-08-28 [1] CRAN (R 4.4.2)\n#&gt;    viridisLite         0.4.2      2023-05-02 [1] CRAN (R 4.4.2)\n#&gt;    withr               3.0.2      2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    wk                  0.9.4      2024-10-11 [1] CRAN (R 4.4.2)\n#&gt;    xfun                0.49       2024-10-31 [1] CRAN (R 4.4.2)\n#&gt;    XML                 3.99-0.17  2024-06-25 [1] CRAN (R 4.4.1)\n#&gt;    xml2                1.3.6      2023-12-04 [1] CRAN (R 4.4.2)\n#&gt;    xtable              1.8-4      2019-04-21 [1] CRAN (R 4.4.2)\n#&gt;    yaml                2.3.10     2024-07-26 [1] CRAN (R 4.4.1)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.4\n#&gt;  [2] C:/Program Files/R/R-4.4.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html",
    "title": "Single Season Occupancy Model",
    "section": "",
    "text": "First we load some packages\n\nCode\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(terra) # Spatial Data Analysis\nlibrary(elevatr) # Access Elevation Data from Various APIs\nlibrary(readr)\n\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses \nlibrary(unmarked) \nlibrary(ubms) \nlibrary(DT)\n\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\n\n# source(\"C:/CodigoR/CameraTrapCesar/R/organiza_datos.R\")"
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html#load-packages",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html#load-packages",
    "title": "Single Season Occupancy Model",
    "section": "",
    "text": "First we load some packages\n\nCode\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(terra) # Spatial Data Analysis\nlibrary(elevatr) # Access Elevation Data from Various APIs\nlibrary(readr)\n\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses \nlibrary(unmarked) \nlibrary(ubms) \nlibrary(DT)\n\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\n\n# source(\"C:/CodigoR/CameraTrapCesar/R/organiza_datos.R\")"
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html#organize-the-data",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html#organize-the-data",
    "title": "Single Season Occupancy Model",
    "section": "Organize the data",
    "text": "Organize the data\nThe workflow starts with package unmarked for organize data and continue with the package ubms for model building, selection and prediction. The first step to perform the analysis is to organize data following the unmarked package. The data should have detection, non-detection records along with the covariates.\nSee the unmarked::unmarkedFrameOccu function for details typing: ?unmarkedFrameOccu in your R console."
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html#load-data",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html#load-data",
    "title": "Single Season Occupancy Model",
    "section": "Load data",
    "text": "Load data\nThe data set was collected by Sebastián Mejía-Correa and is part of the study: Mejia-Correa S, Diaz-Martinez A. 2014. Densidad y hábitos alimentarios de la danta Tapirus bairdii en el Parque Nacional Natural Los Katios, Colombia. Tapir Conservation. 23:16–23..\n\nCode\n\nkatios1 &lt;- read_excel(\"C:/CodigoR/CameraTrapCesar/data/katios/Tbairdii_sebastian.xlsx\", sheet = \"danta\")\n\n\nView the data\n\nCodedatatable(head(katios1))\n\n\n\n\n\nView as map\n\nCode# Load Katios National Park shapefile\nkatios_np &lt;- read_sf(\"C:/CodigoR/CameraTrapCesar/data/katios/shp/WDPA_WDOECM_Nov2024_Public_61610_shp-polygons.shp\")\n\n# make projection\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\nkatios_sf &lt;-  st_as_sf(x = katios1 |&gt; distinct(Longitude, Latitude, camera),\n                         coords = c(\"Longitude\", \n                                    \"Latitude\"),\n                         crs = projlatlon)\n\nmapview(katios_np, alpha.regions=0.1) + \nmapview(katios_sf, zcol=\"camera\")\n\n\nCmeras location.\n\n\nFunction to make detection history matrix\n\nCode\n\nf.matrix.creator&lt;-function(data){\n  #results object\n  res&lt;-list()\n  \n  #get the dimensions of the matrix\n  \n  #list if sanpling units\n  cams&lt;-unique(data$camera)\n  cams&lt;-sort(cams)\n  rows&lt;-length(cams)\n  species&lt;-unique(data$species)\n  #start and end dates of sampling periods\n  # data&lt;-data[data$Sampling.Period==year,]\n  min&lt;-min(as.Date(as.character(data$start), \"%Y-%m-%d\"))\n  max&lt;-max(as.Date(as.character(data$end), \"%Y-%m-%d\"))\n  cols&lt;-max-min+1\n  \n  #sampling period\n  date.header&lt;-seq(from=min,to=max, by=\"days\")\n  mat&lt;-matrix(NA,rows,cols,dimnames=list(cams,as.character(date.header)))\n  \n  #for all cameras, determine the open and close date and mark in the matrix\n  start.dates&lt;-tapply(as.character(data$start),data$camera,unique)\n  nms&lt;-names(start.dates)\n  # start.dates&lt;-ymd(start.dates)\n  names(start.dates)&lt;-nms\n  end.dates&lt;-tapply(as.character(data$end),data$camera,unique)\n  # end.dates&lt;-ymd(end.dates)\n  names(end.dates)&lt;-nms\n  \n  #outline the sampling periods for each camera j\n  for(j in 1:length(start.dates)){\n    #for each camera beginning and end of sampling\n    low&lt;-which(date.header==as.Date(as.character(start.dates[j]), format = \"%Y-%m-%d\"))\n    hi&lt;-which(date.header==as.Date(as.character(end.dates[j]), format = \"%Y-%m-%d\"))\n    if(length(low)+length(hi)&gt;0){\n      indx&lt;-seq(from=low,to=hi)\n      mat[names(start.dates)[j],indx]&lt;- 0\n    } else next\n  }\n  mat.template&lt;-mat\n  #get the species\n  #species&lt;-unique(data$bin)\n  #construct the matrix for each species i\n  for(i in 1:length(species)){\n    indx&lt;-which(data$species==species[i])\n    #dates and cameras when/where the species was photographed\n    dates&lt;-data$date[indx]\n    cameras&lt;-data$camera[indx]\n    dates.cameras&lt;-data.frame(dates,cameras)\n    #unique combination of dates and cameras \n    dates.cameras&lt;-unique(dates.cameras)\n    #fill in the matrix\n    for(j in 1:length(dates.cameras[,1])){\n      col&lt;-which(date.header==as.character( dates.cameras[j,1]))\n      row&lt;-which(cams==as.character( dates.cameras[j,2]))\n      mat[row,col]&lt;-1\n    }\n    mat.nas&lt;-is.na(mat)\n    sum.nas&lt;-apply(mat.nas,2,sum)\n    indx.nas&lt;-which(sum.nas==rows)\n    if(length(indx.nas)&gt;0){\n      mat&lt;-mat[,-indx.nas]\n    }\n    \n    res&lt;-c(res,list(mat))\n    #return the matrix to its original form\n    mat&lt;-mat.template\n  }\n  \n  names(res)&lt;-species\n  #res&lt;-lapply(res,f.dum)\n  res #object to return\n}\n\n\nApply the function to get Tapirus bairdii detection matrix\n\nCode\n# filter firs year and make uniques\n\ntbairdi &lt;- f.matrix.creator(katios1)[[1]]\n\n\nLets extract percent tree cover 2012 to be used as site covariate\nThe covariate is coming from MODIS. MOD44B Version 6 Vegetation Continuous Fields (VCF). https://lpdaac.usgs.gov/products/mod44bv006/\nWe plot the cameras as sf object on top the map and extract the values using the function terra::extract\n\nCode# load the raster map\nper_tree_cov &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/Veg_Cont_Fields_Yearly_250m_v61/Perc_TreeCov/MOD44B_Perc_TreeCov_2012_065.tif\")\n\n# extract values per camera\nper_tre &lt;- terra::extract(per_tree_cov, katios_sf)\n\n# assign values to the sf object\nkatios_sf$per_tree_cov &lt;- per_tre$MOD44B_Perc_TreeCov_2012_065 \n#  fix 200 issue\n# ind &lt;- which(sites$per_tree_cov== 200)\n# sites$per_tree_cov[ind] &lt;- 0"
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html#create-unmarked-frame-object",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html#create-unmarked-frame-object",
    "title": "Single Season Occupancy Model",
    "section": "Create unmarked frame object",
    "text": "Create unmarked frame object\nLets use the unmarked package to make an unmarkedFrameOccu object.\n\nCodeumf &lt;- unmarkedFrameOccu(y=tbairdi, \n                         siteCovs=data.frame(\n                           per_tree_cov=katios_sf$per_tree_cov)\n                           # road_den=sites$roads),\n                         # obsCovs=list(effort=ej)\n                      )\n\nplot(umf)\n\n\n\nSites against days (observation)\n\n\nCode\nunmarked::summary(umf)\n#&gt; unmarkedFrame Object\n#&gt; \n#&gt; 27 sites\n#&gt; Maximum number of observations per site: 93 \n#&gt; Mean number of observations per site: 45.52 \n#&gt; Sites with at least one detection: 10 \n#&gt; \n#&gt; Tabulation of y observations:\n#&gt;    0    1 &lt;NA&gt; \n#&gt; 1206   23 1282 \n#&gt; \n#&gt; Site-level covariates:\n#&gt;   per_tree_cov  \n#&gt;  Min.   :66.00  \n#&gt;  1st Qu.:73.00  \n#&gt;  Median :78.00  \n#&gt;  Mean   :76.07  \n#&gt;  3rd Qu.:78.00  \n#&gt;  Max.   :80.00"
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html#fit-models",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html#fit-models",
    "title": "Single Season Occupancy Model",
    "section": "Fit models",
    "text": "Fit models\nlets use ubms package to fit several models. We contrast the null model (no covariates) against a model with percent tree cover to explain the occupancy. For this example we are not using covariates for the detection part.\n\nCode# fit_0 &lt;- occu(~1~1, data=umf) # unmarked\n\nfit_j0 &lt;- stan_occu(~1~1, data=umf, chains=3, iter=100000, cores=3)\nfit_j2 &lt;- stan_occu(~1~scale(per_tree_cov), data=umf, chains=3, iter=100000, cores=3)\n\n\nModel selection\nCode# compare models\nmodels &lt;- list(\"p(.)psi(.)\" = fit_j0, # put names\n                \"p(.)psi(per_tree_cov)\" = fit_j2) # put names\n\nmods &lt;- fitList(fits = models)\n\n## see model selection as a table\ndatatable( \n  round(modSel(mods), 3)\n  )\n\nThe model p(.)psi(per_tree_cov) is the “better”.\nEstimates for the null model\nEstimated values for the null model p(.)psi(.) are: 0.4410786, 0.0438637 for occupancy, and detection probability respectively.\nDetails of the best model\n\nCodefit_j2\n#&gt; \n#&gt; Call:\n#&gt; stan_occu(formula = ~1 ~ scale(per_tree_cov), data = umf, chains = 3, \n#&gt;     iter = 1e+05, cores = 3)\n#&gt; \n#&gt; Occupancy (logit-scale):\n#&gt;                     Estimate    SD   2.5% 97.5% n_eff Rhat\n#&gt; (Intercept)           -0.403 0.583 -1.492 0.812 88523    1\n#&gt; scale(per_tree_cov)    1.336 0.707  0.154 2.919 89674    1\n#&gt; \n#&gt; Detection (logit-scale):\n#&gt;  Estimate    SD  2.5% 97.5% n_eff Rhat\n#&gt;     -3.09 0.262 -3.64 -2.62 91423    1\n#&gt; \n#&gt; LOOIC: 217.038\n#&gt; Runtime: 81.605 sec\n\n\nwe conclude MCMC chains have converged if all R&gt;1.05\nConvergence here is not that good…\nModel convergence\nLet see the chains.\n\nCodetraceplot(fit_j2, pars=c(\"beta_state\"))\n\n\n\nChains trace plot. The chains should be converging\n\n\n\nnot that good…\nEvaluate model fit\nStatistic (p) should be near 0.5 if the model fits well.\n\nCode\n# eval\nfit_top_gof &lt;- gof(fit_j2, draws=500, quiet=TRUE)\nfit_top_gof\n#&gt; MacKenzie-Bailey Chi-square \n#&gt; Point estimate = 707667614.926\n#&gt; Posterior predictive p = 0.122\n\n# plot(fit_top_gof)\n\n\n0.14 is not that bad.\nModel inference\nNo covariate for detection, and percent of forest tree cover in occupancy.\n\nCode# ubms::plot_effects(fit_j2, \"det\")\nubms::plot_effects(fit_j2, \"state\")\n\n\n\nPrediction of occupancy with percent tree cover\n\n\n\nThe error band is large but there is a clear trend.\nSpatial model\nTaking in to account spatial autocorrelation.\n\nCode# convert to UTM\nkatios_utm = st_transform(katios_sf, 21818)\nkatios_cord &lt;- st_coordinates(katios_utm)\nsite_cov &lt;- as.data.frame(cbind(per_tree_cov=scale(katios_sf$per_tree_cov),\n                  katios_cord))\n\nnames(site_cov) &lt;- c(\"per_tree_cov\", \"X\", \"Y\")\n\nwith(site_cov, RSR(X, Y, threshold=1, plot_site=27))\n\n\n\nSpatial autocorrelation.\n\n\nCode\nform &lt;- ~1 ~per_tree_cov + RSR(X, Y, threshold=1)\numf2 &lt;- unmarkedFrameOccu(y=tbairdi, siteCovs=site_cov)\n# fit_spatial &lt;- stan_occu(form, umf2, chains=3, cores=3, seed=123) # error\n\n\nSpatial model do not run… Error at Building RSR matrices: TridiagEigen: eigen decomposition failed. Probably to few sites."
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html#predict-occupancy-in-a-map",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html#predict-occupancy-in-a-map",
    "title": "Single Season Occupancy Model",
    "section": "Predict occupancy in a map",
    "text": "Predict occupancy in a map\nLets use a raster map with percent tree cover to predict the occupancy and see the resulting occupancy as a map.\n\nCode# cut large raster \nbox &lt;- ext(-77.18,-77.11, 7.800, 7.89) # make a box xmin, xmax, ymin, ymax\nlibrary(raster)\nper_tree_cov_cut &lt;- raster(crop(per_tree_cov, box))# cut raster using the box\n# put correct name\nnames(per_tree_cov_cut) &lt;- \"per_tree_cov\"\n\n# predict in ubms\nmap_occupancy &lt;- ubms::predict(fit_j2,\n                               submodel=\"state\",\n                               newdata=per_tree_cov_cut,\n                               transform=TRUE)\n\nkatios_occu &lt;- map_occupancy[[1]] # assign just prediction\nkatios_occu[katios_occu &gt;= 0.9] &lt;- NA # convert river to NA\n\n# make a palette 9 colors yellow to green\npal &lt;- grDevices::colorRampPalette(RColorBrewer::brewer.pal(9, \"YlGn\"))\n# plot map\nmapview(katios_np, alpha.regions=0.1) +\nmapview(katios_occu, col.regions= pal, alpha = 0.5) + mapview(katios_sf, cex=2) \n\n\nPredicted occupancy map."
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html#package-citation",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html#package-citation",
    "title": "Single Season Occupancy Model",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.4.2 (R Core Team 2024) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.33 (Xie, Cheng, and Tan 2024), elevatr v. 0.99.0 (Hollister et al. 2023), kableExtra v. 1.4.0 (Zhu 2024), mapview v. 2.11.2 (Appelhans et al. 2023), patchwork v. 1.3.0 (Pedersen 2024), quarto v. 1.4.4 (Allaire and Dervieux 2024), raster v. 3.6.30 (Hijmans 2024a), RColorBrewer v. 1.1.3 (Neuwirth 2022), rmarkdown v. 2.29 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), sf v. 1.0.19 (Pebesma 2018; Pebesma and Bivand 2023), styler v. 1.10.3 (Müller and Walthert 2024), terra v. 1.8.5 (Hijmans 2024b), tidyverse v. 2.0.0 (Wickham et al. 2019), ubms v. 1.2.7 (Kellner et al. 2021), unmarked v. 1.4.3 (Fiske and Chandler 2011; Kellner et al. 2023)."
  },
  {
    "objectID": "posts/2024-07-29-sigle-season-occupancy/index.html#sesion-info",
    "href": "posts/2024-07-29-sigle-season-occupancy/index.html#sesion-info",
    "title": "Single Season Occupancy Model",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.4.2 (2024-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-12-15\n#&gt;  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version  date (UTC) lib source\n#&gt;    abind               1.4-8    2024-09-12 [1] CRAN (R 4.4.1)\n#&gt;    backports           1.5.0    2024-05-23 [1] CRAN (R 4.4.0)\n#&gt;    base64enc           0.1-3    2015-07-28 [1] CRAN (R 4.4.0)\n#&gt;    brew                1.0-10   2023-12-16 [1] CRAN (R 4.4.2)\n#&gt;    bslib               0.8.0    2024-07-29 [1] CRAN (R 4.4.2)\n#&gt;    cachem              1.1.0    2024-05-16 [1] CRAN (R 4.4.2)\n#&gt;    camtrapR          * 2.3.0    2024-02-26 [1] CRAN (R 4.4.2)\n#&gt;    cellranger          1.1.0    2016-07-27 [1] CRAN (R 4.4.2)\n#&gt;    checkmate           2.3.2    2024-07-29 [1] CRAN (R 4.4.2)\n#&gt;    class               7.3-22   2023-05-03 [2] CRAN (R 4.4.2)\n#&gt;    classInt            0.4-10   2023-09-05 [1] CRAN (R 4.4.2)\n#&gt;    cli                 3.6.3    2024-06-21 [1] CRAN (R 4.4.2)\n#&gt;    codetools           0.2-20   2024-03-31 [2] CRAN (R 4.4.2)\n#&gt;    colorspace          2.1-1    2024-07-26 [1] CRAN (R 4.4.2)\n#&gt;    crosstalk           1.2.1    2023-11-23 [1] CRAN (R 4.4.2)\n#&gt;    curl                6.0.0    2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    data.table          1.16.4   2024-12-06 [1] CRAN (R 4.4.2)\n#&gt;    DBI                 1.2.3    2024-06-02 [1] CRAN (R 4.4.2)\n#&gt;    devtools            2.4.5    2022-10-11 [1] CRAN (R 4.4.2)\n#&gt;    digest              0.6.37   2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    distributional      0.5.0    2024-09-17 [1] CRAN (R 4.4.2)\n#&gt;    dplyr             * 1.1.4    2023-11-17 [1] CRAN (R 4.4.2)\n#&gt;    DT                * 0.33     2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    e1071               1.7-16   2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    elevatr           * 0.99.0   2023-09-12 [1] CRAN (R 4.4.2)\n#&gt;    ellipsis            0.3.2    2021-04-29 [1] CRAN (R 4.4.2)\n#&gt;    evaluate            1.0.1    2024-10-10 [1] CRAN (R 4.4.2)\n#&gt;    fansi               1.0.6    2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    farver              2.1.2    2024-05-13 [1] CRAN (R 4.4.2)\n#&gt;    fastmap             1.2.0    2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    forcats           * 1.0.0    2023-01-29 [1] CRAN (R 4.4.2)\n#&gt;    fs                  1.6.5    2024-10-30 [1] CRAN (R 4.4.2)\n#&gt;    generics            0.1.3    2022-07-05 [1] CRAN (R 4.4.2)\n#&gt;    ggplot2           * 3.5.1    2024-04-23 [1] CRAN (R 4.4.2)\n#&gt;    glue                1.8.0    2024-09-30 [1] CRAN (R 4.4.2)\n#&gt;    grateful          * 0.2.10   2024-09-04 [1] CRAN (R 4.4.2)\n#&gt;    gridExtra           2.3      2017-09-09 [1] CRAN (R 4.4.2)\n#&gt;    gtable              0.3.6    2024-10-25 [1] CRAN (R 4.4.2)\n#&gt;    hms                 1.1.3    2023-03-21 [1] CRAN (R 4.4.2)\n#&gt;    htmltools           0.5.8.1  2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    htmlwidgets         1.6.4    2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    httpuv              1.6.15   2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    inline              0.3.20   2024-11-10 [1] CRAN (R 4.4.2)\n#&gt;    jquerylib           0.1.4    2021-04-26 [1] CRAN (R 4.4.2)\n#&gt;    jsonlite            1.8.9    2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    kableExtra        * 1.4.0    2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    KernSmooth          2.23-24  2024-05-17 [2] CRAN (R 4.4.2)\n#&gt;    knitr               1.49     2024-11-08 [1] CRAN (R 4.4.2)\n#&gt;    labeling            0.4.3    2023-08-29 [1] CRAN (R 4.4.0)\n#&gt;    later               1.3.2    2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    lattice             0.22-6   2024-03-20 [2] CRAN (R 4.4.2)\n#&gt;    leafem              0.2.3    2023-09-17 [1] CRAN (R 4.4.2)\n#&gt;    leaflet             2.2.2    2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    leaflet.providers   2.0.0    2023-10-17 [1] CRAN (R 4.4.2)\n#&gt;    leafpop             0.1.0    2021-05-22 [1] CRAN (R 4.4.2)\n#&gt;    lifecycle           1.0.4    2023-11-07 [1] CRAN (R 4.4.2)\n#&gt;    loo                 2.8.0    2024-07-03 [1] CRAN (R 4.4.2)\n#&gt;    lubridate         * 1.9.4    2024-12-08 [1] CRAN (R 4.4.2)\n#&gt;    magrittr            2.0.3    2022-03-30 [1] CRAN (R 4.4.2)\n#&gt;    mapview           * 2.11.2   2023-10-13 [1] CRAN (R 4.4.2)\n#&gt;    MASS                7.3-61   2024-06-13 [2] CRAN (R 4.4.2)\n#&gt;    Matrix              1.7-1    2024-10-18 [2] CRAN (R 4.4.2)\n#&gt;    matrixStats         1.4.1    2024-09-08 [1] CRAN (R 4.4.2)\n#&gt;    memoise             2.0.1    2021-11-26 [1] CRAN (R 4.4.2)\n#&gt;    mgcv                1.9-1    2023-12-21 [2] CRAN (R 4.4.2)\n#&gt;    mime                0.12     2021-09-28 [1] CRAN (R 4.4.0)\n#&gt;    miniUI              0.1.1.1  2018-05-18 [1] CRAN (R 4.4.2)\n#&gt;    munsell             0.5.1    2024-04-01 [1] CRAN (R 4.4.2)\n#&gt;    mvtnorm             1.3-2    2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    nlme                3.1-166  2024-08-14 [2] CRAN (R 4.4.2)\n#&gt;    patchwork         * 1.3.0    2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    pbapply             1.7-2    2023-06-27 [1] CRAN (R 4.4.2)\n#&gt;    pillar              1.9.0    2023-03-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgbuild            1.4.5    2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    pkgconfig           2.0.3    2019-09-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgload             1.4.0    2024-06-28 [1] CRAN (R 4.4.2)\n#&gt;    png                 0.1-8    2022-11-29 [1] CRAN (R 4.4.0)\n#&gt;    posterior           1.6.0    2024-07-03 [1] CRAN (R 4.4.2)\n#&gt;    processx            3.8.4    2024-03-16 [1] CRAN (R 4.4.2)\n#&gt;    profvis             0.4.0    2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    progressr           0.15.0   2024-10-29 [1] CRAN (R 4.4.2)\n#&gt;    promises            1.3.0    2024-04-05 [1] CRAN (R 4.4.2)\n#&gt;    proxy               0.4-27   2022-06-09 [1] CRAN (R 4.4.2)\n#&gt;    ps                  1.8.1    2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    purrr             * 1.0.2    2023-08-10 [1] CRAN (R 4.4.2)\n#&gt;    quarto            * 1.4.4    2024-07-20 [1] CRAN (R 4.4.2)\n#&gt;    QuickJSR            1.4.0    2024-10-01 [1] CRAN (R 4.4.2)\n#&gt;    R.cache             0.16.0   2022-07-21 [1] CRAN (R 4.4.2)\n#&gt;    R.methodsS3         1.8.2    2022-06-13 [1] CRAN (R 4.4.0)\n#&gt;    R.oo                1.27.0   2024-11-01 [1] CRAN (R 4.4.1)\n#&gt;    R.utils             2.12.3   2023-11-18 [1] CRAN (R 4.4.2)\n#&gt;    R6                  2.5.1    2021-08-19 [1] CRAN (R 4.4.2)\n#&gt;    raster            * 3.6-30   2024-10-02 [1] CRAN (R 4.4.2)\n#&gt;    rbibutils           2.3      2024-10-04 [1] CRAN (R 4.4.2)\n#&gt;    RColorBrewer        1.1-3    2022-04-03 [1] CRAN (R 4.4.0)\n#&gt;    Rcpp                1.0.13-1 2024-11-02 [1] CRAN (R 4.4.2)\n#&gt;    RcppNumerical       0.6-0    2023-09-06 [1] CRAN (R 4.4.2)\n#&gt;  D RcppParallel        5.1.9    2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    Rdpack              2.6.2    2024-11-15 [1] CRAN (R 4.4.2)\n#&gt;    readr             * 2.1.5    2024-01-10 [1] CRAN (R 4.4.2)\n#&gt;    readxl            * 1.4.3    2023-07-06 [1] CRAN (R 4.4.2)\n#&gt;    reformulas          0.4.0    2024-11-03 [1] CRAN (R 4.4.2)\n#&gt;    remotes             2.5.0    2024-03-17 [1] CRAN (R 4.4.2)\n#&gt;    renv                1.0.11   2024-10-12 [1] CRAN (R 4.4.2)\n#&gt;    rlang               1.1.4    2024-06-04 [1] CRAN (R 4.4.2)\n#&gt;    rmarkdown           2.29     2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    RSpectra            0.16-2   2024-07-18 [1] CRAN (R 4.4.2)\n#&gt;    rstan               2.32.6   2024-03-05 [1] CRAN (R 4.4.2)\n#&gt;    rstantools          2.4.0    2024-01-31 [1] CRAN (R 4.4.2)\n#&gt;    rstudioapi          0.17.1   2024-10-22 [1] CRAN (R 4.4.2)\n#&gt;    sass                0.4.9    2024-03-15 [1] CRAN (R 4.4.2)\n#&gt;    satellite           1.0.5    2024-02-10 [1] CRAN (R 4.4.2)\n#&gt;    scales              1.3.0    2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    secr                5.1.0    2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    sessioninfo         1.2.2    2021-12-06 [1] CRAN (R 4.4.2)\n#&gt;    sf                * 1.0-19   2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    shiny               1.9.1    2024-08-01 [1] CRAN (R 4.4.2)\n#&gt;    sp                * 2.1-4    2024-04-30 [1] CRAN (R 4.4.2)\n#&gt;    StanHeaders         2.32.10  2024-07-15 [1] CRAN (R 4.4.2)\n#&gt;    stringi             1.8.4    2024-05-06 [1] CRAN (R 4.4.0)\n#&gt;    stringr           * 1.5.1    2023-11-14 [1] CRAN (R 4.4.2)\n#&gt;    styler            * 1.10.3   2024-04-07 [1] CRAN (R 4.4.2)\n#&gt;    svglite             2.1.3    2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    systemfonts         1.1.0    2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    tensorA             0.36.2.1 2023-12-13 [1] CRAN (R 4.4.0)\n#&gt;    terra             * 1.8-5    2024-12-12 [1] CRAN (R 4.4.2)\n#&gt;    tibble            * 3.2.1    2023-03-20 [1] CRAN (R 4.4.2)\n#&gt;    tidyr             * 1.3.1    2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    tidyselect          1.2.1    2024-03-11 [1] CRAN (R 4.4.2)\n#&gt;    tidyverse         * 2.0.0    2023-02-22 [1] CRAN (R 4.4.2)\n#&gt;    timechange          0.3.0    2024-01-18 [1] CRAN (R 4.4.2)\n#&gt;    tzdb                0.4.0    2023-05-12 [1] CRAN (R 4.4.2)\n#&gt;    ubms              * 1.2.7    2024-10-01 [1] CRAN (R 4.4.2)\n#&gt;    units               0.8-5    2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    unmarked          * 1.4.3    2024-09-01 [1] CRAN (R 4.4.2)\n#&gt;    urlchecker          1.0.1    2021-11-30 [1] CRAN (R 4.4.2)\n#&gt;    usethis             3.0.0    2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    utf8                1.2.4    2023-10-22 [1] CRAN (R 4.4.2)\n#&gt;    uuid                1.2-1    2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    V8                  6.0.0    2024-10-12 [1] CRAN (R 4.4.2)\n#&gt;    vctrs               0.6.5    2023-12-01 [1] CRAN (R 4.4.2)\n#&gt;    viridisLite         0.4.2    2023-05-02 [1] CRAN (R 4.4.2)\n#&gt;    withr               3.0.2    2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    xfun                0.49     2024-10-31 [1] CRAN (R 4.4.2)\n#&gt;    xml2                1.3.6    2023-12-04 [1] CRAN (R 4.4.2)\n#&gt;    xtable              1.8-4    2019-04-21 [1] CRAN (R 4.4.2)\n#&gt;    yaml                2.3.10   2024-07-26 [1] CRAN (R 4.4.1)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.4\n#&gt;  [2] C:/Program Files/R/R-4.4.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html",
    "href": "posts/2024-06-25-species-diversity/index.html",
    "title": "Species diversity",
    "section": "",
    "text": "There are two commonly used ways to account for survey effort when estimating species richness using camera traps:\n\nusing the rarefaction of observed richness.\nusing multispecies occupancy models to account for the species present but not observed (occupancy model).\n\nIn this post we can see an example of No 1. using the classical approach of community ecology using the vegan package. The vegan package (https://cran.r-project.org/package=vegan) provides tools for descriptive community ecology. It has basic functions of diversity analysis, community ordination and dissimilarity analysis. The vegan package provides most standard tools of descriptive community analysis. Later in the post we carry out another diversity analysis using functions of the package iNEXT.\nThe modern approach to measure species diversity include the “Sample Hill diversities” also known as Hill numbers. Rarefaction and extrapolation with Hill numbers have gain popularity in the last decade and can be computed using the function renyi in the R package vegan (Oksanen 2016) and the function rarity in the R package MeanRarity (Roswell and Dushoff 2020), and Hill diversities of equal-sized or equal-coverage samples can be approximately compared using the functions iNEXT and estimateD in the R package iNEXT (Hsieh et al. 2016). Estimates for asymptotic values of Hill diversity are available in SpadeR (Chao and Jost 2015, Chao et al. 2015)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#species-richness-and-sampling-effort",
    "href": "posts/2024-06-25-species-diversity/index.html#species-richness-and-sampling-effort",
    "title": "Species diversity",
    "section": "",
    "text": "There are two commonly used ways to account for survey effort when estimating species richness using camera traps:\n\nusing the rarefaction of observed richness.\nusing multispecies occupancy models to account for the species present but not observed (occupancy model).\n\nIn this post we can see an example of No 1. using the classical approach of community ecology using the vegan package. The vegan package (https://cran.r-project.org/package=vegan) provides tools for descriptive community ecology. It has basic functions of diversity analysis, community ordination and dissimilarity analysis. The vegan package provides most standard tools of descriptive community analysis. Later in the post we carry out another diversity analysis using functions of the package iNEXT.\nThe modern approach to measure species diversity include the “Sample Hill diversities” also known as Hill numbers. Rarefaction and extrapolation with Hill numbers have gain popularity in the last decade and can be computed using the function renyi in the R package vegan (Oksanen 2016) and the function rarity in the R package MeanRarity (Roswell and Dushoff 2020), and Hill diversities of equal-sized or equal-coverage samples can be approximately compared using the functions iNEXT and estimateD in the R package iNEXT (Hsieh et al. 2016). Estimates for asymptotic values of Hill diversity are available in SpadeR (Chao and Jost 2015, Chao et al. 2015)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#load-packages",
    "href": "posts/2024-06-25-species-diversity/index.html#load-packages",
    "title": "Species diversity",
    "section": "Load packages",
    "text": "Load packages\n\nCode\n\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(elevatr) # Access Elevation Data from Various APIs\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(tmap)\nlibrary(eks) # make countours\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses\nlibrary(vegan) # Community Ecology Package \nlibrary(ggvegan)\n# library(BiodiversityR) # cause error!\nlibrary(ggordiplots)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(DT)\nlibrary(MeanRarity)\nlibrary(SpadeR)\nlibrary(iNEXT) # Interpolation and Extrapolation for Species Diversity\nlibrary(knitr) # A General-Purpose Package for Dynamic Report Generation in R\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\nlibrary(ggforce) # Accelerating 'ggplot2'\nlibrary(plotly)"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#load-data",
    "href": "posts/2024-06-25-species-diversity/index.html#load-data",
    "title": "Species diversity",
    "section": "Load data",
    "text": "Load data\n\nCode\ndatos &lt;- read_excel(\"C:/CodigoR/CameraTrapCesar/data/CT_Cesar.xlsx\")\n\n# habitat types extracted from Copernicus\nhabs &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#pooling-together-several-sites",
    "href": "posts/2024-06-25-species-diversity/index.html#pooling-together-several-sites",
    "title": "Species diversity",
    "section": "Pooling together several sites",
    "text": "Pooling together several sites\nFor this example I selected one year for the sites: Becerril 2021, LaPaz_Manaure 2019, MLJ, CL1, CL2 and PCF. Sometimes we need to make unique codes per camera and cameraOperation table. This was not the case.\nFor this example we are using the habitat type were the camera was installed as a way to see the sampling effort (number of cameras) per habitat type. Th habitat type was extracted overlaying the camera points on top of the Land Cover 100m global dataset from COPERNICUS using Google Earth engine connected to R. How to do this will be in another post.\n\nCode# make a new column Station\n# datos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"CT_LaPaz_Manaure\") |&gt; unite (\"Station\", ProyectoEtapa:Salida:CT, sep = \"-\")\n\n# fix dates\ndatos$Start &lt;- as.Date(datos$Start, \"%d/%m/%Y\")\ndatos$End &lt;- as.Date(datos$End, \"%d/%m/%Y\")\ndatos$eventDate &lt;- as.Date(datos$eventDate, \"%d/%m/%Y\")\ndatos$eventDateTime &lt;- ymd_hms(paste(datos$eventDate, \" \",\n                              datos$eventTime, \":00\", sep=\"\"))\n\n# filter Becerril\ndatos_Becerril &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_Becerril\") |&gt; mutate (Station=IdGeo) |&gt; filter(Year==2021)\n\n# filter LaPaz_Manaure\ndatos_LaPaz_Manaure&lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CT_LaPaz_Manaure\") |&gt; mutate (Station=IdGeo) |&gt; filter(Year==2019)\n\n# filter MLJ\ndatos_MLJ &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"MLJ_TH_TS_2021\") |&gt; mutate (Station=IdGeo)\n\n# filter CL\ndatos_CL1 &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CL-TH2022\") |&gt; mutate (Station=IdGeo)\n# filter CL\ndatos_CL2 &lt;- datos |&gt; dplyr::filter(ProyectoEtapa==\"CL-TS2022\") |&gt; mutate (Station=IdGeo)\n\n# filter PCF\ndatos_PCF &lt;- datos |&gt; dplyr::filter(Proyecto==\"PCF\") |&gt; mutate (Station=IdGeo)\n\ndata_south &lt;- rbind(datos_LaPaz_Manaure, datos_Becerril, datos_MLJ,datos_CL1, datos_CL2,datos_PCF)\n\n# filter 2021 and make uniques\nCToperation  &lt;- data_south |&gt; \n              # filter(Year==2021) |&gt; \n              group_by(Station) |&gt; \n              mutate(minStart=min(Start), maxEnd=max(End)) |&gt;  distinct(Longitude, Latitude, minStart, maxEnd, Year) |&gt; \n  ungroup()"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#generating-the-cameraoperation-table-and-making-detection-histories-for-all-the-species.",
    "href": "posts/2024-06-25-species-diversity/index.html#generating-the-cameraoperation-table-and-making-detection-histories-for-all-the-species.",
    "title": "Species diversity",
    "section": "Generating the cameraOperation table and making detection histories for all the species.",
    "text": "Generating the cameraOperation table and making detection histories for all the species.\nThe package CamtrapR has the function ‘cameraOperation’ which makes a table of cameras (stations) and dates (setup, puck-up), this table is key to generate the detection histories using the function ‘detectionHistory’ in the next step.\n\nCode# Generamos la matríz de operación de las cámaras\n\ncamop &lt;- cameraOperation(CTtable= CToperation, # Tabla de operación\n                         stationCol= \"Station\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\") #, # Formato de las fechas\n                         #cameraCol=\"CT\")\n                         # sessionCol= \"Year\")\n\n# Generar las historias de detección ---------------------------------------\n## remove plroblem species\n# ind &lt;- which(datos_PCF$Species==\"Marmosa sp.\")\n# datos_PCF &lt;- datos_PCF[-ind,]\n\nDetHist_list &lt;- lapply(unique(data_south$Species), FUN = function(x) {\n  detectionHistory(\n    recordTable         = data_south, # Tabla de registros\n    camOp                = camop, # Matriz de operación de cámaras\n    stationCol           = \"Station\",\n    speciesCol           = \"Species\",\n    recordDateTimeCol    = \"eventDateTime\",\n    recordDateTimeFormat  = \"%Y-%m-%d\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 7, # Colapso de las historias a 10 días\n    day1                 = \"station\", # (\"survey\"),or #inicia en la fecha de cada station\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    output               = (\"binary\"), # (\"binary\") or (\"count\")\n    #unmarkedMultFrameInput=TRUE\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# put names to the species \nnames(DetHist_list) &lt;- unique(data_south$Species)\n\n# Finally we make a new list to put all the detection histories.\nylist &lt;- lapply(DetHist_list, FUN = function(x) x$detection_history)"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#use-the-detection-histories-to-make-the-a-matrix-for-vegan-and-the-incidence-for-inext.",
    "href": "posts/2024-06-25-species-diversity/index.html#use-the-detection-histories-to-make-the-a-matrix-for-vegan-and-the-incidence-for-inext.",
    "title": "Species diversity",
    "section": "Use the detection histories to make the a matrix for vegan and the incidence for iNEXT.",
    "text": "Use the detection histories to make the a matrix for vegan and the incidence for iNEXT.\nSpecies accumulation curves made using the package vegan, plot the increase in species richness as we add survey units. If the curve plateaus (flattens), then that suggests you have sampled the majority of the species in your survey site (camera or habitat type).\n\nCode# loop to make vegan matrix\nmat_vegan &lt;- matrix(NA, dim(ylist[[1]])[1], length(unique(data_south$Species)))\nfor(i in 1:length(unique(data_south$Species))){\n  mat_vegan[,i] &lt;- apply(ylist[[i]], 1, sum, na.rm=TRUE)\n  mat_vegan[,i] &lt;- tidyr::replace_na(mat_vegan[,i], 0) # replace na with 0\n}\n\ncolnames(mat_vegan)  &lt;- unique(data_south$Species)\nrownames(mat_vegan) &lt;- rownames(ylist[[1]])\n\nmat_vegan2 &lt;- as.data.frame(mat_vegan)\nmat_vegan2$hab &lt;- habs$hab_code\n# mat_vegan3 &lt;-  mat_vegan2 |&gt; \n  \n# Select specific rows by row numbers\nclosed_forest_rows &lt;- which(mat_vegan2$hab==\"closed_forest_evergreen_broad\")\nherbaceous_rows &lt;- which(mat_vegan2$hab==\"herbaceous_wetland\")\nherbs_rows &lt;- which(mat_vegan2$hab==\"herbs\")\nopen_forest_rows &lt;- which(mat_vegan2$hab==\"open_forest_evergreen_broad\")\nopen_forest2_rows &lt;- which(mat_vegan2$hab==\"open_forest_other\")\n\n\nclosed_forest &lt;- apply(mat_vegan2[closed_forest_rows,1:22], MARGIN = 2, sum)\nherbaceous_wetland &lt;- apply(mat_vegan2[herbaceous_rows,1:22], MARGIN = 2, sum)\nherbs  &lt;- apply(mat_vegan2[herbs_rows,1:22], MARGIN = 2, sum)\nopen_forest_evergreen &lt;- apply(mat_vegan2[open_forest_rows,1:22], MARGIN = 2, sum)\nopen_forest_other &lt;- apply(mat_vegan2[open_forest2_rows,1:22], MARGIN = 2, sum)\n\n# tb_sp &lt;- mat_vegan2 |&gt; group_by(hab)\n# hab_list &lt;- group_split(tb_sp)\n\n# make list of dataframe per habitat\nsp_by_hab &lt;- mat_vegan2 |&gt; dplyr::group_by(hab) %&gt;% split (.$hab)\n# arrange abundance (detection frecuency) mat for INEXT \ncesar_sp &lt;- t(rbind(\nt(colSums(sp_by_hab[[1]][,1:33])),\nt(colSums(sp_by_hab[[2]][,1:33])),\nt(colSums(sp_by_hab[[3]][,1:33])),\nt(colSums(sp_by_hab[[4]][,1:33])),\nt(colSums(sp_by_hab[[5]][,1:33]))\n))\n \ncolnames(cesar_sp) &lt;- names(sp_by_hab)\n\n\n\n# function to Format data to incidence and use iNext\nf_incidences &lt;- function(habitat_rows=closed_forest_rows){ylist %&gt;%  # historias de detection\n  map(~rowSums(.,na.rm = T)) %&gt;% # sumo las detecciones en cada sitio\n  reduce(cbind) %&gt;% # unimos las listas\n  as_data_frame() %&gt;% #formato dataframe\n  filter(row_number() %in% habitat_rows) |&gt; \n  t() %&gt;% # trasponer la tabla\n  as_tibble() %&gt;% #formato tibble\n  mutate_if(is.numeric,~(.&gt;=1)*1) %&gt;%  #como es incidencia, formateo a 1 y 0\n  rowSums() %&gt;%  # ahora si la suma de las incidencias en cada sitio\n  sort(decreasing=T) |&gt; \n  as_tibble() %&gt;% \n  add_row(value= length(habitat_rows), .before = 1) %&gt;%  # requiere que el primer valor sea el número de sitios\n  filter(!if_any()==0) |&gt;  # filter ceros\n  as.matrix() # Requiere formato de matriz\n}\n\n# Make incidence frequency table (is a list whit 5 habitats)\n# Make an empty list to store our data\nincidence_cesar &lt;- list() \nincidence_cesar[[1]] &lt;- f_incidences(closed_forest_rows)\nincidence_cesar[[2]] &lt;- f_incidences(herbaceous_rows)\nincidence_cesar[[3]] &lt;- f_incidences(herbs_rows)\nincidence_cesar[[4]] &lt;- f_incidences(open_forest_rows)\nincidence_cesar[[5]] &lt;- f_incidences(open_forest_other)\n\n# put names\nnames(incidence_cesar) &lt;- names(sp_by_hab)\n\n# we deleted this habitat type for making error\nincidence_cesar &lt;- within(incidence_cesar, rm(\"herbaceous_wetland\"))"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#to-start-lets-plot-the-species-vs-sites",
    "href": "posts/2024-06-25-species-diversity/index.html#to-start-lets-plot-the-species-vs-sites",
    "title": "Species diversity",
    "section": "To start lets plot the species vs sites",
    "text": "To start lets plot the species vs sites\n\nCode# Transpose if needed to have sample site names on rows\nabund_table&lt;-mat_vegan\n# Convert to relative frequencies\nabund_table &lt;- abund_table/rowSums(abund_table)\nlibrary(reshape2)\ndf&lt;-melt(abund_table)\ncolnames(df)&lt;-c(\"Sampled_site\",\"Species\",\"Value\")\nlibrary(plyr)\nlibrary(scales)\n \n# We are going to apply transformation to our data to make it\n# easier on eyes \n \n#df&lt;-ddply(df,.(Samples),transform,rescale=scale(Value))\ndf&lt;-ddply(df,.(Sampled_site),transform,rescale=sqrt(Value))\n \n# Plot heatmap\np &lt;- ggplot(df, aes(Species, Sampled_site)) + \n  geom_tile(aes(fill = rescale),colour = \"white\") + \n  scale_fill_gradient(low = \"white\",high = \"#1E5A8C\")+\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + theme(legend.position = \"none\",axis.ticks = element_blank(),axis.text.x = element_text(angle = 90, hjust = 1,size=6),axis.text.y = element_text(size=4))\n\n# ggplotly(p) # see interactive\n# View the plot\np\n\n\n\n\n\n\n\n\nNotice how some cameras didn’t record any species. Here showed as the gay horizontal line. Perhaps we need to delete those cameras."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-vegan",
    "href": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-vegan",
    "title": "Species diversity",
    "section": "Rarefaction using vegan\n",
    "text": "Rarefaction using vegan\n\n\nNotice that sites are cameras and the acumulation is species per camera not time\n\nRarefaction is a technique to assess expected species richness. Rarefaction allows the calculation of species richness for a given number of individual samples, based on the construction of rarefaction curves.\nThe issue that occurs when sampling various species in a community is that the larger the number of individuals sampled, the more species that will be found. Rarefaction curves are created by randomly re-sampling the pool of N samples multiple times and then plotting the average number of species found in each sample (1,2, … N). “Thus rarefaction generates the expected number of species in a small collection of n individuals (or n samples) drawn at random from the large pool of N samples.”. Rarefaction curves generally grow rapidly at first, as the most common species are found, but the curves plateau as only the rarest species remain to be sampled.\n\nCode\nrarecurve(mat_vegan, col = \"blue\") \n\n\n\n\n\n\nCoderarecurve(t(cesar_sp), col = \"blue\") \n\n\n\n\n\n\nCode\nsp1 &lt;- specaccum(mat_vegan)\nsp2 &lt;- specaccum(mat_vegan, \"random\")\n# sp2\n# summary(sp2)\nplot(sp1, ci.type=\"poly\", col=\"blue\", lwd=2, ci.lty=0, ci.col=\"lightblue\")\n\n\n\n\n\n\nCode# boxplot(sp2, col=\"yellow\", add=TRUE, pch=\"+\")\n\n\nmods &lt;- fitspecaccum(sp1, \"gleason\")\nplot(mods, col=\"hotpink\")\nboxplot(sp2, col = \"yellow\", border = \"blue\", lty=1, cex=0.3, add= TRUE)\n\n\n\n\n\n\nCode\n\n## Accumulation model\npool &lt;- poolaccum(mat_vegan)\n# summary(pool, display = \"chao\")\nplot(pool)\n\n\n\n\n\n\n\nRanked abundance distribution\nAn alternative approach to species abundance distribution is to plot logarithmic abundances in decreasing order, or against ranks of species.\n\nCodek &lt;- sample(nrow(mat_vegan), 1)\nrad &lt;- radfit(mat_vegan[22,]) # species 22\n# plot(rad)\nradlattice(rad)\n\n\n\n\n\n\n\nHill Diversities using vegan\n\nCode# data(BCI)\ni &lt;- sample(nrow(mat_vegan), 20)\nmod &lt;- renyi(mat_vegan) #selecting sites with more than one record\nplot(mod)\n\n\n\n\n\n\nCodemod &lt;- renyiaccum(mat_vegan[55:89,])\nplot(mod, as.table=TRUE, col = c(1, 2, 2))\n\n\n\n\n\n\nCodepersp(mod)\n\n\n\n\n\n\n\nTotal number of species\n\nCodeDT::datatable(round(specpool(mat_vegan),3))\n\n\n\n\n\nNumber of unseen species per camera\nLook at S.chao1\n\nCodeDT::datatable(\nt(round(as.data.frame(estimateR(mat_vegan[,])),3))\n)\n\n\n\n\nCode\n# save as dataframe\nS_per_site &lt;- as.data.frame(t(round(as.data.frame(estimateR(mat_vegan[,])),3)))\n# add sites\nS_per_site$Station &lt;- rownames(S_per_site)\n\n\nIt is weird to have .5 species in some sites."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#map-it-converting-cameratrap-operation-to-sf",
    "href": "posts/2024-06-25-species-diversity/index.html#map-it-converting-cameratrap-operation-to-sf",
    "title": "Species diversity",
    "section": "Map it converting Cameratrap-operation to sf",
    "text": "Map it converting Cameratrap-operation to sf\nIn this step we convert the Cameratrap-operation table to sf, we add elevation from AWS, habitat type and species per site (S.chao1) to finally visualize the map showing the number of species as the size of the dot.\n\nCode\n# datos_distinct &lt;- datos |&gt; distinct(Longitude, Latitude, CT, Proyecto)\n\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\nCToperation_sf &lt;-  st_as_sf(x = CToperation,\n                         coords = c(\"Longitude\", \n                                    \"Latitude\"),\n                         crs = projlatlon)\n\n# write.csv(habs, \"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")\nhabs &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/habitats.csv\")\n\nCToperation_elev_sf &lt;- get_elev_point(CToperation_sf, src = \"aws\") # get elevation from AWS\n\nCToperation_elev_sf &lt;- CToperation_elev_sf |&gt; left_join(habs, by='Station') |&gt; left_join(S_per_site, by='Station') |&gt; select(\"Station\", \"elevation\", \"minStart.x\",\"maxEnd.x\", \"Year.x\", \"hab_code\" , \"S.obs\", \"S.chao1\")\n\n# add habitat \n# CToperation_elev_sf$habs &lt;- habs$hab_code\n# see the map\nmapview(CToperation_elev_sf, zcol=\"hab_code\", cex = \"S.chao1\", alpha = 0)"
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#perhaps-it-is-easyer-to-plot-the-species-number-as-a-countour-map",
    "href": "posts/2024-06-25-species-diversity/index.html#perhaps-it-is-easyer-to-plot-the-species-number-as-a-countour-map",
    "title": "Species diversity",
    "section": "Perhaps it is easyer to plot the species number as a countour map",
    "text": "Perhaps it is easyer to plot the species number as a countour map\nOne advantage of using the eks density estimate, is that it is clearer what the output means. The 20% contour means “20% of the measurements lie inside this contour”. The documentation for eks takes issue with how stat_density_2d does its calculation, I don’t know who is right because the estimated value is species.\n\nCode# select chao\nspecies &lt;- dplyr::select(CToperation_elev_sf, \"S.chao1\")\n# hakeoides_coord &lt;- data.frame(sf::st_coordinates(hakeoides))\nSta_den &lt;- eks::st_kde(species) # calculate density\n\n# VERY conveniently, eks can generate an sf file of contour lines\ncontours &lt;- eks::st_get_contour(Sta_den, cont=c( 10,20,30,40,50,60,70,80, 90)) %&gt;% \n  mutate(value=as.numeric(levels(contlabel)))\n\n\n# pal_fun &lt;- leaflet::colorQuantile(\"YlOrRd\", NULL, n = 5)\n\np_popup &lt;- paste(\"Species\", as.numeric(levels(contours$estimate)), \"number\")\n\n\ntmap::tmap_mode(\"view\") # set mode to interactive plots\n\ntmap::tm_shape(species) + \n    tmap::tm_sf(col=\"black\", size=0.2) +\n  #   contours from eks\n  tmap::tm_shape(contours) +\n    tmap::tm_polygons(\"estimate\",\n                      palette=\"Reds\",\n                      alpha=0.5 )\n\n\n\n\nCode\n\n## geom_sf plot\n# ## suitable smoothing matrix gives optimally smoothed contours\n# gs1 &lt;- ggplot(Sta_den) + geom_sf(data=CToperation_elev_sf, fill=NA) + ggthemes::theme_map() +\n#     colorspace::scale_fill_discrete_sequential(palette=\"Heat2\") \n# gs1 + geom_sf(data=st_get_contour(Sta_den), aes(fill=label_percent(contlabel))) +\n#     coord_sf(xlim=xlim, ylim=ylim) \n\n\n\nIn general terms the species estimate per site seems to be larger near the mine and decrease with the distance to the mine. Also notice kernel density estimates are larger than s.chao1."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#nonmetric-multidimensional-scaling-nmds",
    "href": "posts/2024-06-25-species-diversity/index.html#nonmetric-multidimensional-scaling-nmds",
    "title": "Species diversity",
    "section": "Nonmetric Multidimensional Scaling (NMDS)",
    "text": "Nonmetric Multidimensional Scaling (NMDS)\nOften in ecological research, we are interested not only in comparing univariate descriptors of communities, like diversity, but also in how the constituent species — or the species composition — changes from one community to the next. One common tool to do this is non-metric multidimensional scaling, or NMDS. The goal of NMDS is to collapse information from multiple dimensions (e.g, from multiple communities, sites were the cameratrap was installed, etc.) into just a few, so that they can be visualized and interpreted. Unlike other ordination techniques that rely on (primarily Euclidean) distances, such as Principal Coordinates Analysis, NMDS uses rank orders, and thus is an extremely flexible technique that can accommodate a variety of different kinds of data.\nIf the treatment is continuous, such as an environmental gradient, then it might be useful to plot contour lines rather than convex hulls. We can get some, elevation data for our original community matrix and overlay them onto the NMDS plot using ordisurf.\n\nCode\nexample_NMDS=metaMDS(as.data.frame(mat_vegan), \n                     distance=\"euclidean\",\n                     zerodist = \"ignore\",\n                     trymax=300,\n                     k=5) # T\n#&gt; Wisconsin double standardization\n#&gt; Run 0 stress 0.1177774 \n#&gt; Run 1 stress 0.1190671 \n#&gt; Run 2 stress 0.1182024 \n#&gt; ... Procrustes: rmse 0.07074218  max resid 0.2215216 \n#&gt; Run 3 stress 0.1186761 \n#&gt; Run 4 stress 0.1185692 \n#&gt; Run 5 stress 0.1183873 \n#&gt; Run 6 stress 0.1193143 \n#&gt; Run 7 stress 0.1185143 \n#&gt; Run 8 stress 0.1182021 \n#&gt; ... Procrustes: rmse 0.06440753  max resid 0.2636042 \n#&gt; Run 9 stress 0.1192908 \n#&gt; Run 10 stress 0.1198606 \n#&gt; Run 11 stress 0.1193883 \n#&gt; Run 12 stress 0.1202121 \n#&gt; Run 13 stress 0.1180966 \n#&gt; ... Procrustes: rmse 0.07084224  max resid 0.2780033 \n#&gt; Run 14 stress 0.1193174 \n#&gt; Run 15 stress 0.1181108 \n#&gt; ... Procrustes: rmse 0.06988196  max resid 0.2111183 \n#&gt; Run 16 stress 0.1202602 \n#&gt; Run 17 stress 0.119029 \n#&gt; Run 18 stress 0.1202815 \n#&gt; Run 19 stress 0.1200043 \n#&gt; Run 20 stress 0.118795 \n#&gt; Run 21 stress 0.1197027 \n#&gt; Run 22 stress 0.1188575 \n#&gt; Run 23 stress 0.1212244 \n#&gt; Run 24 stress 0.118568 \n#&gt; Run 25 stress 0.1188395 \n#&gt; Run 26 stress 0.1185751 \n#&gt; Run 27 stress 0.1180883 \n#&gt; ... Procrustes: rmse 0.06275619  max resid 0.2906903 \n#&gt; Run 28 stress 0.1190307 \n#&gt; Run 29 stress 0.1198487 \n#&gt; Run 30 stress 0.1185136 \n#&gt; Run 31 stress 0.11882 \n#&gt; Run 32 stress 0.1200956 \n#&gt; Run 33 stress 0.1188893 \n#&gt; Run 34 stress 0.1192407 \n#&gt; Run 35 stress 0.119242 \n#&gt; Run 36 stress 0.1204335 \n#&gt; Run 37 stress 0.1188982 \n#&gt; Run 38 stress 0.1193028 \n#&gt; Run 39 stress 0.1190839 \n#&gt; Run 40 stress 0.1190849 \n#&gt; Run 41 stress 0.1193831 \n#&gt; Run 42 stress 0.1191109 \n#&gt; Run 43 stress 0.119896 \n#&gt; Run 44 stress 0.1199238 \n#&gt; Run 45 stress 0.1184579 \n#&gt; Run 46 stress 0.1199799 \n#&gt; Run 47 stress 0.1189736 \n#&gt; Run 48 stress 0.1186151 \n#&gt; Run 49 stress 0.1183965 \n#&gt; Run 50 stress 0.1220808 \n#&gt; Run 51 stress 0.1190792 \n#&gt; Run 52 stress 0.1191395 \n#&gt; Run 53 stress 0.1184784 \n#&gt; Run 54 stress 0.1180489 \n#&gt; ... Procrustes: rmse 0.05887094  max resid 0.2999552 \n#&gt; Run 55 stress 0.1182546 \n#&gt; ... Procrustes: rmse 0.06737719  max resid 0.3237446 \n#&gt; Run 56 stress 0.1197451 \n#&gt; Run 57 stress 0.1177084 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.04051138  max resid 0.1829936 \n#&gt; Run 58 stress 0.1200966 \n#&gt; Run 59 stress 0.1184144 \n#&gt; Run 60 stress 0.1182877 \n#&gt; Run 61 stress 0.1197014 \n#&gt; Run 62 stress 0.1184401 \n#&gt; Run 63 stress 0.1192861 \n#&gt; Run 64 stress 0.1191498 \n#&gt; Run 65 stress 0.118736 \n#&gt; Run 66 stress 0.1199807 \n#&gt; Run 67 stress 0.1194467 \n#&gt; Run 68 stress 0.1174598 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.06049486  max resid 0.282694 \n#&gt; Run 69 stress 0.1186378 \n#&gt; Run 70 stress 0.1184765 \n#&gt; Run 71 stress 0.122219 \n#&gt; Run 72 stress 0.1197858 \n#&gt; Run 73 stress 0.1206786 \n#&gt; Run 74 stress 0.1174238 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.05759543  max resid 0.2394291 \n#&gt; Run 75 stress 0.1193698 \n#&gt; Run 76 stress 0.1205898 \n#&gt; Run 77 stress 0.1183188 \n#&gt; Run 78 stress 0.1185276 \n#&gt; Run 79 stress 0.120176 \n#&gt; Run 80 stress 0.117943 \n#&gt; Run 81 stress 0.1188043 \n#&gt; Run 82 stress 0.1187974 \n#&gt; Run 83 stress 0.1184028 \n#&gt; Run 84 stress 0.1192287 \n#&gt; Run 85 stress 0.1212102 \n#&gt; Run 86 stress 0.1192168 \n#&gt; Run 87 stress 0.1198064 \n#&gt; Run 88 stress 0.1190652 \n#&gt; Run 89 stress 0.118604 \n#&gt; Run 90 stress 0.1174974 \n#&gt; ... Procrustes: rmse 0.056321  max resid 0.3113576 \n#&gt; Run 91 stress 0.1187365 \n#&gt; Run 92 stress 0.1197554 \n#&gt; Run 93 stress 0.1190285 \n#&gt; Run 94 stress 0.1189062 \n#&gt; Run 95 stress 0.1191222 \n#&gt; Run 96 stress 0.12066 \n#&gt; Run 97 stress 0.1186518 \n#&gt; Run 98 stress 0.1199949 \n#&gt; Run 99 stress 0.118863 \n#&gt; Run 100 stress 0.1212089 \n#&gt; Run 101 stress 0.1174109 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.0679859  max resid 0.2275844 \n#&gt; Run 102 stress 0.1191274 \n#&gt; Run 103 stress 0.1175622 \n#&gt; ... Procrustes: rmse 0.03375687  max resid 0.1663124 \n#&gt; Run 104 stress 0.1192651 \n#&gt; Run 105 stress 0.1189536 \n#&gt; Run 106 stress 0.1185264 \n#&gt; Run 107 stress 0.1172245 \n#&gt; ... New best solution\n#&gt; ... Procrustes: rmse 0.0611848  max resid 0.2219821 \n#&gt; Run 108 stress 0.1192171 \n#&gt; Run 109 stress 0.1200361 \n#&gt; Run 110 stress 0.1189211 \n#&gt; Run 111 stress 0.1184907 \n#&gt; Run 112 stress 0.1187111 \n#&gt; Run 113 stress 0.1205783 \n#&gt; Run 114 stress 0.1187611 \n#&gt; Run 115 stress 0.1188279 \n#&gt; Run 116 stress 0.1196921 \n#&gt; Run 117 stress 0.1190237 \n#&gt; Run 118 stress 0.1197422 \n#&gt; Run 119 stress 0.1194007 \n#&gt; Run 120 stress 0.1192685 \n#&gt; Run 121 stress 0.1212033 \n#&gt; Run 122 stress 0.1189801 \n#&gt; Run 123 stress 0.1207862 \n#&gt; Run 124 stress 0.1187909 \n#&gt; Run 125 stress 0.1201778 \n#&gt; Run 126 stress 0.1198274 \n#&gt; Run 127 stress 0.1177041 \n#&gt; ... Procrustes: rmse 0.06390593  max resid 0.259464 \n#&gt; Run 128 stress 0.1197601 \n#&gt; Run 129 stress 0.1184817 \n#&gt; Run 130 stress 0.1199462 \n#&gt; Run 131 stress 0.120495 \n#&gt; Run 132 stress 0.1187185 \n#&gt; Run 133 stress 0.1180686 \n#&gt; Run 134 stress 0.1181763 \n#&gt; Run 135 stress 0.1179641 \n#&gt; Run 136 stress 0.1184331 \n#&gt; Run 137 stress 0.1214648 \n#&gt; Run 138 stress 0.1194914 \n#&gt; Run 139 stress 0.1174632 \n#&gt; ... Procrustes: rmse 0.06849988  max resid 0.2453524 \n#&gt; Run 140 stress 0.1193805 \n#&gt; Run 141 stress 0.1187623 \n#&gt; Run 142 stress 0.1204564 \n#&gt; Run 143 stress 0.118445 \n#&gt; Run 144 stress 0.1196069 \n#&gt; Run 145 stress 0.1191813 \n#&gt; Run 146 stress 0.1196727 \n#&gt; Run 147 stress 0.1200339 \n#&gt; Run 148 stress 0.1187356 \n#&gt; Run 149 stress 0.1194666 \n#&gt; Run 150 stress 0.1180347 \n#&gt; Run 151 stress 0.120575 \n#&gt; Run 152 stress 0.1192261 \n#&gt; Run 153 stress 0.118367 \n#&gt; Run 154 stress 0.1178559 \n#&gt; Run 155 stress 0.1197977 \n#&gt; Run 156 stress 0.1185137 \n#&gt; Run 157 stress 0.1189209 \n#&gt; Run 158 stress 0.1204261 \n#&gt; Run 159 stress 0.119086 \n#&gt; Run 160 stress 0.1199581 \n#&gt; Run 161 stress 0.1186471 \n#&gt; Run 162 stress 0.1194039 \n#&gt; Run 163 stress 0.1179763 \n#&gt; Run 164 stress 0.1194692 \n#&gt; Run 165 stress 0.1186965 \n#&gt; Run 166 stress 0.1193988 \n#&gt; Run 167 stress 0.1188114 \n#&gt; Run 168 stress 0.1201551 \n#&gt; Run 169 stress 0.1186381 \n#&gt; Run 170 stress 0.1188598 \n#&gt; Run 171 stress 0.1197001 \n#&gt; Run 172 stress 0.1187617 \n#&gt; Run 173 stress 0.1183851 \n#&gt; Run 174 stress 0.1193384 \n#&gt; Run 175 stress 0.1186703 \n#&gt; Run 176 stress 0.1187232 \n#&gt; Run 177 stress 0.1191901 \n#&gt; Run 178 stress 0.1184736 \n#&gt; Run 179 stress 0.1194356 \n#&gt; Run 180 stress 0.1179044 \n#&gt; Run 181 stress 0.1196321 \n#&gt; Run 182 stress 0.1192952 \n#&gt; Run 183 stress 0.118532 \n#&gt; Run 184 stress 0.1189211 \n#&gt; Run 185 stress 0.119504 \n#&gt; Run 186 stress 0.1206321 \n#&gt; Run 187 stress 0.1195057 \n#&gt; Run 188 stress 0.1197062 \n#&gt; Run 189 stress 0.1192579 \n#&gt; Run 190 stress 0.1179609 \n#&gt; Run 191 stress 0.1192131 \n#&gt; Run 192 stress 0.118169 \n#&gt; Run 193 stress 0.119915 \n#&gt; Run 194 stress 0.1186221 \n#&gt; Run 195 stress 0.1183026 \n#&gt; Run 196 stress 0.1203422 \n#&gt; Run 197 stress 0.1192234 \n#&gt; Run 198 stress 0.1205082 \n#&gt; Run 199 stress 0.1207606 \n#&gt; Run 200 stress 0.119796 \n#&gt; Run 201 stress 0.118437 \n#&gt; Run 202 stress 0.118915 \n#&gt; Run 203 stress 0.1193151 \n#&gt; Run 204 stress 0.1179937 \n#&gt; Run 205 stress 0.1175377 \n#&gt; ... Procrustes: rmse 0.07755422  max resid 0.2863116 \n#&gt; Run 206 stress 0.1194825 \n#&gt; Run 207 stress 0.1201565 \n#&gt; Run 208 stress 0.1186421 \n#&gt; Run 209 stress 0.1190691 \n#&gt; Run 210 stress 0.1198021 \n#&gt; Run 211 stress 0.1212779 \n#&gt; Run 212 stress 0.1198248 \n#&gt; Run 213 stress 0.1192504 \n#&gt; Run 214 stress 0.1192232 \n#&gt; Run 215 stress 0.118284 \n#&gt; Run 216 stress 0.1181519 \n#&gt; Run 217 stress 0.1192815 \n#&gt; Run 218 stress 0.1187013 \n#&gt; Run 219 stress 0.1183781 \n#&gt; Run 220 stress 0.1204014 \n#&gt; Run 221 stress 0.1188937 \n#&gt; Run 222 stress 0.1193969 \n#&gt; Run 223 stress 0.1208799 \n#&gt; Run 224 stress 0.1192987 \n#&gt; Run 225 stress 0.119429 \n#&gt; Run 226 stress 0.1194114 \n#&gt; Run 227 stress 0.1199701 \n#&gt; Run 228 stress 0.1200478 \n#&gt; Run 229 stress 0.1184174 \n#&gt; Run 230 stress 0.1205673 \n#&gt; Run 231 stress 0.1204909 \n#&gt; Run 232 stress 0.1209301 \n#&gt; Run 233 stress 0.1184409 \n#&gt; Run 234 stress 0.1194031 \n#&gt; Run 235 stress 0.1177934 \n#&gt; Run 236 stress 0.1198734 \n#&gt; Run 237 stress 0.1181008 \n#&gt; Run 238 stress 0.1197355 \n#&gt; Run 239 stress 0.1191508 \n#&gt; Run 240 stress 0.1199091 \n#&gt; Run 241 stress 0.1173278 \n#&gt; ... Procrustes: rmse 0.06073433  max resid 0.2836648 \n#&gt; Run 242 stress 0.1186113 \n#&gt; Run 243 stress 0.1174425 \n#&gt; ... Procrustes: rmse 0.05089227  max resid 0.2447109 \n#&gt; Run 244 stress 0.1188248 \n#&gt; Run 245 stress 0.1212179 \n#&gt; Run 246 stress 0.1194616 \n#&gt; Run 247 stress 0.1185788 \n#&gt; Run 248 stress 0.1202058 \n#&gt; Run 249 stress 0.118765 \n#&gt; Run 250 stress 0.1179242 \n#&gt; Run 251 stress 0.1199733 \n#&gt; Run 252 stress 0.1177513 \n#&gt; Run 253 stress 0.1184833 \n#&gt; Run 254 stress 0.1209253 \n#&gt; Run 255 stress 0.1203678 \n#&gt; Run 256 stress 0.1177153 \n#&gt; ... Procrustes: rmse 0.06590095  max resid 0.2567042 \n#&gt; Run 257 stress 0.1197411 \n#&gt; Run 258 stress 0.1182026 \n#&gt; Run 259 stress 0.118651 \n#&gt; Run 260 stress 0.1187632 \n#&gt; Run 261 stress 0.1193286 \n#&gt; Run 262 stress 0.1205443 \n#&gt; Run 263 stress 0.1196058 \n#&gt; Run 264 stress 0.1206121 \n#&gt; Run 265 stress 0.1187618 \n#&gt; Run 266 stress 0.1196603 \n#&gt; Run 267 stress 0.1185851 \n#&gt; Run 268 stress 0.1198875 \n#&gt; Run 269 stress 0.1186513 \n#&gt; Run 270 stress 0.1202472 \n#&gt; Run 271 stress 0.1185756 \n#&gt; Run 272 stress 0.1181298 \n#&gt; Run 273 stress 0.1181277 \n#&gt; Run 274 stress 0.1217581 \n#&gt; Run 275 stress 0.1175877 \n#&gt; ... Procrustes: rmse 0.05447114  max resid 0.2159125 \n#&gt; Run 276 stress 0.1189672 \n#&gt; Run 277 stress 0.1182659 \n#&gt; Run 278 stress 0.1194387 \n#&gt; Run 279 stress 0.1196693 \n#&gt; Run 280 stress 0.1188886 \n#&gt; Run 281 stress 0.1186107 \n#&gt; Run 282 stress 0.1205422 \n#&gt; Run 283 stress 0.1201299 \n#&gt; Run 284 stress 0.1195645 \n#&gt; Run 285 stress 0.1173808 \n#&gt; ... Procrustes: rmse 0.05035755  max resid 0.2227716 \n#&gt; Run 286 stress 0.1202531 \n#&gt; Run 287 stress 0.118913 \n#&gt; Run 288 stress 0.1199529 \n#&gt; Run 289 stress 0.1202448 \n#&gt; Run 290 stress 0.117433 \n#&gt; ... Procrustes: rmse 0.05803485  max resid 0.2862115 \n#&gt; Run 291 stress 0.1180754 \n#&gt; Run 292 stress 0.1202644 \n#&gt; Run 293 stress 0.1188651 \n#&gt; Run 294 stress 0.1182039 \n#&gt; Run 295 stress 0.1196823 \n#&gt; Run 296 stress 0.1204577 \n#&gt; Run 297 stress 0.1207903 \n#&gt; Run 298 stress 0.1192676 \n#&gt; Run 299 stress 0.1203571 \n#&gt; Run 300 stress 0.1196615 \n#&gt; *** Best solution was not repeated -- monoMDS stopping criteria:\n#&gt;    300: no. of iterations &gt;= maxit\n\n# plot the graph\nvegan::ordisurf((example_NMDS),CToperation_elev_sf$elevation,main=\"\",col=\"forestgreen\", trymax=100) # bubble = 2\n#&gt; \n#&gt; Family: gaussian \n#&gt; Link function: identity \n#&gt; \n#&gt; Formula:\n#&gt; y ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n#&gt; \n#&gt; Estimated degrees of freedom:\n#&gt; 5.26  total = 6.26 \n#&gt; \n#&gt; REML score: 724.4115\nvegan::orditorp(example_NMDS,display=\"species\",col=\"blue\",air=0.1,\n   cex=0.5)\n\n\n\n\n\n\n\nWe can make a similar plot using gg_ordisurf from the package ggordiplots but also incorporating habitat type.\n\nCode# ggordiplots::gg_ordisurf()\n# To fit a surface with ggordiplots:\n\n \nordiplot &lt;- gg_ordisurf(ord = example_NMDS, \n                        env.var = CToperation_elev_sf$elevation,\n                        var.label = \"Elevation\",\n                        pt.size = 2,\n                        groups = CToperation_elev_sf$hab_code,\n                        binwidth = 50)\n\n\n\n\n\n\nCode\n# ggplotly(ordiplot$plot) # see interactive\n\n# # alternative using biodiversityR\n# \n# A1.surface &lt;- ordisurf( y=example_NMDS)\n# A1.grid &lt;- ordisurfgrid.long(A1.surface)\n# # Preparing the plot\n# \n# plotgg4 &lt;- ggplot() + \n#     geom_contour_filled(data=A1.grid, \n#                         aes(x=x, y=y, z=z)) +\n#     geom_vline(xintercept = c(0), color = \"grey70\", linetype = 2) +\n#     geom_hline(yintercept = c(0), color = \"grey70\", linetype = 2) +  \n#     xlab(axis.long2[1, \"label\"]) +\n#     ylab(axis.long2[2, \"label\"]) +  \n#     scale_x_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +\n#     scale_y_continuous(sec.axis = dup_axis(labels=NULL, name=NULL)) +\n#     geom_point(data=sites.long2, \n#                aes(x=axis1, y=axis2, shape=Management), \n#                colour=\"red\", size=4) +\n#     BioR.theme +\n#     scale_fill_viridis_d() +\n#     labs(fill=\"A1\") +\n#     coord_fixed(ratio=1)\n# # and seeing the plot.\n# \n# plotgg4\n\n\nThe contours connect species in the ordination space that are predicted to have the same elevation."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-inext",
    "href": "posts/2024-06-25-species-diversity/index.html#rarefaction-using-inext",
    "title": "Species diversity",
    "section": "Rarefaction using iNEXT\n",
    "text": "Rarefaction using iNEXT\n\n\nCode\n\n\nout &lt;- iNEXT(incidence_cesar, # The data frame\n             q=0,# The type of diversity estimator \n             datatype=\"incidence_freq\",   # The type of analysis\n             knots=40,                    # The number of data points \n             se=TRUE,                     # confidence intervals\n             conf=0.95,                   # The level of confidence intervals\n             nboot=100)                    # The number of bootstraps \n\nggiNEXT(out, type=1)\n\n\n\n\n\n\nCodeggiNEXT(out, type=2)\n\n\n\n\n\n\nCodeggiNEXT(out, type=3)\n\n\n\n\n\n\nCode\np1 &lt;- ggiNEXT(out, type=1)+ theme_classic() +   #  type 1 = the diversity estimator\n        labs(x = \"Survey sites\", y = \"Richness\")\n  \np2 &lt;- ggiNEXT(out, type=2)+ theme_classic() +    #  type 2 = the survey coverage\n        labs(x = \"Survey sites\")\n    \ngrid.arrange(p1, p2, nrow = 2)\n\n\n\n\n\n\nCode##############\nout2 &lt;- iNEXT(incidence_cesar, q=c(0,1,2) ,datatype=\"incidence_freq\" )\n\nggiNEXT(out2, type=1, facet.var=\"Order.q\", color.var=\"Assemblage\") + theme_classic() \n\n\n\n\n\n\n\nThe iNEXT package is well suited for comparisons of diversity indices through the use of hill numbers - of which the q value = 1 represents the traditional diversity indices: The species richness is q = 0. The Shannon index is (q=1), and Simpson is (q=2). Note Increasing values of q reduces the influence of rare species on our estimate of community diversity."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#package-citation",
    "href": "posts/2024-06-25-species-diversity/index.html#package-citation",
    "title": "Species diversity",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.4.2 (R Core Team 2024) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.33 (Xie, Cheng, and Tan 2024), eks v. 1.0.5 (Duong 2024), elevatr v. 0.99.0 (Hollister et al. 2023), ggforce v. 0.4.2 (Pedersen 2024a), ggordiplots v. 0.4.3 (Quensen, Simpson, and Oksanen 2024), ggvegan v. 0.1.999 (Simpson and Oksanen 2023), gridExtra v. 2.3 (Auguie 2017), iNEXT v. 3.0.1 (Chao et al. 2014; Hsieh, Ma, and Chao 2024), kableExtra v. 1.4.0 (Zhu 2024), knitr v. 1.49 (Xie 2014, 2015, 2024), mapview v. 2.11.2 (Appelhans et al. 2023), MeanRarity v. 0.0.1.5 (Roswell and Dushoff 2023), patchwork v. 1.3.0 (Pedersen 2024b), plotly v. 4.10.4 (Sievert 2020), plyr v. 1.8.9 (Wickham 2011), reshape2 v. 1.4.4 (Wickham 2007), rmarkdown v. 2.29 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), scales v. 1.3.0 (Wickham, Pedersen, and Seidel 2023), sf v. 1.0.19 (Pebesma 2018; Pebesma and Bivand 2023), SpadeR v. 0.1.1 (Chao et al. 2016), tidyverse v. 2.0.0 (Wickham et al. 2019), tmap v. 3.3.4 (Tennekes 2018), vegan v. 2.6.8 (Oksanen et al. 2024)."
  },
  {
    "objectID": "posts/2024-06-25-species-diversity/index.html#sesion-info",
    "href": "posts/2024-06-25-species-diversity/index.html#sesion-info",
    "title": "Species diversity",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.4.2 (2024-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-12-15\n#&gt;  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version    date (UTC) lib source\n#&gt;    abind               1.4-8      2024-09-12 [1] CRAN (R 4.4.1)\n#&gt;    base64enc           0.1-3      2015-07-28 [1] CRAN (R 4.4.0)\n#&gt;    brew                1.0-10     2023-12-16 [1] CRAN (R 4.4.2)\n#&gt;    bslib               0.8.0      2024-07-29 [1] CRAN (R 4.4.2)\n#&gt;    cachem              1.1.0      2024-05-16 [1] CRAN (R 4.4.2)\n#&gt;    camtrapR          * 2.3.0      2024-02-26 [1] CRAN (R 4.4.2)\n#&gt;    cellranger          1.1.0      2016-07-27 [1] CRAN (R 4.4.2)\n#&gt;    class               7.3-22     2023-05-03 [2] CRAN (R 4.4.2)\n#&gt;    classInt            0.4-10     2023-09-05 [1] CRAN (R 4.4.2)\n#&gt;    cli                 3.6.3      2024-06-21 [1] CRAN (R 4.4.2)\n#&gt;    cluster             2.1.6      2023-12-01 [2] CRAN (R 4.4.2)\n#&gt;    codetools           0.2-20     2024-03-31 [2] CRAN (R 4.4.2)\n#&gt;    colorspace          2.1-1      2024-07-26 [1] CRAN (R 4.4.2)\n#&gt;    crayon              1.5.3      2024-06-20 [1] CRAN (R 4.4.2)\n#&gt;    crosstalk           1.2.1      2023-11-23 [1] CRAN (R 4.4.2)\n#&gt;    curl                6.0.0      2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    data.table          1.16.4     2024-12-06 [1] CRAN (R 4.4.2)\n#&gt;    DBI                 1.2.3      2024-06-02 [1] CRAN (R 4.4.2)\n#&gt;    devtools            2.4.5      2022-10-11 [1] CRAN (R 4.4.2)\n#&gt;    dichromat           2.0-0.1    2022-05-02 [1] CRAN (R 4.4.0)\n#&gt;    digest              0.6.37     2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    dplyr             * 1.1.4      2023-11-17 [1] CRAN (R 4.4.2)\n#&gt;    DT                * 0.33       2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    e1071               1.7-16     2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    eks               * 1.0.5      2024-05-01 [1] CRAN (R 4.4.2)\n#&gt;    elevatr           * 0.99.0     2023-09-12 [1] CRAN (R 4.4.2)\n#&gt;    ellipsis            0.3.2      2021-04-29 [1] CRAN (R 4.4.2)\n#&gt;    evaluate            1.0.1      2024-10-10 [1] CRAN (R 4.4.2)\n#&gt;    fansi               1.0.6      2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    farver              2.1.2      2024-05-13 [1] CRAN (R 4.4.2)\n#&gt;    fastmap             1.2.0      2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    forcats           * 1.0.0      2023-01-29 [1] CRAN (R 4.4.2)\n#&gt;    fs                  1.6.5      2024-10-30 [1] CRAN (R 4.4.2)\n#&gt;    generics            0.1.3      2022-07-05 [1] CRAN (R 4.4.2)\n#&gt;    ggforce           * 0.4.2      2024-02-19 [1] CRAN (R 4.4.2)\n#&gt;    ggordiplots       * 0.4.3      2024-01-14 [1] CRAN (R 4.4.2)\n#&gt;    ggplot2           * 3.5.1      2024-04-23 [1] CRAN (R 4.4.2)\n#&gt;    ggrepel             0.9.6      2024-09-07 [1] CRAN (R 4.4.2)\n#&gt;    ggvegan           * 0.1.999    2024-12-15 [1] Github (gavinsimpson/ggvegan@058c08c)\n#&gt;    glue              * 1.8.0      2024-09-30 [1] CRAN (R 4.4.2)\n#&gt;    grateful          * 0.2.10     2024-09-04 [1] CRAN (R 4.4.2)\n#&gt;    gridExtra         * 2.3        2017-09-09 [1] CRAN (R 4.4.2)\n#&gt;    gtable              0.3.6      2024-10-25 [1] CRAN (R 4.4.2)\n#&gt;    hms                 1.1.3      2023-03-21 [1] CRAN (R 4.4.2)\n#&gt;    htmltools           0.5.8.1    2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    htmlwidgets         1.6.4      2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    httpuv              1.6.15     2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    httr                1.4.7      2023-08-15 [1] CRAN (R 4.4.2)\n#&gt;    iNEXT             * 3.0.1      2024-03-24 [1] CRAN (R 4.4.2)\n#&gt;    isoband             0.2.7      2022-12-20 [1] CRAN (R 4.4.2)\n#&gt;    jquerylib           0.1.4      2021-04-26 [1] CRAN (R 4.4.2)\n#&gt;    jsonlite            1.8.9      2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    kableExtra        * 1.4.0      2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    KernSmooth          2.23-24    2024-05-17 [2] CRAN (R 4.4.2)\n#&gt;    knitr             * 1.49       2024-11-08 [1] CRAN (R 4.4.2)\n#&gt;    ks                  1.14.3     2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    labeling            0.4.3      2023-08-29 [1] CRAN (R 4.4.0)\n#&gt;    later               1.3.2      2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    lattice           * 0.22-6     2024-03-20 [2] CRAN (R 4.4.2)\n#&gt;    lazyeval            0.2.2      2019-03-15 [1] CRAN (R 4.4.2)\n#&gt;    leafem              0.2.3      2023-09-17 [1] CRAN (R 4.4.2)\n#&gt;    leaflet             2.2.2      2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    leaflet.providers   2.0.0      2023-10-17 [1] CRAN (R 4.4.2)\n#&gt;    leafpop             0.1.0      2021-05-22 [1] CRAN (R 4.4.2)\n#&gt;    leafsync            0.1.0      2019-03-05 [1] CRAN (R 4.4.2)\n#&gt;    lifecycle           1.0.4      2023-11-07 [1] CRAN (R 4.4.2)\n#&gt;    lubridate         * 1.9.4      2024-12-08 [1] CRAN (R 4.4.2)\n#&gt;    lwgeom              0.2-14     2024-02-21 [1] CRAN (R 4.4.2)\n#&gt;    magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.4.2)\n#&gt;    maplegend           0.2.0      2024-11-12 [1] CRAN (R 4.4.2)\n#&gt;    mapsf               0.12.0     2024-10-22 [1] CRAN (R 4.4.2)\n#&gt;    mapview           * 2.11.2     2023-10-13 [1] CRAN (R 4.4.2)\n#&gt;    MASS                7.3-61     2024-06-13 [2] CRAN (R 4.4.2)\n#&gt;    Matrix              1.7-1      2024-10-18 [2] CRAN (R 4.4.2)\n#&gt;    mclust              6.1.1      2024-04-29 [1] CRAN (R 4.4.2)\n#&gt;    MeanRarity        * 0.0.1.0005 2024-12-15 [1] Github (mikeroswell/MeanRarity@a8b518d)\n#&gt;    memoise             2.0.1      2021-11-26 [1] CRAN (R 4.4.2)\n#&gt;    mgcv                1.9-1      2023-12-21 [2] CRAN (R 4.4.2)\n#&gt;    mime                0.12       2021-09-28 [1] CRAN (R 4.4.0)\n#&gt;    miniUI              0.1.1.1    2018-05-18 [1] CRAN (R 4.4.2)\n#&gt;    munsell             0.5.1      2024-04-01 [1] CRAN (R 4.4.2)\n#&gt;    mvtnorm             1.3-2      2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    nlme                3.1-166    2024-08-14 [2] CRAN (R 4.4.2)\n#&gt;    patchwork         * 1.3.0      2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    permute           * 0.9-7      2022-01-27 [1] CRAN (R 4.4.2)\n#&gt;    pillar              1.9.0      2023-03-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgbuild            1.4.5      2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgload             1.4.0      2024-06-28 [1] CRAN (R 4.4.2)\n#&gt;    plotly            * 4.10.4     2024-01-13 [1] CRAN (R 4.4.2)\n#&gt;    plyr              * 1.8.9      2023-10-02 [1] CRAN (R 4.4.2)\n#&gt;    png                 0.1-8      2022-11-29 [1] CRAN (R 4.4.0)\n#&gt;    polyclip            1.10-7     2024-07-23 [1] CRAN (R 4.4.1)\n#&gt;    pracma              2.4.4      2023-11-10 [1] CRAN (R 4.4.2)\n#&gt;    prettyunits         1.2.0      2023-09-24 [1] CRAN (R 4.4.2)\n#&gt;    profvis             0.4.0      2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    progress            1.2.3      2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    progressr           0.15.0     2024-10-29 [1] CRAN (R 4.4.2)\n#&gt;    promises            1.3.0      2024-04-05 [1] CRAN (R 4.4.2)\n#&gt;    proxy               0.4-27     2022-06-09 [1] CRAN (R 4.4.2)\n#&gt;    purrr             * 1.0.2      2023-08-10 [1] CRAN (R 4.4.2)\n#&gt;    R6                  2.5.1      2021-08-19 [1] CRAN (R 4.4.2)\n#&gt;    raster              3.6-30     2024-10-02 [1] CRAN (R 4.4.2)\n#&gt;    rbibutils           2.3        2024-10-04 [1] CRAN (R 4.4.2)\n#&gt;    RColorBrewer        1.1-3      2022-04-03 [1] CRAN (R 4.4.0)\n#&gt;    Rcpp                1.0.13-1   2024-11-02 [1] CRAN (R 4.4.2)\n#&gt;    RcppNumerical       0.6-0      2023-09-06 [1] CRAN (R 4.4.2)\n#&gt;  D RcppParallel        5.1.9      2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    Rdpack              2.6.2      2024-11-15 [1] CRAN (R 4.4.2)\n#&gt;    readr             * 2.1.5      2024-01-10 [1] CRAN (R 4.4.2)\n#&gt;    readxl            * 1.4.3      2023-07-06 [1] CRAN (R 4.4.2)\n#&gt;    remotes             2.5.0      2024-03-17 [1] CRAN (R 4.4.2)\n#&gt;    renv                1.0.11     2024-10-12 [1] CRAN (R 4.4.2)\n#&gt;    reshape2          * 1.4.4      2020-04-09 [1] CRAN (R 4.4.2)\n#&gt;    rlang               1.1.4      2024-06-04 [1] CRAN (R 4.4.2)\n#&gt;    rmarkdown           2.29       2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    rstudioapi          0.17.1     2024-10-22 [1] CRAN (R 4.4.2)\n#&gt;    s2                  1.1.7      2024-07-17 [1] CRAN (R 4.4.2)\n#&gt;    sass                0.4.9      2024-03-15 [1] CRAN (R 4.4.2)\n#&gt;    satellite           1.0.5      2024-02-10 [1] CRAN (R 4.4.2)\n#&gt;    scales            * 1.3.0      2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    secr                5.1.0      2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    sessioninfo         1.2.2      2021-12-06 [1] CRAN (R 4.4.2)\n#&gt;    sf                * 1.0-19     2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    shiny               1.9.1      2024-08-01 [1] CRAN (R 4.4.2)\n#&gt;    slippymath          0.3.1      2019-06-28 [1] CRAN (R 4.4.2)\n#&gt;    sp                  2.1-4      2024-04-30 [1] CRAN (R 4.4.2)\n#&gt;    SpadeR            * 0.1.1      2016-09-06 [1] CRAN (R 4.4.0)\n#&gt;    stars               0.6-7      2024-11-07 [1] CRAN (R 4.4.2)\n#&gt;    stringi             1.8.4      2024-05-06 [1] CRAN (R 4.4.0)\n#&gt;    stringr           * 1.5.1      2023-11-14 [1] CRAN (R 4.4.2)\n#&gt;    svglite             2.1.3      2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    systemfonts         1.1.0      2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    terra               1.8-5      2024-12-12 [1] CRAN (R 4.4.2)\n#&gt;    tibble            * 3.2.1      2023-03-20 [1] CRAN (R 4.4.2)\n#&gt;    tidyr             * 1.3.1      2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    tidyselect          1.2.1      2024-03-11 [1] CRAN (R 4.4.2)\n#&gt;    tidyverse         * 2.0.0      2023-02-22 [1] CRAN (R 4.4.2)\n#&gt;    timechange          0.3.0      2024-01-18 [1] CRAN (R 4.4.2)\n#&gt;    tmap              * 3.3-4      2023-09-12 [1] CRAN (R 4.4.2)\n#&gt;    tmaptools           3.1-1      2021-01-19 [1] CRAN (R 4.4.2)\n#&gt;    tweenr              2.0.3      2024-02-26 [1] CRAN (R 4.4.2)\n#&gt;    tzdb                0.4.0      2023-05-12 [1] CRAN (R 4.4.2)\n#&gt;    units               0.8-5      2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    urlchecker          1.0.1      2021-11-30 [1] CRAN (R 4.4.2)\n#&gt;    usethis             3.0.0      2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    utf8                1.2.4      2023-10-22 [1] CRAN (R 4.4.2)\n#&gt;    uuid                1.2-1      2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    vctrs               0.6.5      2023-12-01 [1] CRAN (R 4.4.2)\n#&gt;    vegan             * 2.6-8      2024-08-28 [1] CRAN (R 4.4.2)\n#&gt;    viridisLite         0.4.2      2023-05-02 [1] CRAN (R 4.4.2)\n#&gt;    withr               3.0.2      2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    wk                  0.9.4      2024-10-11 [1] CRAN (R 4.4.2)\n#&gt;    xfun                0.49       2024-10-31 [1] CRAN (R 4.4.2)\n#&gt;    XML                 3.99-0.17  2024-06-25 [1] CRAN (R 4.4.1)\n#&gt;    xml2                1.3.6      2023-12-04 [1] CRAN (R 4.4.2)\n#&gt;    xtable              1.8-4      2019-04-21 [1] CRAN (R 4.4.2)\n#&gt;    yaml                2.3.10     2024-07-26 [1] CRAN (R 4.4.1)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.4\n#&gt;  [2] C:/Program Files/R/R-4.4.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html",
    "href": "posts/2024-07-17-stackmodel/index.knit.html",
    "title": "“Stacked” Models",
    "section": "",
    "text": "One of the advantages of ubms is that it is possible to include random effects in your models, using the same syntax as lme4 (Bates et al. 2015). For example, if you have a group site covariate, you can fit a model with random intercepts by group by including + (1|group) in your parameter formula. Random slopes, or a combination of random slopes and intercepts, are also possible.\nTo illustrate the use of random effects of ubms, in this post fits we fit a model using a “stacked” model approach. Additionally in ubms you can instead include, for example, random site intercepts to account for possible pseudoreplication.\n\n\nAn alternative approach is to fit multiple years of data into a single-season model is using the “stacked” approach. Essentially, you treat unique site-year combinations as sites.\nThere are several potential reasons for this:\n\n\nYou don’t have enough data. Take in to account, Dail-Madsen type models are particularly data hungry.\n\n\nYou are not interested in the transition probabilities.\n\n\nYou have very few years or seasons (less than five) and the occupancy did not changed."
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#using-random-effects-with-ubms",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#using-random-effects-with-ubms",
    "title": "“Stacked” Models",
    "section": "",
    "text": "One of the advantages of ubms is that it is possible to include random effects in your models, using the same syntax as lme4 (Bates et al. 2015). For example, if you have a group site covariate, you can fit a model with random intercepts by group by including + (1|group) in your parameter formula. Random slopes, or a combination of random slopes and intercepts, are also possible.\nTo illustrate the use of random effects of ubms, in this post fits we fit a model using a “stacked” model approach. Additionally in ubms you can instead include, for example, random site intercepts to account for possible pseudoreplication.\n\n\nAn alternative approach is to fit multiple years of data into a single-season model is using the “stacked” approach. Essentially, you treat unique site-year combinations as sites.\nThere are several potential reasons for this:\n\n\nYou don’t have enough data. Take in to account, Dail-Madsen type models are particularly data hungry.\n\n\nYou are not interested in the transition probabilities.\n\n\nYou have very few years or seasons (less than five) and the occupancy did not changed."
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#load-packages",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#load-packages",
    "title": "“Stacked” Models",
    "section": "Load packages",
    "text": "Load packages\nFirst we load some packages\n\n\nCode\n\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(terra) # Spatial Data Analysis\nlibrary(elevatr) # Access Elevation Data from Various APIs\nlibrary(readr)\n\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses \nlibrary(ubms) \nlibrary(lme4) \nlibrary(DT)\n\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#load-data",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#load-data",
    "title": "“Stacked” Models",
    "section": "Load data",
    "text": "Load data\nThe data set is downloaded from Initiative Monitoreo Katios in Wildlife insights\n\n\n\nInitiative Monitoreo Katios\n\n\n\n\nCode\n\npath &lt;- \"C:/CodigoR/CameraTrapCesar/data/katios/\"\ncameras &lt;- read_csv(paste(path, \"cameras.csv\", sep=\"\"))\ndeployment &lt;- read_csv(paste(path, \"deployments.csv\", sep=\"\"))\nimages &lt;- read_csv(paste(path, \"images.csv\", sep=\"\"))\nproject &lt;- read_csv(paste(path, \"projects.csv\", sep=\"\"))\n\n# join_by(project_id, camera_id, camera_name)`\ncam_deploy &lt;- cameras |&gt; left_join(deployment) |&gt; \n  dplyr::mutate(year=lubridate::year(start_date)) #|&gt; filter(year== 2023)\ncam_deploy_image &lt;- images  |&gt; \n  left_join(cam_deploy) |&gt; \n  mutate(scientificName= paste(genus, species, sep = \" \")) |&gt; \n   mutate(deployment_id_cam=paste(deployment_id, camera_id, sep = \"-\")) #|&gt; \n  # filter(year==2022)"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#convert-to-sf-and-view-the-map",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#convert-to-sf-and-view-the-map",
    "title": "“Stacked” Models",
    "section": "Convert to sf and view the map",
    "text": "Convert to sf and view the map\n\n\nCode\n\ndatos_distinct &lt;- cam_deploy_image |&gt; distinct(longitude, latitude, deployment_id, samp_year) |&gt; as.data.frame()\n\n# Fix NA camera 16\ndatos_distinct[16,] &lt;- c( -77.2787, 7.73855, \n                      \"CT-K1-31-124\", 2021)\n\nprojlatlon &lt;- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n\ndatos_sf &lt;-  st_as_sf(x = datos_distinct,\n                         coords = c(\"longitude\", \n                                    \"latitude\"),\n                         crs = projlatlon)\n\nmapview(st_jitter(datos_sf, 0.00075) , zcol=\"samp_year\")\n\n\n\n\n\n\nNotice we used the function st_jitter() because the points are on top of the previous year."
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#extract-site-covariates",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#extract-site-covariates",
    "title": "“Stacked” Models",
    "section": "Extract site covariates",
    "text": "Extract site covariates\nUsing the coordinates of the sf object (datos_sf) we put the cameras on top of the covaraies and with the function terra::extract() we get the covariate value.\nIn this case we used as covariates:\n\nCattle distribution as number of cows per 10 square kilometer (Gilbert et al. 2018).\nPercent of tree cover from MODIS product 44B.\nRoad density from (Meijer et al. 2018).\nLand cover types from MODIS.\n\n\n\nCode\n#load rasters\nper_tree_cov &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/Veg_Cont_Fields_Yearly_250m_v61/Perc_TreeCov/MOD44B_Perc_TreeCov_2021_065.tif\")\nroad_den &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/RoadDensity/grip4_total_dens_m_km2.asc\")\n# elev &lt;- rast(\"D:/CORREGIDAS/elevation_z7.tif\")\nlandcov &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/LandCover_Type_Yearly_500m_v61/LC1/MCD12Q1_LC1_2021_001.tif\") \ncattle &lt;- rast(\"C:/CodigoR/WCS-CameraTrap/raster/latlon/Global cattle distribution/5_Ct_2010_Da.tif\")\n#river &lt;- st_read(\"F:/WCS-CameraTrap/shp/DensidadRios/MCD12Q1_LC1_2001_001_RECLASS_MASK_GRID_3600m_DensDrenSouthAmer.shp\")\n\n# get elevation map\n# elevation_detailed &lt;- rast(get_elev_raster(sites, z = 10, clip=\"bbox\", neg_to_na=TRUE))\n# elevation_detailed &lt;- get_elev_point (datos_sf, src=\"aws\", overwrite=TRUE)\n\n\n# extract covs using points and add to sites\n# covs &lt;- cbind(sites, terra::extract(SiteCovsRast, sites))\nper_tre &lt;- terra::extract(per_tree_cov, datos_sf)\nroads &lt;- terra::extract(road_den, datos_sf)\n# eleva &lt;- terra::extract(elevation_detailed, sites)\nland_cov &lt;- terra::extract(landcov, datos_sf)\ncattle_den &lt;-  terra::extract(cattle, datos_sf)\n\n#### drop geometry \nsites &lt;- datos_sf %&gt;%\n  mutate(lat = st_coordinates(.)[,1],\n         lon = st_coordinates(.)[,2]) %&gt;%\n  st_drop_geometry() |&gt; as.data.frame()\n\n# remove decimals convert to factor\nsites$land_cover &lt;-  factor(land_cov$MCD12Q1_LC1_2021_001)\n# sites$elevation &lt;-  eleva$file3be898018c3\nsites$per_tree_cov &lt;- per_tre$MOD44B_Perc_TreeCov_2021_065 \n#  fix 200 isue\nind &lt;- which(sites$per_tree_cov== 200)\nsites$per_tree_cov[ind] &lt;- 0\n\n# sites$elevation &lt;- elevation_detailed$elevation\nsites$roads &lt;- roads$grip4_total_dens_m_km2\nsites$cattle &lt;- cattle_den[,2]\n\n\nwrite.csv(sites, \"C:/CodigoR/CameraTrapCesar/data/katios/stacked/site_covs.csv\")"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#select-by-years-and-convert-to-stacked-format",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#select-by-years-and-convert-to-stacked-format",
    "title": "“Stacked” Models",
    "section": "Select by years and convert to stacked format",
    "text": "Select by years and convert to stacked format\nTo get the detection history we use the function detectionHistory of the camtrapR package.\n\nBut take in to account, at the end we need to stack the data in this format:\n\n\n\n\nobs1\nobs2\nobs3\nsite\nyear\n\n\n\n\n0\n0\n0\n1\n1\n\n\n0\n0\n0\n2\n1\n\n\nNA\nNA\nNA\n3\n1\n\n\n0\n0\n0\n4\n1\n\n\n0\n0\n0\n5\n2\n\n\nNA\nNA\nNA\n6\n2\n\n\n\nSo we need to go by years and then stack de two tables.\n\nFirst year 2021\nHere we use the function detectionHistory() to generate species detection histories that can be used in occupancy analyses, with package unmarked and ubms. It generates detection histories in different formats, with adjustable occasion length and occasion start time. Notice we firs neet to get the camera operation dates using the function cameraOperation().\n\n\nCode\n\n# filter first year and make uniques\n\nCToperation_2021  &lt;- cam_deploy_image |&gt; #multi-season data\n  filter(samp_year==2021) |&gt; \n  group_by(deployment_id) |&gt; \n  mutate(minStart=min(start_date), maxEnd=max(end_date)) |&gt; \n  distinct(longitude, latitude, minStart, maxEnd, samp_year) |&gt; \n  ungroup() |&gt; as.data.frame()\n\n\n# Fix NA camera 16\nCToperation_2021[16,] &lt;- c(\"CT-K1-31-124\", -77.2787,    7.73855, \n                      \"2021-10-10\", \"2021-12-31\", 2021)\n\n# make numeric sampling year\nCToperation_2021$samp_year &lt;- as.numeric(CToperation_2021$samp_year)\n\n# camera operation matrix for _2021\n# multi-season data. Season1\ncamop_2021 &lt;- cameraOperation(CTtable= CToperation_2021, # Tabla de operación\n                         stationCol= \"deployment_id\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         sessionCol = \"samp_year\", # multi-season column\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"CT\")\n                         #sessionCol= \"samp_year\")\n\n# Generar las historias de detección ---------------------------------------\n## remove plroblem species\n# ind &lt;- which(datos_PCF$Species==\"Marmosa sp.\")\n# datos_PCF &lt;- datos_PCF[-ind,]\n\n# filter y1\ndatay_2021 &lt;- cam_deploy_image |&gt; filter(samp_year ==2021) # |&gt; \n  # filter(samp_year==2022) \n\nDetHist_list_2021 &lt;- lapply(unique(datay_2021$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = datay_2021, # Tabla de registros\n    camOp                = camop_2021, # Matriz de operación de cámaras\n    stationCol           = \"deployment_id\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"timestamp\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 15, # Colapso de las historias a días\n    day1                 = \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    unmarkedMultFrameInput=TRUE,\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(DetHist_list_2021) &lt;- unique(datay_2021$scientificName)\n\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\nylist_2021 &lt;- lapply(DetHist_list_2021, FUN = function(x) x$detection_history)\n# y el esfuerzo\neffortlist_2021 &lt;- lapply(DetHist_list_2021, FUN = function(x) x$effort)\n\n### Danta, Jaguar\nwhich(names(ylist_2021) ==\"Tapirus bairdii\")\n#&gt; integer(0)\nwhich(names(ylist_2021) ==\"Panthera onca\") \n#&gt; [1] 5\n\n\n\n\nNext, the year 2022\n\n\nCode\n\n# filter firs year and make uniques\n\nCToperation_2022  &lt;- cam_deploy_image |&gt; #multi-season data\n  filter(samp_year==2022) |&gt; \n  group_by(deployment_id) |&gt; \n  mutate(minStart=min(start_date), maxEnd=max(end_date)) |&gt; \n  distinct(longitude, latitude, minStart, maxEnd, samp_year) |&gt; \n  ungroup() |&gt; as.data.frame()\n\n\n# Fix NA camera 16\n# CToperation_2022[16,] &lt;- c(\"CT-K1-31-124\", -77.2787,  7.73855, \n#                       \"2022-10-10\", \"2022-12-31\", 2022)\n\n# make numeric sampling year\nCToperation_2022$samp_year &lt;- as.numeric(CToperation_2022$samp_year)\n\n# camera operation matrix for _2022\n# multi-season data. Season1\ncamop_2022 &lt;- cameraOperation(CTtable= CToperation_2022, # Tabla de operación\n                         stationCol= \"deployment_id\", # Columna que define la estación\n                         setupCol= \"minStart\", #Columna fecha de colocación\n                         retrievalCol= \"maxEnd\", #Columna fecha de retiro\n                         sessionCol = \"samp_year\", # multi-season column\n                         #hasProblems= T, # Hubo fallos de cámaras\n                         dateFormat= \"%Y-%m-%d\")#, #, # Formato de las fechas\n                         #cameraCol=\"CT\")\n                         #sessionCol= \"samp_year\")\n\n# Generar las historias de detección ---------------------------------------\n## remove plroblem species\n# ind &lt;- which(datos_PCF$Species==\"Marmosa sp.\")\n# datos_PCF &lt;- datos_PCF[-ind,]\n\n# filter y1\ndatay_2022 &lt;- cam_deploy_image |&gt; filter(samp_year ==2022) # |&gt; \n  # filter(samp_year==2022) \n\nDetHist_list_2022 &lt;- lapply(unique(datay_2022$scientificName), FUN = function(x) {\n  detectionHistory(\n    recordTable         = datay_2022, # Tabla de registros\n    camOp                = camop_2022, # Matriz de operación de cámaras\n    stationCol           = \"deployment_id\",\n    speciesCol           = \"scientificName\",\n    recordDateTimeCol    = \"timestamp\",\n    recordDateTimeFormat  = \"%Y-%m-%d %H:%M:%S\",\n    species              = x,     # la función reemplaza x por cada una de las especies\n    occasionLength       = 25, # Colapso de las historias a días\n    day1                 = \"station\", #inicie en la fecha de cada survey\n    datesAsOccasionNames = FALSE,\n    includeEffort        = TRUE,\n    scaleEffort          = FALSE,\n    unmarkedMultFrameInput=TRUE,\n    timeZone             = \"America/Bogota\" \n    )\n  }\n)\n\n# names\nnames(DetHist_list_2022) &lt;- unique(datay_2022$scientificName)\n\n# Finalmente creamos una lista nueva donde estén solo las historias de detección\nylist_2022 &lt;- lapply(DetHist_list_2022, FUN = function(x) x$detection_history)\neffortlist_2022 &lt;- lapply(DetHist_list_2022, FUN = function(x) x$effort)\n\n### Danta, Jaguar\n### Danta, Jaguar\nwhich(names(ylist_2022) ==\"Tapirus bairdii\")\n#&gt; [1] 21\nwhich(names(ylist_2022) ==\"Panthera onca\") \n#&gt; [1] 19"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#save-and-fix-in-excel",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#save-and-fix-in-excel",
    "title": "“Stacked” Models",
    "section": "Save and fix in excel",
    "text": "Save and fix in excel\n\nJaguar\n\n\nCode\n# Jaguar\n# datatable (ylist_2021[[5]], caption = 'Jaguar 2021')\n# datatable (ylist_2022[[19]], caption = 'Jaguar 2022')\n\n# y obs\nwrite.csv(ylist_2021[[5]], \"C:/CodigoR/CameraTrapCesar/data/katios/stacked/y_jaguar2021.csv\")\n# effort\nwrite.csv(effortlist_2021[[5]], \"C:/CodigoR/CameraTrapCesar/data/katios/stacked/effort_jaguar2021.csv\")\n# y obs\nwrite.csv(ylist_2022[[19]], \"C:/CodigoR/CameraTrapCesar/data/katios/stacked/y_jaguar2022.csv\")\n# effort\nwrite.csv(effortlist_2022[[5]], \"C:/CodigoR/CameraTrapCesar/data/katios/stacked/effort_jaguar2022.csv\")"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#fitting-a-stacked-model-for-jaguar",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#fitting-a-stacked-model-for-jaguar",
    "title": "“Stacked” Models",
    "section": "Fitting a stacked model for jaguar",
    "text": "Fitting a stacked model for jaguar\nLets use the ubms package to make a stacked occupancy model pooling 2021 and 2022 data together and use the percent tree cover, the road density and the cattle density as covariates for the occupancy and the effort as the number of sampling days as covariate for detection.\n\nLoad the data\n\n\nCode\njaguar &lt;- read.csv(\"C:/CodigoR/CameraTrapCesar/data/katios/stacked/y_jaguar_stacked.csv\")\n\n\n\nLook at the data\n\n\nCode\n\ndatatable(head(jaguar))\n\n\n\n\n\n\nNotice we collapsed the events to 15 days in the 2021 sampling season, and to 25 days in the 2022 sampling season, to end with 6 repeated observations in de matrix. In the matrix o1 to o6 are observations and e1 to e6 are sampling effort(observation covariates). Land_cover, per_tree_cov and roads are site covariates.\n\n\n\nCreate an unmarked frame\nWith our stacked dataset constructed, we build the unmarkedFrame() object.\n\n\nCode\n\n# fix NA spread\n# yj &lt;- rbind(ylist[[62]][1:30,1:8], # 62 is Jaguar\n#             ylist[[62]][31:50,12:19])\n\n# ej &lt;- rbind(effortlist[[4]][1:30,1:8],\n#             effortlist[[4]][31:50,12:19])\n    \n  \numf &lt;- unmarkedFrameOccu(y=jaguar[,2:7], \n                         siteCovs=jaguar[,c(8,9,16:19)],\n                         obsCovs=list(effort=jaguar[10:15])\n                      )\n\nplot(umf)\n\n\n\n\n\n\n\n\n\n\n\nFit models\n\nFit the Stacked Model\nWe’ll now we fit a model with fixed effects of percent tree cover road density and cattle density (per_tree_cov, roads and cattle) on occupancy and a effort affecting the detection. In addition, we will include random intercepts by site, since in stacking the data we have pseudoreplication by site. To review, random effects are specified using the approach used in with the lme4 package. For example, a random intercept for each level of the covariate site is specified with the formula component (1|site). Including random effects in a model in ubms usually significantly increases the run time, but at the end is worth the waiting time.\nNext we perform model selection.\n\n\nCode\n# fit_0 &lt;- occu(~1~1, data=umf) # unmarked\n\nfit_j0 &lt;- stan_occu(~1~1 + (1|site),\n                       data=umf, chains=3, iter=10000, cores=3)\nfit_j1 &lt;- stan_occu(~scale(effort) ~1 + (1|site), \n                       data=umf, chains=3, iter=10000)\n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 1).\n#&gt; Chain 1: \n#&gt; Chain 1: Gradient evaluation took 0.000155 seconds\n#&gt; Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.55 seconds.\n#&gt; Chain 1: Adjust your expectations accordingly!\n#&gt; Chain 1: \n#&gt; Chain 1: \n#&gt; Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 1: \n#&gt; Chain 1:  Elapsed Time: 16.292 seconds (Warm-up)\n#&gt; Chain 1:                13.579 seconds (Sampling)\n#&gt; Chain 1:                29.871 seconds (Total)\n#&gt; Chain 1: \n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 2).\n#&gt; Chain 2: \n#&gt; Chain 2: Gradient evaluation took 9.9e-05 seconds\n#&gt; Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.99 seconds.\n#&gt; Chain 2: Adjust your expectations accordingly!\n#&gt; Chain 2: \n#&gt; Chain 2: \n#&gt; Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 2: \n#&gt; Chain 2:  Elapsed Time: 10.498 seconds (Warm-up)\n#&gt; Chain 2:                17.726 seconds (Sampling)\n#&gt; Chain 2:                28.224 seconds (Total)\n#&gt; Chain 2: \n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 3).\n#&gt; Chain 3: \n#&gt; Chain 3: Gradient evaluation took 0.000143 seconds\n#&gt; Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 1.43 seconds.\n#&gt; Chain 3: Adjust your expectations accordingly!\n#&gt; Chain 3: \n#&gt; Chain 3: \n#&gt; Chain 3: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 3: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 3: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 3: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 3: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 3: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 3: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 3: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 3: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 3: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 3: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 3: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 3: \n#&gt; Chain 3:  Elapsed Time: 13.639 seconds (Warm-up)\n#&gt; Chain 3:                15.125 seconds (Sampling)\n#&gt; Chain 3:                28.764 seconds (Total)\n#&gt; Chain 3:\nfit_j2 &lt;- stan_occu(~scale(effort) ~scale(per_tree_cov) + (1|site), \n                       data=umf, chains=3, iter=10000)\n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 1).\n#&gt; Chain 1: \n#&gt; Chain 1: Gradient evaluation took 0.000104 seconds\n#&gt; Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.04 seconds.\n#&gt; Chain 1: Adjust your expectations accordingly!\n#&gt; Chain 1: \n#&gt; Chain 1: \n#&gt; Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 1: \n#&gt; Chain 1:  Elapsed Time: 13.62 seconds (Warm-up)\n#&gt; Chain 1:                15.405 seconds (Sampling)\n#&gt; Chain 1:                29.025 seconds (Total)\n#&gt; Chain 1: \n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 2).\n#&gt; Chain 2: \n#&gt; Chain 2: Gradient evaluation took 9.3e-05 seconds\n#&gt; Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.93 seconds.\n#&gt; Chain 2: Adjust your expectations accordingly!\n#&gt; Chain 2: \n#&gt; Chain 2: \n#&gt; Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 2: \n#&gt; Chain 2:  Elapsed Time: 13.131 seconds (Warm-up)\n#&gt; Chain 2:                19.112 seconds (Sampling)\n#&gt; Chain 2:                32.243 seconds (Total)\n#&gt; Chain 2: \n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 3).\n#&gt; Chain 3: \n#&gt; Chain 3: Gradient evaluation took 9.4e-05 seconds\n#&gt; Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.94 seconds.\n#&gt; Chain 3: Adjust your expectations accordingly!\n#&gt; Chain 3: \n#&gt; Chain 3: \n#&gt; Chain 3: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 3: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 3: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 3: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 3: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 3: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 3: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 3: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 3: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 3: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 3: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 3: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 3: \n#&gt; Chain 3:  Elapsed Time: 12.709 seconds (Warm-up)\n#&gt; Chain 3:                15.383 seconds (Sampling)\n#&gt; Chain 3:                28.092 seconds (Total)\n#&gt; Chain 3:\nfit_j3 &lt;- stan_occu(~scale(effort) ~scale(roads) + (1|site), \n                       data=umf, chains=3, iter=10000)\n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 1).\n#&gt; Chain 1: \n#&gt; Chain 1: Gradient evaluation took 0.000139 seconds\n#&gt; Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.39 seconds.\n#&gt; Chain 1: Adjust your expectations accordingly!\n#&gt; Chain 1: \n#&gt; Chain 1: \n#&gt; Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 1: \n#&gt; Chain 1:  Elapsed Time: 11.99 seconds (Warm-up)\n#&gt; Chain 1:                19.533 seconds (Sampling)\n#&gt; Chain 1:                31.523 seconds (Total)\n#&gt; Chain 1: \n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 2).\n#&gt; Chain 2: \n#&gt; Chain 2: Gradient evaluation took 9.2e-05 seconds\n#&gt; Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.92 seconds.\n#&gt; Chain 2: Adjust your expectations accordingly!\n#&gt; Chain 2: \n#&gt; Chain 2: \n#&gt; Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 2: \n#&gt; Chain 2:  Elapsed Time: 12.154 seconds (Warm-up)\n#&gt; Chain 2:                11.061 seconds (Sampling)\n#&gt; Chain 2:                23.215 seconds (Total)\n#&gt; Chain 2: \n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 3).\n#&gt; Chain 3: \n#&gt; Chain 3: Gradient evaluation took 9.3e-05 seconds\n#&gt; Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.93 seconds.\n#&gt; Chain 3: Adjust your expectations accordingly!\n#&gt; Chain 3: \n#&gt; Chain 3: \n#&gt; Chain 3: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 3: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 3: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 3: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 3: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 3: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 3: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 3: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 3: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 3: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 3: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 3: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 3: \n#&gt; Chain 3:  Elapsed Time: 38.269 seconds (Warm-up)\n#&gt; Chain 3:                45.699 seconds (Sampling)\n#&gt; Chain 3:                83.968 seconds (Total)\n#&gt; Chain 3:\nfit_j4 &lt;- stan_occu(~scale(effort) ~scale(cattle) + (1|site), \n                       data=umf, chains=3, iter=10000)\n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 1).\n#&gt; Chain 1: \n#&gt; Chain 1: Gradient evaluation took 9.7e-05 seconds\n#&gt; Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.97 seconds.\n#&gt; Chain 1: Adjust your expectations accordingly!\n#&gt; Chain 1: \n#&gt; Chain 1: \n#&gt; Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 1: \n#&gt; Chain 1:  Elapsed Time: 14.281 seconds (Warm-up)\n#&gt; Chain 1:                17.65 seconds (Sampling)\n#&gt; Chain 1:                31.931 seconds (Total)\n#&gt; Chain 1: \n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 2).\n#&gt; Chain 2: \n#&gt; Chain 2: Gradient evaluation took 9.8e-05 seconds\n#&gt; Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.98 seconds.\n#&gt; Chain 2: Adjust your expectations accordingly!\n#&gt; Chain 2: \n#&gt; Chain 2: \n#&gt; Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 2: \n#&gt; Chain 2:  Elapsed Time: 14.733 seconds (Warm-up)\n#&gt; Chain 2:                15.17 seconds (Sampling)\n#&gt; Chain 2:                29.903 seconds (Total)\n#&gt; Chain 2: \n#&gt; \n#&gt; SAMPLING FOR MODEL 'occu' NOW (CHAIN 3).\n#&gt; Chain 3: \n#&gt; Chain 3: Gradient evaluation took 0.000103 seconds\n#&gt; Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 1.03 seconds.\n#&gt; Chain 3: Adjust your expectations accordingly!\n#&gt; Chain 3: \n#&gt; Chain 3: \n#&gt; Chain 3: Iteration:    1 / 10000 [  0%]  (Warmup)\n#&gt; Chain 3: Iteration: 1000 / 10000 [ 10%]  (Warmup)\n#&gt; Chain 3: Iteration: 2000 / 10000 [ 20%]  (Warmup)\n#&gt; Chain 3: Iteration: 3000 / 10000 [ 30%]  (Warmup)\n#&gt; Chain 3: Iteration: 4000 / 10000 [ 40%]  (Warmup)\n#&gt; Chain 3: Iteration: 5000 / 10000 [ 50%]  (Warmup)\n#&gt; Chain 3: Iteration: 5001 / 10000 [ 50%]  (Sampling)\n#&gt; Chain 3: Iteration: 6000 / 10000 [ 60%]  (Sampling)\n#&gt; Chain 3: Iteration: 7000 / 10000 [ 70%]  (Sampling)\n#&gt; Chain 3: Iteration: 8000 / 10000 [ 80%]  (Sampling)\n#&gt; Chain 3: Iteration: 9000 / 10000 [ 90%]  (Sampling)\n#&gt; Chain 3: Iteration: 10000 / 10000 [100%]  (Sampling)\n#&gt; Chain 3: \n#&gt; Chain 3:  Elapsed Time: 13.68 seconds (Warm-up)\n#&gt; Chain 3:                15.029 seconds (Sampling)\n#&gt; Chain 3:                28.709 seconds (Total)\n#&gt; Chain 3:\n# compare\nmodels &lt;- list(Null = fit_j0,\n                effort = fit_j1,\n                effort_treecov = fit_j2,\n                effort_road = fit_j3,\n                effort_cattle = fit_j4)\n\nmods &lt;- fitList(fits = models)\n\n\n## see model selection as a table\ndatatable( \n  round(modSel(mods), 3)\n  )\n\n\n\n\n\n\nInstead of AIC, models are compared using leave-one-out cross-validation (LOO) (Vehtari, Gelman, and Gabry 2017) via the loo package. Based on this cross-validation, the expected predictive accuracy (elpd) for each model is calculated. The model with the largest elpd (effort_cattle) performed best. The looic value is analogous to AIC.\n\n\nCode\nloo(fit_j4)\n#&gt; \n#&gt; Computed from 15000 by 53 log-likelihood matrix.\n#&gt; \n#&gt;          Estimate   SE\n#&gt; elpd_loo    -54.7 13.5\n#&gt; p_loo         4.3  1.0\n#&gt; looic       109.4 27.0\n#&gt; ------\n#&gt; MCSE of elpd_loo is 0.1.\n#&gt; MCSE and ESS estimates assume MCMC draws (r_eff in [0.1, 1.0]).\n#&gt; \n#&gt; All Pareto k estimates are good (k &lt; 0.7).\n#&gt; See help('pareto-k-diagnostic') for details.\n\n\n\nBest model is effort_cattle (fit_j4) which has effort on detection and percent tree cover on occupancy.\n\n\n\nCode\nfit_j4\n#&gt; \n#&gt; Call:\n#&gt; stan_occu(formula = ~scale(effort) ~ scale(cattle) + (1 | site), \n#&gt;     data = umf, chains = 3, iter = 10000)\n#&gt; \n#&gt; Occupancy (logit-scale):\n#&gt;                Estimate    SD   2.5% 97.5% n_eff Rhat\n#&gt; (Intercept)      -1.315 0.759 -2.664 0.375  3561 1.00\n#&gt; scale(cattle)    -1.270 1.038 -3.799 0.286  3670 1.00\n#&gt; sigma [1|site]    0.682 0.606  0.084 2.300   236 1.02\n#&gt; \n#&gt; Detection (logit-scale):\n#&gt;               Estimate    SD   2.5%  97.5% n_eff Rhat\n#&gt; (Intercept)     -1.619 0.481 -2.640 -0.772  2928    1\n#&gt; scale(effort)    0.335 0.361 -0.343  1.068  4652    1\n#&gt; \n#&gt; LOOIC: 109.353\n#&gt; Runtime: 90.543 sec\n\n\nLooking at the summary of fit_j4, we conclude MCMC chains have converged if all R^&gt;1.05 To visualize convergence, look at the traceplots:\n\n\nCode\ntraceplot(fit_j4, pars=c(\"beta_state\", \"beta_det\"))\n\n\n\n\n\n\n\n\n\n\n\n\nEvaluate model fit\nStatistic should be near 0.5 if the model fits well.\n\n\nCode\n# eval\nfit_top_gof &lt;- gof(fit_j4, draws=300, quiet=TRUE)\nfit_top_gof\n#&gt; MacKenzie-Bailey Chi-square \n#&gt; Point estimate = 52.751\n#&gt; Posterior predictive p = 0.473\n\nplot(fit_top_gof)\n\n\n\n\n\n\n\n\n\n\n\nModel inference\nEffort in detection and cattle density in occupancy\n\n\nCode\nubms::plot_effects(fit_j4, \"det\")\n\n\n\n\n\n\n\n\n\nCode\nubms::plot_effects(fit_j4, \"state\")"
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#comparing-occupancy-between-years",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#comparing-occupancy-between-years",
    "title": "“Stacked” Models",
    "section": "Comparing occupancy between years",
    "text": "Comparing occupancy between years\nUsing the posterior_predict function in ubms, you can generate an equivalent posterior distribution of z, and latter to do a post-hoc analyses to test for a difference in mean occupancy probability between sites 2021 and sites 2022.\n\n\nCode\nzpost &lt;- posterior_predict(fit_j4, \"z\", draws=1000)\ndim(zpost)\n#&gt; [1] 1000   55\n\nyear_2021 &lt;- rowMeans(zpost[,1:32], na.rm=TRUE)\nyear_2022 &lt;- rowMeans(zpost[,33:55], na.rm=TRUE)\n\nplot_dat &lt;- rbind(data.frame(group=\"year_2021\", occ=mean(year_2021),\n                             lower=quantile(year_2021, 0.025),\n                             upper=quantile(year_2021, 0.975)),\n                  data.frame(group=\"year_2022\", occ=mean(year_2022),\n                             lower=quantile(year_2022, 0.025),\n                             upper=quantile(year_2022, 0.975)))\n\n# Now plot the posterior distributions of the two means:\n\n\nggplot(plot_dat, aes(x=group, y=occ)) +\n  geom_errorbar(aes(ymin=lower, ymax=upper), width=0.2) +\n  geom_point(size=3) +\n  ylim(0,1) +\n  labs(x=\"Year\", y=\"Occupancy + 95% UI\") +\n  theme_bw() +\n  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),\n        axis.text=element_text(size=12), axis.title=element_text(size=14))\n\n\n\n\n\n\n\n\n\nIt seems the difference in mean occupancy probability between years is not significant."
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#package-citation",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#package-citation",
    "title": "“Stacked” Models",
    "section": "Package Citation",
    "text": "Package Citation\n\n\nCode\npkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\n\nWe used R version 4.4.2 (R Core Team 2024) and the following R packages: camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.33 (Xie, Cheng, and Tan 2024), elevatr v. 0.99.0 (Hollister et al. 2023), kableExtra v. 1.4.0 (Zhu 2024), lme4 v. 1.1.35.5 (Bates et al. 2015), mapview v. 2.11.2 (Appelhans et al. 2023), patchwork v. 1.3.0 (Pedersen 2024), quarto v. 1.4.4 (Allaire and Dervieux 2024), rmarkdown v. 2.29 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), sf v. 1.0.19 (Pebesma 2018; Pebesma and Bivand 2023), styler v. 1.10.3 (Müller and Walthert 2024), terra v. 1.8.5 (Hijmans 2024), tidyverse v. 2.0.0 (Wickham et al. 2019), ubms v. 1.2.7 (Kellner et al. 2021)."
  },
  {
    "objectID": "posts/2024-07-17-stackmodel/index.knit.html#sesion-info",
    "href": "posts/2024-07-17-stackmodel/index.knit.html#sesion-info",
    "title": "“Stacked” Models",
    "section": "Sesion info",
    "text": "Sesion info\n\n\nSession info\n\n\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.4.2 (2024-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-12-15\n#&gt;  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version  date (UTC) lib source\n#&gt;    abind               1.4-8    2024-09-12 [1] CRAN (R 4.4.1)\n#&gt;    backports           1.5.0    2024-05-23 [1] CRAN (R 4.4.0)\n#&gt;    base64enc           0.1-3    2015-07-28 [1] CRAN (R 4.4.0)\n#&gt;    bit                 4.5.0.1  2024-12-03 [1] CRAN (R 4.4.2)\n#&gt;    bit64               4.5.2    2024-09-22 [1] CRAN (R 4.4.2)\n#&gt;    boot                1.3-31   2024-08-28 [2] CRAN (R 4.4.2)\n#&gt;    brew                1.0-10   2023-12-16 [1] CRAN (R 4.4.2)\n#&gt;    bslib               0.8.0    2024-07-29 [1] CRAN (R 4.4.2)\n#&gt;    cachem              1.1.0    2024-05-16 [1] CRAN (R 4.4.2)\n#&gt;    camtrapR          * 2.3.0    2024-02-26 [1] CRAN (R 4.4.2)\n#&gt;    cellranger          1.1.0    2016-07-27 [1] CRAN (R 4.4.2)\n#&gt;    checkmate           2.3.2    2024-07-29 [1] CRAN (R 4.4.2)\n#&gt;    class               7.3-22   2023-05-03 [2] CRAN (R 4.4.2)\n#&gt;    classInt            0.4-10   2023-09-05 [1] CRAN (R 4.4.2)\n#&gt;    cli                 3.6.3    2024-06-21 [1] CRAN (R 4.4.2)\n#&gt;    codetools           0.2-20   2024-03-31 [2] CRAN (R 4.4.2)\n#&gt;    colorspace          2.1-1    2024-07-26 [1] CRAN (R 4.4.2)\n#&gt;    crayon              1.5.3    2024-06-20 [1] CRAN (R 4.4.2)\n#&gt;    crosstalk           1.2.1    2023-11-23 [1] CRAN (R 4.4.2)\n#&gt;    curl                6.0.0    2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    data.table          1.16.4   2024-12-06 [1] CRAN (R 4.4.2)\n#&gt;    DBI                 1.2.3    2024-06-02 [1] CRAN (R 4.4.2)\n#&gt;    devtools            2.4.5    2022-10-11 [1] CRAN (R 4.4.2)\n#&gt;    digest              0.6.37   2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    distributional      0.5.0    2024-09-17 [1] CRAN (R 4.4.2)\n#&gt;    dplyr             * 1.1.4    2023-11-17 [1] CRAN (R 4.4.2)\n#&gt;    DT                * 0.33     2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    e1071               1.7-16   2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    elevatr           * 0.99.0   2023-09-12 [1] CRAN (R 4.4.2)\n#&gt;    ellipsis            0.3.2    2021-04-29 [1] CRAN (R 4.4.2)\n#&gt;    evaluate            1.0.1    2024-10-10 [1] CRAN (R 4.4.2)\n#&gt;    fansi               1.0.6    2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    farver              2.1.2    2024-05-13 [1] CRAN (R 4.4.2)\n#&gt;    fastmap             1.2.0    2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    forcats           * 1.0.0    2023-01-29 [1] CRAN (R 4.4.2)\n#&gt;    fs                  1.6.5    2024-10-30 [1] CRAN (R 4.4.2)\n#&gt;    generics            0.1.3    2022-07-05 [1] CRAN (R 4.4.2)\n#&gt;    ggplot2           * 3.5.1    2024-04-23 [1] CRAN (R 4.4.2)\n#&gt;    glue                1.8.0    2024-09-30 [1] CRAN (R 4.4.2)\n#&gt;    grateful          * 0.2.10   2024-09-04 [1] CRAN (R 4.4.2)\n#&gt;    gridExtra           2.3      2017-09-09 [1] CRAN (R 4.4.2)\n#&gt;    gtable              0.3.6    2024-10-25 [1] CRAN (R 4.4.2)\n#&gt;    hms                 1.1.3    2023-03-21 [1] CRAN (R 4.4.2)\n#&gt;    htmltools           0.5.8.1  2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    htmlwidgets         1.6.4    2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    httpuv              1.6.15   2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    inline              0.3.20   2024-11-10 [1] CRAN (R 4.4.2)\n#&gt;    jquerylib           0.1.4    2021-04-26 [1] CRAN (R 4.4.2)\n#&gt;    jsonlite            1.8.9    2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    kableExtra        * 1.4.0    2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    KernSmooth          2.23-24  2024-05-17 [2] CRAN (R 4.4.2)\n#&gt;    knitr               1.49     2024-11-08 [1] CRAN (R 4.4.2)\n#&gt;    labeling            0.4.3    2023-08-29 [1] CRAN (R 4.4.0)\n#&gt;    later               1.3.2    2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    lattice             0.22-6   2024-03-20 [2] CRAN (R 4.4.2)\n#&gt;    leafem              0.2.3    2023-09-17 [1] CRAN (R 4.4.2)\n#&gt;    leaflet             2.2.2    2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    leaflet.providers   2.0.0    2023-10-17 [1] CRAN (R 4.4.2)\n#&gt;    leafpop             0.1.0    2021-05-22 [1] CRAN (R 4.4.2)\n#&gt;    lifecycle           1.0.4    2023-11-07 [1] CRAN (R 4.4.2)\n#&gt;    lme4              * 1.1-35.5 2024-07-03 [1] CRAN (R 4.4.2)\n#&gt;    loo                 2.8.0    2024-07-03 [1] CRAN (R 4.4.2)\n#&gt;    lubridate         * 1.9.4    2024-12-08 [1] CRAN (R 4.4.2)\n#&gt;    magrittr            2.0.3    2022-03-30 [1] CRAN (R 4.4.2)\n#&gt;    mapview           * 2.11.2   2023-10-13 [1] CRAN (R 4.4.2)\n#&gt;    MASS                7.3-61   2024-06-13 [2] CRAN (R 4.4.2)\n#&gt;    Matrix            * 1.7-1    2024-10-18 [2] CRAN (R 4.4.2)\n#&gt;    matrixStats         1.4.1    2024-09-08 [1] CRAN (R 4.4.2)\n#&gt;    memoise             2.0.1    2021-11-26 [1] CRAN (R 4.4.2)\n#&gt;    mgcv                1.9-1    2023-12-21 [2] CRAN (R 4.4.2)\n#&gt;    mime                0.12     2021-09-28 [1] CRAN (R 4.4.0)\n#&gt;    miniUI              0.1.1.1  2018-05-18 [1] CRAN (R 4.4.2)\n#&gt;    minqa               1.2.8    2024-08-17 [1] CRAN (R 4.4.2)\n#&gt;    munsell             0.5.1    2024-04-01 [1] CRAN (R 4.4.2)\n#&gt;    mvtnorm             1.3-2    2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    nlme                3.1-166  2024-08-14 [2] CRAN (R 4.4.2)\n#&gt;    nloptr              2.1.1    2024-06-25 [1] CRAN (R 4.4.2)\n#&gt;    patchwork         * 1.3.0    2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    pbapply             1.7-2    2023-06-27 [1] CRAN (R 4.4.2)\n#&gt;    pillar              1.9.0    2023-03-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgbuild            1.4.5    2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    pkgconfig           2.0.3    2019-09-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgload             1.4.0    2024-06-28 [1] CRAN (R 4.4.2)\n#&gt;    png                 0.1-8    2022-11-29 [1] CRAN (R 4.4.0)\n#&gt;    posterior           1.6.0    2024-07-03 [1] CRAN (R 4.4.2)\n#&gt;    processx            3.8.4    2024-03-16 [1] CRAN (R 4.4.2)\n#&gt;    profvis             0.4.0    2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    progressr           0.15.0   2024-10-29 [1] CRAN (R 4.4.2)\n#&gt;    promises            1.3.0    2024-04-05 [1] CRAN (R 4.4.2)\n#&gt;    proxy               0.4-27   2022-06-09 [1] CRAN (R 4.4.2)\n#&gt;    ps                  1.8.1    2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    purrr             * 1.0.2    2023-08-10 [1] CRAN (R 4.4.2)\n#&gt;    quarto            * 1.4.4    2024-07-20 [1] CRAN (R 4.4.2)\n#&gt;    QuickJSR            1.4.0    2024-10-01 [1] CRAN (R 4.4.2)\n#&gt;    R.cache             0.16.0   2022-07-21 [1] CRAN (R 4.4.2)\n#&gt;    R.methodsS3         1.8.2    2022-06-13 [1] CRAN (R 4.4.0)\n#&gt;    R.oo                1.27.0   2024-11-01 [1] CRAN (R 4.4.1)\n#&gt;    R.utils             2.12.3   2023-11-18 [1] CRAN (R 4.4.2)\n#&gt;    R6                  2.5.1    2021-08-19 [1] CRAN (R 4.4.2)\n#&gt;    raster              3.6-30   2024-10-02 [1] CRAN (R 4.4.2)\n#&gt;    rbibutils           2.3      2024-10-04 [1] CRAN (R 4.4.2)\n#&gt;    Rcpp                1.0.13-1 2024-11-02 [1] CRAN (R 4.4.2)\n#&gt;    RcppNumerical       0.6-0    2023-09-06 [1] CRAN (R 4.4.2)\n#&gt;  D RcppParallel        5.1.9    2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    Rdpack              2.6.2    2024-11-15 [1] CRAN (R 4.4.2)\n#&gt;    readr             * 2.1.5    2024-01-10 [1] CRAN (R 4.4.2)\n#&gt;    readxl            * 1.4.3    2023-07-06 [1] CRAN (R 4.4.2)\n#&gt;    reformulas          0.4.0    2024-11-03 [1] CRAN (R 4.4.2)\n#&gt;    remotes             2.5.0    2024-03-17 [1] CRAN (R 4.4.2)\n#&gt;    renv                1.0.11   2024-10-12 [1] CRAN (R 4.4.2)\n#&gt;    rlang               1.1.4    2024-06-04 [1] CRAN (R 4.4.2)\n#&gt;    rmarkdown           2.29     2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    RSpectra            0.16-2   2024-07-18 [1] CRAN (R 4.4.2)\n#&gt;    rstan               2.32.6   2024-03-05 [1] CRAN (R 4.4.2)\n#&gt;    rstantools          2.4.0    2024-01-31 [1] CRAN (R 4.4.2)\n#&gt;    rstudioapi          0.17.1   2024-10-22 [1] CRAN (R 4.4.2)\n#&gt;    sass                0.4.9    2024-03-15 [1] CRAN (R 4.4.2)\n#&gt;    satellite           1.0.5    2024-02-10 [1] CRAN (R 4.4.2)\n#&gt;    scales              1.3.0    2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    secr                5.1.0    2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    sessioninfo         1.2.2    2021-12-06 [1] CRAN (R 4.4.2)\n#&gt;    sf                * 1.0-19   2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    shiny               1.9.1    2024-08-01 [1] CRAN (R 4.4.2)\n#&gt;    sp                  2.1-4    2024-04-30 [1] CRAN (R 4.4.2)\n#&gt;    StanHeaders         2.32.10  2024-07-15 [1] CRAN (R 4.4.2)\n#&gt;    stringi             1.8.4    2024-05-06 [1] CRAN (R 4.4.0)\n#&gt;    stringr           * 1.5.1    2023-11-14 [1] CRAN (R 4.4.2)\n#&gt;    styler            * 1.10.3   2024-04-07 [1] CRAN (R 4.4.2)\n#&gt;    svglite             2.1.3    2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    systemfonts         1.1.0    2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    tensorA             0.36.2.1 2023-12-13 [1] CRAN (R 4.4.0)\n#&gt;    terra             * 1.8-5    2024-12-12 [1] CRAN (R 4.4.2)\n#&gt;    tibble            * 3.2.1    2023-03-20 [1] CRAN (R 4.4.2)\n#&gt;    tidyr             * 1.3.1    2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    tidyselect          1.2.1    2024-03-11 [1] CRAN (R 4.4.2)\n#&gt;    tidyverse         * 2.0.0    2023-02-22 [1] CRAN (R 4.4.2)\n#&gt;    timechange          0.3.0    2024-01-18 [1] CRAN (R 4.4.2)\n#&gt;    tzdb                0.4.0    2023-05-12 [1] CRAN (R 4.4.2)\n#&gt;    ubms              * 1.2.7    2024-10-01 [1] CRAN (R 4.4.2)\n#&gt;    units               0.8-5    2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    unmarked          * 1.4.3    2024-09-01 [1] CRAN (R 4.4.2)\n#&gt;    urlchecker          1.0.1    2021-11-30 [1] CRAN (R 4.4.2)\n#&gt;    usethis             3.0.0    2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    utf8                1.2.4    2023-10-22 [1] CRAN (R 4.4.2)\n#&gt;    uuid                1.2-1    2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    V8                  6.0.0    2024-10-12 [1] CRAN (R 4.4.2)\n#&gt;    vctrs               0.6.5    2023-12-01 [1] CRAN (R 4.4.2)\n#&gt;    viridisLite         0.4.2    2023-05-02 [1] CRAN (R 4.4.2)\n#&gt;    vroom               1.6.5    2023-12-05 [1] CRAN (R 4.4.2)\n#&gt;    withr               3.0.2    2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    xfun                0.49     2024-10-31 [1] CRAN (R 4.4.2)\n#&gt;    xml2                1.3.6    2023-12-04 [1] CRAN (R 4.4.2)\n#&gt;    xtable              1.8-4    2019-04-21 [1] CRAN (R 4.4.2)\n#&gt;    yaml                2.3.10   2024-07-26 [1] CRAN (R 4.4.1)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.4\n#&gt;  [2] C:/Program Files/R/R-4.4.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html",
    "href": "posts/2024-12-10-RAI/index.html",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "",
    "text": "First we load some packages\n\nCode\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(terra) # Spatial Data Analysis\nlibrary(readr) # Read Rectangular Text Data\n\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses \nlibrary(adehabitatHR) # Home Range Estimation\nlibrary(agricolae) # Statistical Procedures for Agricultural Research\nlibrary(akima) # Interpolation of Irregularly and Regularly Spaced Data\nlibrary(fuzzySim) # Fuzzy Similarity in Species Distributions\nlibrary(MASS) # Support Functions and Datasets for Venables and Ripley's MASS\nlibrary(RColorBrewer) # ColorBrewer Palettes\nlibrary(DT) # A Wrapper of the JavaScript Library 'DataTables'\nlibrary(RAIeR) # Relative abundance index and encounter rate estimation cameratraps\n\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\n\n# source(\"C:/CodigoR/CameraTrapCesar/R/organiza_datos.R\")"
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#cargar-paquetes",
    "href": "posts/2024-12-10-RAI/index.html#cargar-paquetes",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "",
    "text": "First we load some packages\n\nCode\nlibrary(grateful) # Facilitate Citation of R Packages\nlibrary(patchwork) # The Composer of Plots\nlibrary(readxl) # Read Excel Files\nlibrary(sf) # Simple Features for R\nlibrary(mapview) # Interactive Viewing of Spatial Data in R\nlibrary(terra) # Spatial Data Analysis\nlibrary(readr) # Read Rectangular Text Data\n\nlibrary(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses \nlibrary(adehabitatHR) # Home Range Estimation\nlibrary(agricolae) # Statistical Procedures for Agricultural Research\nlibrary(akima) # Interpolation of Irregularly and Regularly Spaced Data\nlibrary(fuzzySim) # Fuzzy Similarity in Species Distributions\nlibrary(MASS) # Support Functions and Datasets for Venables and Ripley's MASS\nlibrary(RColorBrewer) # ColorBrewer Palettes\nlibrary(DT) # A Wrapper of the JavaScript Library 'DataTables'\nlibrary(RAIeR) # Relative abundance index and encounter rate estimation cameratraps\n\nlibrary(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax\nlibrary(tidyverse) # Easily Install and Load the 'Tidyverse'\n\n# source(\"C:/CodigoR/CameraTrapCesar/R/organiza_datos.R\")"
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#introducción",
    "href": "posts/2024-12-10-RAI/index.html#introducción",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "INTRODUCCIÓN",
    "text": "INTRODUCCIÓN\nEl estudio de mamíferos medianos y grandes en bosques tropicales suele ser difícil ya que muchas de estas especies son crípticas, nocturnas y esquivas, dificultando su detección. Los métodos tradicionales requieren de la captura de los animales y suelen ser costosos, de difícil manejo y poco efectivas. Por esta razón, estas técnicas han sido reemplazadas ampliamente por la técnica del fototrampeo, la cual usa cámaras fijas que se activan para captar imágenes de animales en el momento que pasan frente a la cámara, mediante sensores infrarrojos.\nLas cámaras trampa son utilizadas en investigaciones biológicas como una herramienta importante para determinar distintos parámetros ecológicos como densidad, ocurrencia, riqueza, entre otros. Las ventajas de esta técnica son muy amplias, por lo que su uso es cada vez más frecuente. Por esta razón es importante conocer las características de los equipos, los alcances y limitaciones del empleo de cámaras, así como tener claridad sobre el tipo de datos arrojados con esta técnica y su interpretación. El éxito de esta técnica, como de cualquier otra, depende a su vez de un adecuado planteamiento de las preguntas de investigación y diseño de muestreo, así como una base conceptual sólida que permita alcanzar los objetivos de investigación.\nEn este curso queremos hacer una introducción general al fototrampeo donde los participantes entiendan como funcionan las cámaras trampa, que consideraciones se deben tener para el diseño de un estudio con fototrampeo, así como una introducción a tres análisis básicos (estimación de riqueza, abundancia relativa y horarios de actividad)."
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#objetivos",
    "href": "posts/2024-12-10-RAI/index.html#objetivos",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "OBJETIVOS",
    "text": "OBJETIVOS\n\nCapacitar estudiantes de pregrado y personas interesadas en entender el uso y los alcances de la técnica del fototrampeo.\nEntender de manera general como se diseña un estudio con fototrampeo y como se analizan e interpretan los datos derivados con énfasis en riqueza, abundancia relativa y patrones de actividad."
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#metodología",
    "href": "posts/2024-12-10-RAI/index.html#metodología",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "METODOLOGÍA",
    "text": "METODOLOGÍA\nEl curso está estructurado en dos grandes temas. El primero concerniente a la técnica propiamente dicha y el segundo relacionado con las preguntas de investigación y su análisis. Todas las sesiones son teórico-prácticas y para los ejercicios de montaje de cámaras se hará una práctica corta al interior de la Universidad Nacional. Al finalizar el curso se entregará una carpeta digital con material relacionado como libros y artículos y las presentaciones en pdf, así como los códigos en R usados en las demostraciones."
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#libro",
    "href": "posts/2024-12-10-RAI/index.html#libro",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "Libro",
    "text": "Libro\nEl curso incluye el Libro Fototrampeo en R de Salvador Mandujano"
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#indice-de-abundancia-relativa-rai",
    "href": "posts/2024-12-10-RAI/index.html#indice-de-abundancia-relativa-rai",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "Indice de Abundancia Relativa (RAI)",
    "text": "Indice de Abundancia Relativa (RAI)\n\nNúmero de fotos por unidad de esfuerzo\n\n\\[\nRAI = \\dfrac{Número de fotos independientes}{dias de camara * 100}\n\\]\n\n\n\n\n\n\nRAI no es estimado de abundancia\n\n\n\nPor eso mejor llamarla “FRECUENCIA DE CAPTURA” (Capture Rate).\n\n\nPueden ver una revision muy interesante en el articulo:"
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#veamos-un-ejemplo",
    "href": "posts/2024-12-10-RAI/index.html#veamos-un-ejemplo",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "Veamos un ejemplo",
    "text": "Veamos un ejemplo\nCarguemos los datos\nSon dos archivos uno de las camaras y otro de las especies.\n\nCode\n\nlibrary(hrbrthemes)\nlibrary(viridis)\n\ncameras &lt;- read.csv(\"data/survey_metadata_sp_rich.csv\")\n# sp recs\nsp_rec &lt;- read.csv2(\"data/FAZ_sp_rec_only_mammals_indep_with_generics.csv\", encoding = \"LATIN1\")\n\n# Delete cams that were not active\ncameras1 &lt;- cameras %&gt;% \n              filter(!No_spp == 0) #\n  \n# check cams vs sp records\n\nnot_in_cams &lt;- left_join(sp_rec, cameras1, by =\"deployment_id\") \nunique(not_in_cams$deployment_id) #OK\n#&gt;  [1] \"FAZ001\" \"FAZ002\" \"FAZ003\" \"FAZ004\" \"FAZ005\" \"FAZ007\" \"FAZ008\" \"FAZ009\"\n#&gt;  [9] \"FAZ010\" \"FAZ011\" \"FAZ012\" \"FAZ013\" \"FAZ014\" \"FAZ015\" \"FAZ017\" \"FAZ018\"\n#&gt; [17] \"FAZ019\" \"FAZ020\" \"FAZ021\" \"FAZ022\" \"FAZ023\" \"FAZ024\" \"FAZ025\" \"FAZ026\"\n#&gt; [25] \"FAZ027\" \"FAZ028\" \"FAZ029\"\n\n\nCamaras\n\nCodedatatable(cameras)\n\n\n\n\n\nEspecies\n\nCodedatatable(sp_rec)\n\n\n\n\n\nUsemos las funciones de camtrapR\nResulta en un listado de 5 partes:\nreportTest[[1]] esfuerzo_muestreo. camera trap operation times and image date ranges reportTest[[2]] number of species by station reportTest[[3]] number of events and number of stations by species reportTest[[4]] registros_especies. number of species events by station reportTest[[5]] number of species events by station including 0s (non-observed species)\n\nCode#now build the camp op\nsp_rec$start_time &lt;- as.POSIXct(sp_rec$start_time, format = \"%Y-%m-%d %H:%M\") #     \n\nsurvey_rep &lt;- surveyReport(recordTable = sp_rec,\n                               CTtable = cameras1,\n                               speciesCol = \"spanish_common_name\", \n                               stationCol = \"deployment_id\",\n                               setupCol = \"start_date\", \n                               retrievalCol = \"end_date\",\n                               recordDateTimeCol = \"start_time\",\n                               makezip = F # prepara un archivo .zip, False here \n                               #sinkpath = \"data_out\",\n                            # camOp = cam_op) # directorio donde guardara .zip\n                           )\n#&gt; \n#&gt; -------------------------------------------------------\n#&gt; [1] \"Total number of stations:  27\"\n#&gt; \n#&gt; -------------------------------------------------------\n#&gt; [1] \"Number of operational stations:  27\"\n#&gt; \n#&gt; -------------------------------------------------------\n#&gt; [1] \"n nights with cameras set up (operational or not. NOTE: only correct if 1 camera per station): 4531\"\n#&gt; \n#&gt; -------------------------------------------------------\n#&gt; [1] \"n nights with cameras set up and active (trap nights. NOTE: only correct if 1 camera per station): 4531\"\n#&gt; \n#&gt; -------------------------------------------------------\n#&gt; [1] \"total trapping period:  2024-01-03 - 2024-08-28\"\n\n\nCalculemos el RAI\nRecuerda que es tasa de captura\nprimero unimos\n\nCodeesfuerzo_muestreo &lt;- survey_rep[[1]]\nn_activas &lt;- esfuerzo_muestreo[c(\"deployment_id\", \"n_nights_active\")]\nwildlife.data &lt;- merge(survey_rep[[4]], n_activas, all.y = T)\ndatatable(wildlife.data)# \n\n\n\n\n\nrenombramos\n\nCodenames(wildlife.data)[names(wildlife.data) == \"deployment_id\"] &lt;- \"Camera\"\nnames(wildlife.data)[names(wildlife.data) == \"n_events\"] &lt;- \"Events\"\nnames(wildlife.data)[names(wildlife.data) == \"n_nights_active\"] &lt;- \"Effort\"\n\n\nRAI general por especie\nEl RAI general que se calcula agrupando toda la información de las cámaras por especie.\n\nCodeRAI &lt;- wildlife.data |&gt; filter(spanish_common_name==\"lapa\") |&gt; mutate (RAI_general=round ( (sum(Events) / sum(Effort) ) * 100, 2)) \ndatatable(RAI)\n\n\n\n\n\nRAI por especie por camara\nRAI alternativo\n\nCodeRAI &lt;- wildlife.data |&gt; filter(spanish_common_name==\"lapa\") |&gt; mutate (RAI_camara=round ( Events / Effort * 100, 2)) \ndatatable(RAI)"
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#package-citation",
    "href": "posts/2024-12-10-RAI/index.html#package-citation",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "Package Citation",
    "text": "Package Citation\n\nCodepkgs &lt;- cite_packages(output = \"paragraph\", out.dir = \".\") #knitr::kable(pkgs)\npkgs\n\nWe used R version 4.4.2 (R Core Team 2024) and the following R packages: adehabitatHR v. 0.4.22 (Calenge 2024), agricolae v. 1.3.7 (de Mendiburu 2023), akima v. 0.6.3.4 (Akima and Gebhardt 2022), camtrapR v. 2.3.0 (Niedballa et al. 2016), devtools v. 2.4.5 (Wickham et al. 2022), DT v. 0.33 (Xie, Cheng, and Tan 2024), fuzzySim v. 4.29 (A. Marcia Barbosa 2015), hrbrthemes v. 0.8.7 (Rudis 2024), kableExtra v. 1.4.0 (Zhu 2024), mapview v. 2.11.2 (Appelhans et al. 2023), MASS v. 7.3.61 (Venables and Ripley 2002), patchwork v. 1.3.0 (Pedersen 2024), quarto v. 1.4.4 (Allaire and Dervieux 2024), RAIeR v. 0.0.0.9000 (Mandujano 2024), RColorBrewer v. 1.1.3 (Neuwirth 2022), rmarkdown v. 2.29 (Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020; Allaire et al. 2024), sf v. 1.0.19 (Pebesma 2018; Pebesma and Bivand 2023), styler v. 1.10.3 (Müller and Walthert 2024), terra v. 1.8.5 (Hijmans 2024), tidyverse v. 2.0.0 (Wickham et al. 2019), viridis v. 0.6.5 (Garnier et al. 2024)."
  },
  {
    "objectID": "posts/2024-12-10-RAI/index.html#sesion-info",
    "href": "posts/2024-12-10-RAI/index.html#sesion-info",
    "title": "Esfuerzo de muestreo y RAI",
    "section": "Sesion info",
    "text": "Sesion info\n\nSession info\n\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.4.2 (2024-10-31 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  Spanish_Colombia.utf8\n#&gt;  ctype    Spanish_Colombia.utf8\n#&gt;  tz       America/Bogota\n#&gt;  date     2024-12-15\n#&gt;  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n#&gt;  ! package           * version    date (UTC) lib source\n#&gt;    abind               1.4-8      2024-09-12 [1] CRAN (R 4.4.1)\n#&gt;    ade4              * 1.7-22     2023-02-06 [1] CRAN (R 4.4.2)\n#&gt;    adehabitatHR      * 0.4.22     2024-09-06 [1] CRAN (R 4.4.2)\n#&gt;    adehabitatLT      * 0.3.28     2024-09-06 [1] CRAN (R 4.4.2)\n#&gt;    adehabitatMA      * 0.3.17     2024-09-06 [1] CRAN (R 4.4.2)\n#&gt;    agricolae         * 1.3-7      2023-10-22 [1] CRAN (R 4.4.2)\n#&gt;    akima             * 0.6-3.4    2022-04-27 [1] CRAN (R 4.4.2)\n#&gt;    AlgDesign           1.2.1.1    2024-09-21 [1] CRAN (R 4.4.1)\n#&gt;    base64enc           0.1-3      2015-07-28 [1] CRAN (R 4.4.0)\n#&gt;    bitops              1.0-9      2024-10-03 [1] CRAN (R 4.4.1)\n#&gt;    boot              * 1.3-31     2024-08-28 [2] CRAN (R 4.4.2)\n#&gt;    bslib               0.8.0      2024-07-29 [1] CRAN (R 4.4.2)\n#&gt;    cachem              1.1.0      2024-05-16 [1] CRAN (R 4.4.2)\n#&gt;    camtrapR          * 2.3.0      2024-02-26 [1] CRAN (R 4.4.2)\n#&gt;    caTools             1.18.3     2024-09-04 [1] CRAN (R 4.4.2)\n#&gt;    cellranger          1.1.0      2016-07-27 [1] CRAN (R 4.4.2)\n#&gt;    CircStats         * 0.2-6      2018-07-01 [1] CRAN (R 4.4.2)\n#&gt;    class               7.3-22     2023-05-03 [2] CRAN (R 4.4.2)\n#&gt;    classInt            0.4-10     2023-09-05 [1] CRAN (R 4.4.2)\n#&gt;    cli                 3.6.3      2024-06-21 [1] CRAN (R 4.4.2)\n#&gt;    cluster             2.1.6      2023-12-01 [2] CRAN (R 4.4.2)\n#&gt;    codetools           0.2-20     2024-03-31 [2] CRAN (R 4.4.2)\n#&gt;    colorspace          2.1-1      2024-07-26 [1] CRAN (R 4.4.2)\n#&gt;    crosstalk           1.2.1      2023-11-23 [1] CRAN (R 4.4.2)\n#&gt;    data.table          1.16.4     2024-12-06 [1] CRAN (R 4.4.2)\n#&gt;    DBI                 1.2.3      2024-06-02 [1] CRAN (R 4.4.2)\n#&gt;    devtools            2.4.5      2022-10-11 [1] CRAN (R 4.4.2)\n#&gt;    digest              0.6.37     2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    dplyr             * 1.1.4      2023-11-17 [1] CRAN (R 4.4.2)\n#&gt;    DT                * 0.33       2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    e1071               1.7-16     2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    ellipsis            0.3.2      2021-04-29 [1] CRAN (R 4.4.2)\n#&gt;    evaluate            1.0.1      2024-10-10 [1] CRAN (R 4.4.2)\n#&gt;    extrafont           0.19       2023-01-18 [1] CRAN (R 4.4.0)\n#&gt;    extrafontdb         1.0        2012-06-11 [1] CRAN (R 4.4.0)\n#&gt;    fansi               1.0.6      2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    farver              2.1.2      2024-05-13 [1] CRAN (R 4.4.2)\n#&gt;    fastmap             1.2.0      2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    fontBitstreamVera   0.1.1      2017-02-01 [1] CRAN (R 4.4.0)\n#&gt;    fontLiberation      0.1.0      2016-10-15 [1] CRAN (R 4.4.0)\n#&gt;    fontquiver          0.2.1      2017-02-01 [1] CRAN (R 4.4.2)\n#&gt;    forcats           * 1.0.0      2023-01-29 [1] CRAN (R 4.4.2)\n#&gt;    fs                  1.6.5      2024-10-30 [1] CRAN (R 4.4.2)\n#&gt;    fuzzySim          * 4.29       2024-12-13 [1] CRAN (R 4.4.2)\n#&gt;    gdtools             0.4.1      2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    generics            0.1.3      2022-07-05 [1] CRAN (R 4.4.2)\n#&gt;    ggplot2           * 3.5.1      2024-04-23 [1] CRAN (R 4.4.2)\n#&gt;    glue                1.8.0      2024-09-30 [1] CRAN (R 4.4.2)\n#&gt;    gplots              3.2.0      2024-10-05 [1] CRAN (R 4.4.2)\n#&gt;    grateful          * 0.2.10     2024-09-04 [1] CRAN (R 4.4.2)\n#&gt;    gridExtra           2.3        2017-09-09 [1] CRAN (R 4.4.2)\n#&gt;    gtable              0.3.6      2024-10-25 [1] CRAN (R 4.4.2)\n#&gt;    gtools              3.9.5      2023-11-20 [1] CRAN (R 4.4.2)\n#&gt;    hms                 1.1.3      2023-03-21 [1] CRAN (R 4.4.2)\n#&gt;    hrbrthemes        * 0.8.7      2024-03-04 [1] CRAN (R 4.4.2)\n#&gt;    htmltools           0.5.8.1    2024-04-04 [1] CRAN (R 4.4.2)\n#&gt;    htmlwidgets         1.6.4      2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    httpuv              1.6.15     2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    jquerylib           0.1.4      2021-04-26 [1] CRAN (R 4.4.2)\n#&gt;    jsonlite            1.8.9      2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    kableExtra        * 1.4.0      2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    KernSmooth          2.23-24    2024-05-17 [2] CRAN (R 4.4.2)\n#&gt;    knitr               1.49       2024-11-08 [1] CRAN (R 4.4.2)\n#&gt;    later               1.3.2      2023-12-06 [1] CRAN (R 4.4.2)\n#&gt;    lattice             0.22-6     2024-03-20 [2] CRAN (R 4.4.2)\n#&gt;    leafem              0.2.3      2023-09-17 [1] CRAN (R 4.4.2)\n#&gt;    leaflet             2.2.2      2024-03-26 [1] CRAN (R 4.4.2)\n#&gt;    lifecycle           1.0.4      2023-11-07 [1] CRAN (R 4.4.2)\n#&gt;    lubridate         * 1.9.4      2024-12-08 [1] CRAN (R 4.4.2)\n#&gt;    magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.4.2)\n#&gt;    mapview           * 2.11.2     2023-10-13 [1] CRAN (R 4.4.2)\n#&gt;    MASS              * 7.3-61     2024-06-13 [2] CRAN (R 4.4.2)\n#&gt;    Matrix              1.7-1      2024-10-18 [2] CRAN (R 4.4.2)\n#&gt;    memoise             2.0.1      2021-11-26 [1] CRAN (R 4.4.2)\n#&gt;    mgcv                1.9-1      2023-12-21 [2] CRAN (R 4.4.2)\n#&gt;    mime                0.12       2021-09-28 [1] CRAN (R 4.4.0)\n#&gt;    miniUI              0.1.1.1    2018-05-18 [1] CRAN (R 4.4.2)\n#&gt;    modEvA              3.23       2024-11-24 [1] CRAN (R 4.4.2)\n#&gt;    munsell             0.5.1      2024-04-01 [1] CRAN (R 4.4.2)\n#&gt;    mvtnorm             1.3-2      2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    nlme                3.1-166    2024-08-14 [2] CRAN (R 4.4.2)\n#&gt;    patchwork         * 1.3.0      2024-09-16 [1] CRAN (R 4.4.2)\n#&gt;    pillar              1.9.0      2023-03-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgbuild            1.4.5      2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.4.2)\n#&gt;    pkgload             1.4.0      2024-06-28 [1] CRAN (R 4.4.2)\n#&gt;    png                 0.1-8      2022-11-29 [1] CRAN (R 4.4.0)\n#&gt;    processx            3.8.4      2024-03-16 [1] CRAN (R 4.4.2)\n#&gt;    profvis             0.4.0      2024-09-20 [1] CRAN (R 4.4.2)\n#&gt;    promises            1.3.0      2024-04-05 [1] CRAN (R 4.4.2)\n#&gt;    proxy               0.4-27     2022-06-09 [1] CRAN (R 4.4.2)\n#&gt;    ps                  1.8.1      2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    purrr             * 1.0.2      2023-08-10 [1] CRAN (R 4.4.2)\n#&gt;    quarto            * 1.4.4      2024-07-20 [1] CRAN (R 4.4.2)\n#&gt;    R.cache             0.16.0     2022-07-21 [1] CRAN (R 4.4.2)\n#&gt;    R.methodsS3         1.8.2      2022-06-13 [1] CRAN (R 4.4.0)\n#&gt;    R.oo                1.27.0     2024-11-01 [1] CRAN (R 4.4.1)\n#&gt;    R.utils             2.12.3     2023-11-18 [1] CRAN (R 4.4.2)\n#&gt;    R6                  2.5.1      2021-08-19 [1] CRAN (R 4.4.2)\n#&gt;    RAIeR             * 0.0.0.9000 2024-12-15 [1] Github (SMandujanoR/RAIeR@3ff1ed6)\n#&gt;    raster              3.6-30     2024-10-02 [1] CRAN (R 4.4.2)\n#&gt;    RColorBrewer      * 1.1-3      2022-04-03 [1] CRAN (R 4.4.0)\n#&gt;    Rcpp                1.0.13-1   2024-11-02 [1] CRAN (R 4.4.2)\n#&gt;    RcppNumerical       0.6-0      2023-09-06 [1] CRAN (R 4.4.2)\n#&gt;  D RcppParallel        5.1.9      2024-08-19 [1] CRAN (R 4.4.2)\n#&gt;    readr             * 2.1.5      2024-01-10 [1] CRAN (R 4.4.2)\n#&gt;    readxl            * 1.4.3      2023-07-06 [1] CRAN (R 4.4.2)\n#&gt;    remotes             2.5.0      2024-03-17 [1] CRAN (R 4.4.2)\n#&gt;    renv                1.0.11     2024-10-12 [1] CRAN (R 4.4.2)\n#&gt;    rlang               1.1.4      2024-06-04 [1] CRAN (R 4.4.2)\n#&gt;    rmarkdown           2.29       2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    rstudioapi          0.17.1     2024-10-22 [1] CRAN (R 4.4.2)\n#&gt;    Rttf2pt1            1.3.12     2023-01-22 [1] CRAN (R 4.4.0)\n#&gt;    sass                0.4.9      2024-03-15 [1] CRAN (R 4.4.2)\n#&gt;    satellite           1.0.5      2024-02-10 [1] CRAN (R 4.4.2)\n#&gt;    scales              1.3.0      2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    secr                5.1.0      2024-11-04 [1] CRAN (R 4.4.2)\n#&gt;    sessioninfo         1.2.2      2021-12-06 [1] CRAN (R 4.4.2)\n#&gt;    sf                * 1.0-19     2024-11-05 [1] CRAN (R 4.4.2)\n#&gt;    shiny               1.9.1      2024-08-01 [1] CRAN (R 4.4.2)\n#&gt;    sp                * 2.1-4      2024-04-30 [1] CRAN (R 4.4.2)\n#&gt;    stringi             1.8.4      2024-05-06 [1] CRAN (R 4.4.0)\n#&gt;    stringr           * 1.5.1      2023-11-14 [1] CRAN (R 4.4.2)\n#&gt;    styler            * 1.10.3     2024-04-07 [1] CRAN (R 4.4.2)\n#&gt;    svglite             2.1.3      2023-12-08 [1] CRAN (R 4.4.2)\n#&gt;    systemfonts         1.1.0      2024-05-15 [1] CRAN (R 4.4.2)\n#&gt;    terra             * 1.8-5      2024-12-12 [1] CRAN (R 4.4.2)\n#&gt;    tibble            * 3.2.1      2023-03-20 [1] CRAN (R 4.4.2)\n#&gt;    tidyr             * 1.3.1      2024-01-24 [1] CRAN (R 4.4.2)\n#&gt;    tidyselect          1.2.1      2024-03-11 [1] CRAN (R 4.4.2)\n#&gt;    tidyterra           0.6.1      2024-06-08 [1] CRAN (R 4.4.2)\n#&gt;    tidyverse         * 2.0.0      2023-02-22 [1] CRAN (R 4.4.2)\n#&gt;    timechange          0.3.0      2024-01-18 [1] CRAN (R 4.4.2)\n#&gt;    tzdb                0.4.0      2023-05-12 [1] CRAN (R 4.4.2)\n#&gt;    units               0.8-5      2023-11-28 [1] CRAN (R 4.4.2)\n#&gt;    urlchecker          1.0.1      2021-11-30 [1] CRAN (R 4.4.2)\n#&gt;    usethis             3.0.0      2024-07-29 [1] CRAN (R 4.4.1)\n#&gt;    utf8                1.2.4      2023-10-22 [1] CRAN (R 4.4.2)\n#&gt;    vctrs               0.6.5      2023-12-01 [1] CRAN (R 4.4.2)\n#&gt;    viridis           * 0.6.5      2024-01-29 [1] CRAN (R 4.4.2)\n#&gt;    viridisLite       * 0.4.2      2023-05-02 [1] CRAN (R 4.4.2)\n#&gt;    withr               3.0.2      2024-10-28 [1] CRAN (R 4.4.2)\n#&gt;    xfun                0.49       2024-10-31 [1] CRAN (R 4.4.2)\n#&gt;    xml2                1.3.6      2023-12-04 [1] CRAN (R 4.4.2)\n#&gt;    xtable              1.8-4      2019-04-21 [1] CRAN (R 4.4.2)\n#&gt;    yaml                2.3.10     2024-07-26 [1] CRAN (R 4.4.1)\n#&gt; \n#&gt;  [1] C:/Users/usuario/AppData/Local/R/win-library/4.4\n#&gt;  [2] C:/Program Files/R/R-4.4.2/library\n#&gt; \n#&gt;  D ── DLL MD5 mismatch, broken installation.\n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"
  }
]