---
title: 'Multispecies occupancy model'
subtitle: "A new extension of camtrapR for community occupancy models"
description: "Multispecies occupancy models combines information from multiple species to estimate both individual and community-level responses to environmental variables"
author: 
  - name: 'Diego J. Lizcano'
    orcid: 0000-0002-9648-0576
    affiliation: "WildMon"
date: '2024-06-23'
file-modified: Sys.Date()
categories: [R, occupancy, JAGS, camtrapR]
image: 'img/preview.png'
draft: true
citation: true
bibliography: C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/grateful-refs.bib
---

## Using CamtrapR

CamtrapR is making very easy to make Multispecies occupancy models from camera trap data. Here one example.

```{r}
#| label: renv
#| include: false
# https://www.joelnitta.com/posts/2024-01-11_using_renv_with_blog/
# library(renv)
# renv::use(lockfile = "renv.lock")

library(quarto) # R Interface to 'Quarto' Markdown Publishing System
library(styler) # Non-Invasive Pretty Printing of R Code
```

## Load packages

```{r setup, include=TRUE}

library(grateful) # Facilitate Citation of R Packages
library(patchwork) # The Composer of Plots
library(readxl) # Read Excel Files
library(sf) # Simple Features for R
library(mapview) # Interactive Viewing of Spatial Data in R
library(terra) # Spatial Data Analysis
library(elevatr) # Access Elevation Data from Various APIs

library(camtrapR) # Camera Trap Data Management and Preparation of Occupancy and Spatial Capture-Recapture Analyses 
library(rjags) # Bayesian Graphical Models using MCMC 
library(nimble) # MCMC, Particle Filtering, and Programmable Hierarchical Modeling 

library(bayesplot) # Plotting for Bayesian Models # Plotting for Bayesian Models 
library(SpadeR) # Species-Richness Prediction and Diversity Estimation with R 
library(tictoc) # Functions for Timing R Scripts, as Well as Implementations of "Stack" and "StackList" Structures 
library(beepr) # Easily Play Notification Sounds on any Platform 
library(snowfall) # Easier Cluster Computing (Based on 'snow')
library(bayesplot) # Plotting for Bayesian Models # Plotting for Bayesian Models 

library(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax
library(tidyverse) # Easily Install and Load the 'Tidyverse'


```

## Load data

```{r warning=FALSE}

datos <- read_excel("C:/CodigoR/CameraTrapCesar/data/CT_Cesar.xlsx")

```



## Selecting Just CT_Becerril 2021

Sometimes we need to make unique codes per camera and cameraOperation table.

```{r}
# make a new column Station
# datos_PCF <- datos |> dplyr::filter(Proyecto=="CT_LaPaz_Manaure") |> unite ("Station", ProyectoEtapa:Salida:CT, sep = "-")

# fix dates
datos$Start <- as.Date(datos$Start, "%d/%m/%Y")
datos$End <- as.Date(datos$End, "%d/%m/%Y")
datos$eventDate <- as.Date(datos$eventDate, "%d/%m/%Y")
datos$eventDateTime <- ymd_hms(paste(datos$eventDate, " ",
                              datos$eventTime, ":00", sep=""))

# filter Becerril
datos_PCF <- datos |> dplyr::filter(ProyectoEtapa=="CT_Becerril") |> mutate (Station=IdGeo)

# filter 2021 and make uniques
CToperation  <- datos_PCF |> filter(Year==2021) |> group_by(Station) |> 
                           mutate(minStart=min(Start), maxEnd=max(End)) |> distinct(Longitude, Latitude, minStart, maxEnd, Year) |> ungroup()


```


## Generating cameraOperation and making detectionHistory 

```{r }
# Generamos la matríz de operación de las cámaras

camop <- cameraOperation(CTtable= CToperation, # Tabla de operación
                         stationCol= "Station", # Columna que define la estación
                         setupCol= "minStart", #Columna fecha de colocación
                         retrievalCol= "maxEnd", #Columna fecha de retiro
                         #hasProblems= T, # Hubo fallos de cámaras
                         dateFormat= "%Y-%m-%d") #, # Formato de las fechas
                         #cameraCol="CT")
                         # sessionCol= "Year")

# Generar las historias de detección ---------------------------------------
## remove plroblem species
ind <- which(datos_PCF$Species=="Marmosa sp.")
datos_PCF <- datos_PCF[-ind,]

DetHist_list <- lapply(unique(datos_PCF$Species), FUN = function(x) {
  detectionHistory(
    recordTable         = datos_PCF, # Tabla de registros
    camOp                = camop, # Matriz de operación de cámaras
    stationCol           = "Station",
    speciesCol           = "Species",
    recordDateTimeCol    = "eventDateTime",
    recordDateTimeFormat  = "%Y-%m-%d",
    species              = x,     # la función reemplaza x por cada una de las especies
    occasionLength       = 10, # Colapso de las historias a 10 ías
    day1                 = "station", #inicie en la fecha de cada survey
    datesAsOccasionNames = FALSE,
    includeEffort        = TRUE,
    scaleEffort          = TRUE,
    #unmarkedMultFrameInput=TRUE
    timeZone             = "America/Bogota" 
    )
  }
)

# names
names(DetHist_list) <- unique(datos_PCF$Species)

# Finalmente creamos una lista nueva donde estén solo las historias de detección
ylist <- lapply(DetHist_list, FUN = function(x) x$detection_history)



```


## Preparing spatial covariates
### make sf, get elevation and derive terrain 


```{r}

# make sf object
projlatlon <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"

datos_PCF_sf <-  st_as_sf(x = CToperation,
                         coords = c("Longitude", 
                                    "Latitude"),
                         crs = projlatlon)

# covariates
elev <- rast(get_elev_raster(datos_PCF_sf, z=14)) # get raster map
slope <- terrain(elev, v="slope", neighbors=8, unit="degrees")  
# also slope, aspect, TPI, TRI, TRIriley, TRIrmsd, roughness, flowdir 
rough <- terrain(elev, v="roughness", neighbors=8, unit="degrees")  
# landcover <- rast("C:/CodigoR/WCS-CameraTrap/raster/latlon/LandCover_Type_Yearly_500m_v61/LC1/MCD12Q1_LC1_2021_001.tif") 

cos_rast <- c(elev,slope, rough) # make a stack
# rename stack
names(cos_rast) <- c("elev", "slope", "rough")

mapview(elev) + mapview(datos_PCF_sf)

```

### Extract values from the rasters

```{r}


# extract
covs <- terra::extract(cos_rast, datos_PCF_sf)
# landcov <- terra::extract(landcover, datos_PCF_sf)



```

## Multispecies occupancy model
### Preparing the model

```{r}

# check consistancy equal mumner of spatial covariates and rows in data
# identical(nrow(ylist[[1]]), nrow(covars)) 

# Base de datos para los análisis -----------------------------------------

data_list <- list(ylist    = ylist, # Historias de detección
                  siteCovs = covs[,2:4], #covars, # Covariables de sitio
                  obsCovs  = list(effort = DetHist_list[[1]]$effort))  # agregamos el esfuerzo de muestreo como covariable de observación

# 3. 1 Modelo multi-especie  -----------------------------------------

# Se creará un txt temporal donde estarán las especificaciones del modelo en enfoque Bayesiano
modelfile <- (fileext = "modoccu.txt")

# Usaremos la función ` communityModel`


```

### Generating the model

```{r}


# Generemos el modelo
comu_model <- communityModel(data_list, # la lista de datos
                             occuCovs = list(ranef=c("rough", "elev")), # ranef La covariables de sitio
                             detCovsObservation = list(fixed = "effort"), #Covariables de observación
                             intercepts = list(det = "ranef", occu = "ranef"),
                             augmentation = c(full = 30),# Número aumentado de especies
                             modelFile = "modelfile")

summary(comu_model)


```


### Running the model

> Go for a coffe and enjoy it waiting for the signal beep

```{r}
#| echo: true
#| eval: false

# Running the model

fit.commu <- fit(comu_model,
                 n.iter = 1200,
                 n.burnin = 200,
                 thin = 2,
                 chains = 3,
                 cores = 3,
                 quiet = T
);beep(sound = 4)

# save the results to not run again
save(fit.commu, file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/DR_result.R") # guardamos los resultados para no correr de nuevo

```

```{r}
#| echo: false
#| eval: true

load("C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/DR_result.R")


```


### See the results
#### As a table
```{r}

# Resultados --------------------------------------------------------------

# Extraemos lo tabla de valores estimados
modresult <- as.data.frame(summary(fit.commu)[["statistics"]])
# View(modresult)
DT::datatable(round(summary(fit.commu)$statistics, 3))

```

#### As graphs
```{r}
# Gráficos de predicción y de coeficientes

# Otra gran ventaja de CamtrapR es que permite gráficar de manera muy sencilla la predicción posterior del modelo. Veamos que pasa con la ocupación de cada especie

plot_effects(comu_model,
              fit.commu,
              submodel = "det")

plot_coef(comu_model,
           fit.commu,
           submodel = "state",
           combine = T)

plot_effects(comu_model, # El modelo
             fit.commu, # El objeto ajustado
             submodel = "state",
             response = "occupancy") # el parámetro de interés

# Ahora con los coeficientes estimados

# plot_coef(comu_model,
#           fit.commu,
#           submodel = "state")


```

#### See the species richness

```{r}

# Valor de Ntotal, es decir del número de especies estimado
(riqueza_est <- modresult["Ntotal",])

# Veamos el gráfico de la distribución posterior
mcmc_areas(fit.commu, # objeto jags
           pars= "Ntotal", # parámetro de interés
           point_est = "mean",
           prob = 0.95) # intervalos de credibilidad


# La estimación no se ve muy bien, hay que verificar los trace plots

mcmc_trace(fit.commu, pars = "Ntotal")

# Debería verse como un cesped, muy probablemente necesitamos muchas mas iteraciones para este modelo

gd <- as.data.frame(gelman.diag(fit.commu,  multivariate = FALSE)[[1]])
gd["Ntotal",]

#La prueba de Gelman-Rubin debe ser ~1 para considerar que hay buena convergencia. Aunque tenemos un valor bueno para Ntotal, hay varios valores de omega con NA, eso puede estar causando los problemas.

```

#### Comparing species richness with Chao

```{r}

# Comparando con métodos clásicos -----------------------------------------


# Formatear los datos a un vector de frecuencia
inci_Chao <- ylist %>%  # historias de captura
  map(~rowSums(.,na.rm = T)) %>% # sumo las detecciones en cada sitio
  reduce(cbind) %>% # unimos las listas
  t() %>% # trasponer la tabla
  as_tibble() %>% #formato tibble
  mutate_if(is.numeric,~(.>=1)*1) %>%  #como es incidencia, formateo a 1 y 0
  rowSums() %>%  # ahora si la suma de las incidencias en cada sitio
  as_tibble() %>% 
 add_row(value= 67, .before = 1) %>%  # el formato requiere que el primer valor sea el número de sitios
  as.matrix() # Requiere formato de matriz



# Calcular la riqueza con estimadores no paramétricos
chao_sp <- ChaoSpecies(inci_Chao, datatype = "incidence_freq")

NIChao <- chao_sp$Species_table[4,c(1,3,4)] # Extraer valores de IChao

Nocu<- mcmc_intervals(fit.commu, pars = "Ntotal", prob = 0.95,prob_outer = 0.99, point_est = "mean")[[1]] %>%  # Extraer valores del bayes plot
  select(m,l,h) %>% # Seleccionar columnas
  rename("Estimate"= m, # Renombrarlas
         "95%Lower"= l,
         "95%Upper"= h)


# Unir en un solo dataframe
Nplotdata <- rbind(IChao=NIChao, DR.mod=Nocu) %>% 
  as.data.frame() %>% 
  rownames_to_column(.)

# Gráfico para comparar la riqueza estimada
plotN <- ggplot(Nplotdata, aes(x=rowname, y= Estimate, col=rowname))+
  geom_point(aes(shape=rowname),size=3)+
  geom_errorbar(aes(ymin= `95%Lower`, ymax= `95%Upper`), width=.3, size=1)+
  labs(x="Estimador de riqueza",y="Número de especies estimado", title = "Diferencia de los estimadores de riqueza")+
  theme_classic()+
  theme(text=element_text(size = 13), plot.title = element_text(hjust= 0.5), legend.position = "none")

plotN


```

### Spatial prediction
#### Occupancy

> Be aware if you used a large number in interations for better fit in the Running  model part, you can get the Error: cannot locate a vector size 467.8 Gb

```{r}
#| echo: true
#| eval: false

# species occupancy estimates
predictions_psi <- predict(object    = comu_model, 
                             mcmc.list = fit.commu,
                             x         = cos_rast,
                             type      = "psi",
                             draws     = 1000)

# save the results to not run again
writeRaster(predictions_psi[[1]], file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_psi.tif", overwrite=TRUE) # guardamos los resultados para no correr de nuevo



# Plot occupancy
plot(predictions_psi$mean, zlim = c(0,1), 
       col = hcl.colors(100), 
       maxnl = 9,   # plotting only the first 9 species for space reasons
       asp = 1)  
  
```


```{r}
#| echo: false
#| eval: true

# save the results to not run again
predictions_psi_mean <- rast("C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_psi.tif") # guardamos los resultados para no correr de nuevo

# Plot occupancy
plot(predictions_psi_mean, zlim = c(0,1), 
       col = hcl.colors(100), 
       maxnl = 9,   # plotting only the first 9 species for space reasons
       asp = 1)  

```

#### Species Richness

Notice this prediction can be also very RAM consuming...

```{r}
#| echo: true
#| eval: false

# species richness estimates
predictions_rich <- predict(object   = comu_model, 
                             mcmc.list = fit.commu,
                             x         = cos_rast,
                             type      = "richness",
                            draws     = 1000)

# save the results to not run again
writeRaster(predictions_rich, file="C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_rich.tif") # guardamos los resultados para no correr de nuevo


# plot richness
plot(predictions_rich, col = hcl.colors(100), asp = 1)
  

```

```{r}
#| echo: false
#| eval: true

# save the results to not run again
predictions_rich <- terra::rast("C:/CodigoR/CameraTrapCesar/posts/2024-06-20-multispecies-occupancy/result/predictions_rich.tif") # guardamos los resultados para no correr de nuevo

# Plot occupancy
plot(predictions_rich, zlim = c(0,1), 
       col = hcl.colors(100), 
       maxnl = 9,   # plotting only the first 9 species for space reasons
       asp = 1)  

```
 
An additional option to avoid the out of memory issue can be to aggregate the pixel size before making the prediction.

```{r}
#| echo: true
#| eval: false
#| 
new_raster <- aggregate(old_raster, fact = 10) 

```


## Package Citation

```{r }
pkgs <- cite_packages(output = "paragraph", out.dir = ".") #knitr::kable(pkgs)
pkgs

```

## Sesion info



<details>
  
<summary>Session info</summary>

```{r sessioninfo, echo = FALSE}
#| label: sessioninfo
options(width = 120)
devtools::session_info()
```

</details>



